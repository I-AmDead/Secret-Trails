-- -*- mode: lua; coding: windows-1251-dos -*-
-------------------------------------------------------------------------------
--- ogse_surge_mgr.script
--- Модуль выброса для OGSE
--- (c) OGS Evolution Team, 2014
-------------------------------------------------------------------------------

local sounds_to_prefetch = {
  [[anomaly\dezodor]],
  [[anomaly\dezodor1]],
  [[anomaly\dezodor2]],
  [[anomaly\dezodor3]],
  [[anomaly\dezodor4]],
}


function attach( sm )
  sm:subscribe({ signal = "on_first_update", fun = this.on_first_update })
  sm:subscribe({ signal = "on_info",         fun = this.on_get_info     })
  sm:subscribe({ signal = "on_spawn",        fun = this.on_actor_spawn  })
end

actor_in_hideout = false --Находится ли актор в укрытии
is_surge_started = false --Начался ли выброс
is_surge_raskolbas = false --Находится ли выброс в смертельной стадии

local debug_logging = false
local fsurgelog
local snd_pda_dead = sound_object('device\\pda\\pda_dead')
local pda_anm_time
local anim

local aux_counter = 0
function surge_log(f,...)
	if not debug_logging then return end
	if not fsurgelog then
		local surge_log_path = getFS():update_path("$logs$", "surge_log_"..get_game_id()..".txt")
		fsurgelog = io.open(surge_log_path, "a")
	end
	local time_str = time2string(game.get_game_time(), "%04d/%02d/%02d %02d:%02d:%02d.%03d", {'y','m','d','h','min','s','ms'})
	local cntr_str = string.format(" %03d] ", aux_counter)
	fsurgelog:write('['..time_str..cntr_str..f:format(...)..'\n')
	aux_counter = aux_counter + 1
	fsurgelog:flush()
end

local first_surge_wait_time = 24 -- время от начала игры до первого выброса, час.
local first_surge_time_disp = 12 -- разброс времени первого выброса, час.
local base_surge_wait_time  = 72 -- среднее время между выбросами, час.
local surge_wait_time_disp  = 12 -- разброс времени ожидания, час.
local surge_postpone_time   = 10 -- [час.], время откладывания выброса в случае невозможности его начать по сюжетным ограничениям
local sound_obj_right = xr_sound.get_safe_sound_object(
  "ambient\\random\\rnd_the_horror"
)
local sound_obj_left  = xr_sound.get_safe_sound_object(
  "ambient\\random\\rnd_the_horror"
)


local lname
local is_indoor = false

function on_actor_spawn()
  this.surge_db_init()
  lname     = level.name()
  is_indoor = isIndoor( lname )
end

function can_start_surge_now()
  return not (
     lname == "l12_stancia"
    or lname == "l12_stancia_2"
    or lname == "l12u_control_monolith"
    or lname == "l12u_sarcofag"
  )
end


function get_first_surge_wait_time()
	local wait_time_sec = (first_surge_wait_time + (math.random() - 0.5) * first_surge_time_disp) * 3600
	return seconds2ctime(wait_time_sec)
end
function get_surge_wait_time()
	local wait_time_sec = (base_surge_wait_time + (math.random() - 0.5) * surge_wait_time_disp) * 3600
	return seconds2ctime(wait_time_sec)
end
function get_surge_postpone_time()
  return seconds2ctime( surge_postpone_time * 3600 )
end

-- конфигурация стадий выброса
-- local surge_db = {
--     <имя инфопорции стадии> = {
--       on_info = {
--         -- действия, выполняемые один раз в момент начала соответствующей стадии
--         стандартный набор действий включает в себя:
--         Flag2 = 1/0,
--         Dead2 = 1/0,
--         call# = <имя файла>.<имя функции>, -- # - целое число от 1 и выше
--         pp_eff# = {"<имя файла постпроцесса>.ppe", <id>, true/false},
--         cam_eff# = {"<имя файла анимации камеры>.anm", <id>, true/false},
--         -- звук будет проигран по схеме
--         snd# = <путь до файла звука без расширения>,
--         cam_eff_rem# = <id>, -- выключить анимацию камеры
--         pp_eff_rem# = <id>, -- выключить эффект постпроцесса
--         if_surface = { -- выполнить при условии нахождения на поверхности
--           -- стандартный набор действий
--         },
--         if_underground = { -- если под землёй
--           -- стандартный набор действий
--         },
--         if_not_safe = { -- если на поверхности и не в укрытии
--           -- стандартный набор действий
--         },
--       },
--       on_info_deferred = {
--         -- действия, выполняемые в момент начала соответствующей
--         -- стадии, но не сразу, а при первом апдейте после выдачи
--         -- соответствуюшей инфопорции
--         --
--         -- сюда помещаем всякие звуки, постэффекты и т.п. Идея в том,
--         -- что при пропуске серии стадий из-за сохранения/загрузки
--         -- надо выполнить все действия, вошедшие в пропущенные стадии,
--         -- но при этом часть действия типа звуков и постэффектов для
--         -- пропущенных стадий не выполнять, поскольку их одновременный
--         -- проигрыш будет выглядеть нелепо.  Поскольку до первого
--         -- апдейта секция on_info_deferred не будет парсится, то в
--         -- первый апдейт после загрузки будет проверена только
--         -- последняя стадия, и действия выполнятся только для неё
--         --
--         -- включает стандартный набор действий, включая ветвление if_surface/if_underground
--       },
--       on_reinit = {
--         -- действия, выполняемые при загрузке игры если идёт стадия
--         -- выброса (для восстановления чего-там надо восстанавливать)
--         --
--         -- стандартный набор действий, включая ветвление if_surface/if_underground
--       },
--     },

local pda_distortion_timer
local function start_pda_distortion( min, max )
	if pda_distortion_timer then
		pda_distortion_timer:stop()
		pda_distortion_timer = nil
	end

	pda_distortion_timer = dsh.wait_condition(
		function()
			set_pda_params(vector():set(min / 1000, min / 1000, 0))
			min = min + 1
			return min == max
		end,
		function() pda_distortion_timer = nil end,
		function() ogse_signals.get_mgr():reschedule( 100 ) end
	)
end


function set_info_preblow()
  db.actor:give_info_portion( "pre_blowout" )
end


function set_info_preblow_to_blow()
  db.actor:give_info_portion( "pre_blowout2" )
end


function set_info_blow()
  db.actor:give_info_portion( "blowout" )
  run_blowout_timer()
end


function set_first_blow()
  if not has_alife_info( "first_blowout" ) then
    db.actor:give_info_portion( "first_blowout" )
  end
end


surge_db = {}
function surge_db_init()
  surge_db.surge_process_stage_01 = {
    on_info = {
      call1 = function()
        amk.save_variable( "blowout", 1 )
        start_pda_distortion( 1, 100 )
        set_info_preblow()  -- инфо предвыброса
        news_main_new.vubros_msg()  -- новость о выбросе
      end,
    },
    on_info_deferred = {
      if_surface = {
        call1 = soundtrack.preblow, -- глухой звук ветра
      },
    },
		on_reinit = {
			call1 = function() set_pda_params(vector():set(0,0.1,0)) end
		},
	}
  surge_db.surge_process_stage_02 = {
    on_info = {
      call1 = this.set_info_preblow_to_blow,
      if_surface = {
        call2 = function() 
                start_pda_distortion( 100, 150 )
                is_surge_started = true 
        end,
        Flag2 = 1,
      }
    },
    on_info_deferred = {
      if_surface = {
        -- call1 = soundtrack.attention_everyone, -- сирена
      }
    },



    on_reinit = {
      call1 = function() 
      set_pda_params(vector():set(0.15,0.15,0))
      end,
      if_surface = {Flag2 = 1},
    },
  }
  surge_db.surge_process_stage_03 = {
    on_info = {
      call1 = function()
        amk.save_variable( "blowout", 2 )
        set_info_blow()
        amk_mod.on_blowout_hit_actor()
        amk_mod.blowout_phantoms()
      end,
      if_surface = {
        Flag2 = 1,
      },
    },
    on_info_deferred = {
      if_surface = {
        call1 = soundtrack.surge_begin, -- глухой звук ветра (ещё раз?)
      },
    },
    on_reinit = {
      call1 = function() 
      set_pda_params(vector():set(0.2,0.2,0))
      end,
      if_surface = { Flag2 = 1 },
    },
  }
  surge_db.surge_process_stage_04 = { -- первые визуальные признаки выброса
    on_info = {
      call1 = function()
        start_pda_distortion( 200, 250 )
        dsh_anomaly_detector.pre_blow_off()
        amk_anoms.pre_blow_off()
        db.actor.blowout_outside = true
      end,
      if_surface     = { Flag2 = 1, },
      if_underground = { Flag2 = 0, },
    },
    on_info_deferred = {
      if_surface = {
        -- радиопереговоры с последующими раскатами грома
        call1    = soundtrack.surge_sound,
        pp_eff1  = { "vibros_p.ppe", 1974, false }, -- разовое двоение картинки
        -- постоянное раскачивание, как будто качается земля
        cam_eff1 = {"camera_effects\\earthquake.anm", 1974, true },
      },
      if_underground = {
        call1 = soundtrack.play_ambient, -- опять шум ветра
      },
    },
    on_reinit = {
      call1 = function()
        dsh_anomaly_detector.pre_blow_off()
        set_pda_params(vector():set(0.25,0.25,0.0))
        amk_anoms.pre_blow_off() -- Поднимаем флаги выброса для локаций
      end,
      if_surface     = { Flag2 = 1 },
      if_underground = { Flag2 = 0 },
    },





  }
  surge_db.surge_process_stage_05 = { --3. Проигрываем промежуточные эффекты
    on_info = {
      call1 = pda_off,
      if_surface     = { Flag2 = 1, },
      if_underground = { Flag2 = 0, },
    },
    on_info_deferred = {
      if_surface = {
        call1 = soundtrack.surge_wave_1, -- хитрое гудение
      },
      if_underground = {
        call1 = soundtrack.play_ambient, -- опять шум ветра
      },
    },
    on_reinit = {
      call1 = set_pda_params(vector():set(0.5, 0.2, 0)),
      if_surface     = { Flag2 = 1 },
      if_underground = { Flag2 = 0 },
    },
  }
  surge_db.surge_process_stage_06 = {-- 4. Спустя период затишья начинаем выброс
    on_info = {
      call1 = pda_off,
      if_surface     = { Flag2 = 1, },
      if_underground = { Flag2 = 0, },
    },
    on_info_deferred = {
      if_surface = {
        call1 = soundtrack.surge_wave_2, -- хитрое гудение
        snd1  = "anomaly\\blowout", -- раскаты грома с сиренами
      },
      call1    = this.play_sounds, -- рандомные звуки: гудение, шум воздуха и пр.
      -- низкий глухой шум воздуха с раскатами грома в фоне
      snd1     = "ambient\\earthquake",
      -- разовое двоение картинки с покраснением, выбелением,
      -- выцветанием картинки в конце
      pp_eff1  = { "vibros.ppe", 1974, false },
      -- землетрясение
      cam_eff1 = { "camera_effects\\earthquake.anm", 1974, true },
    },
    on_reinit = {
      call1 = set_pda_params(vector():set(0.5, 0.2, 0)),
      if_surface     = { Flag2 = 1 },
      if_underground = { Flag2 = 0 },
    },
  }
  surge_db.surge_process_stage_07 = { -- 5. Начинаем расколбас
    on_info = {
      call1 = function()
        pda_off()
        amk.save_variable( "blowout", 3 )
      end,
      if_surface = {
        -- call2 = ogse.kill_crow,
        Flag2 = 1,
        Dead2 = 1,
      },
      if_underground = {
        Flag2 = 0,
        Dead2 = 0
      },
    },
    on_info_deferred = {
      cam_eff_rem1 = 1974,
      if_not_safe = {
        snd1     = "actor\\pain_3", -- ой
        -- как по голове дали
        cam_eff1 = { "camera_effects\\head_shot.anm", 1975, false },
        pp_eff1  = { "blink.ppe", 2020, false }, -- на пару секунд всё белеет
      },
      if_surface = {
        call1   = soundtrack.surge_wave_3, -- долгое, низкое гудение
        -- кратковременное раздвоение в глазах
        pp_eff1 = { "yantar_underground_psi.ppe", 2010, false },
      },
      if_underground = {
        pp_eff1 = { "escape.ppe", 1974, false }, -- короткое покраснение картинки
        call1   = soundtrack.play_ambient, -- шум ветра
      },
    },
    on_reinit = {
      call1 = set_pda_params(vector():set(0.5, 0.2, 0)),
      if_surface     = { Flag2 = 1, Dead2 = 1 },
      if_underground = { Flag2 = 0, Dead2 = 0 },
    },
  }
  surge_db.surge_process_stage_08 = {
    on_info = {
      call1 = pda_off,
      if_surface = {
        Flag2 = 1,
        Dead2 = 1,
      },
      if_underground = {
        Flag2 = 0,
        Dead2 = 0,
      },
    },
    on_info_deferred = {
      cam_eff_rem1 = 1974,
      if_surface = {
        call1 = soundtrack.surge_wave_4, -- опять гудение
      },
      if_underground = {
        rnd = {
          {
            call1   = soundtrack.rock_sound, -- камешки сыпятся
            pp_eff1 = { "yantar_underground_psi.ppe", 1974, false },
          },
          {
            -- отдалённый грохот камней или обвал
            snd1    = "ambient\\earthquake",
            -- сильное кратковременное двоение
            pp_eff1 = { "total_recall.ppe", 1974, false },
          },
          {
            snd1    = "ambient\\earthquake",
            -- полное плавное почернение, потом плавный возврат
            pp_eff1 = { "agr_u_fade.ppe", 1974, false },
            pp_eff2 = { "total_recall.ppe", 1986, false },
          },
          {
            -- тут тишина
          },
        },
      },
    },
    on_reinit = {
      call1 = set_pda_params(vector():set(0.5, 0.2, 0)),
      if_surface     = { Flag2 = 1, Dead2 = 1 },
      if_underground = { Flag2 = 0, Dead2 = 0 },
    },
  }
  surge_db.surge_process_stage_09 = {
    on_info = {
      call1 = pda_off,
      if_surface = {
        Flag2 = 1,
        Dead2 = 1,
      },
      if_underground = {
        Flag2 = 0,
        Dead2 = 0,
      },
    },
    on_info_deferred = {
      cam_eff_rem1 = 1974,
      if_surface = {
        call1 = soundtrack.surge_rumble, -- шум ветра с отдалёнными раскатами грома
      },
      if_underground = {
        rnd = {
          {
            call1   = soundtrack.rock_sound, -- камешки сыпятся
            -- лёгкое короткое двоение с расплыванием
            pp_eff1 = { "yantar_underground_psi.ppe", 1974, false },
          },
          {
            snd1    = "ambient\\earthquake",
            pp_eff1 = { "total_recall.ppe", 1974, false },
          },
          {
            snd1    = "ambient\\earthquake",
            pp_eff1 = { "agr_u_fade.ppe",   1974, false },
            pp_eff2 = { "total_recall.ppe", 1986, false },
          },
          {
            -- тут тишина
          },
        },
      },
    },
    on_reinit = {
      call1 = set_pda_params(vector():set(0.5, 0.2, 0)),
      if_surface     = { Flag2 = 1, Dead2 = 1 },
      if_underground = { Flag2 = 0, Dead2 = 0 },
    },
  }
  surge_db.surge_process_stage_10 = surge_db.surge_process_stage_09
  surge_db.surge_process_stage_11 = surge_db.surge_process_stage_09
  surge_db.surge_process_stage_12 = surge_db.surge_process_stage_09
  surge_db.surge_process_stage_13 = { -- 6. Выброс близится к концу
    on_info = {
      call1 = function()
        pda_off()
        amk.save_variable( "blowout", 4 )
        amk_mod.blowout_phantoms()
        amk_mod.on_blowout_hit_actor()
      end,
      if_surface = {
        Flag2 = 1,
        Dead2 = 1,
      },
      if_underground = {
        Flag2 = 0,
        Dead2 = 0,
      },
    },
    on_info_deferred = {
      if_surface = {
        call1 = soundtrack.surge_outro, -- опять шум воздуха/ветра
      },
      if_underground = {
        call1 = soundtrack.play_ambient,
      },
    },
    on_reinit = {
      call1 = set_pda_params(vector():set(0.5, 0.2, 0)),
      if_surface     = { Flag2 = 1, Dead2 = 1 },
      if_underground = { Flag2 = 0, Dead2 = 0 },
    },
  }
  surge_db.surge_process_stage_14 = {
    -- 7. Завершаем выброс, устанавливаем время следующего
    on_info = {
      if_surface = {
        Flag2 = 0,
        Dead2 = 0,
      },
      if_underground = {
        Flag2 = 0,
        Dead2 = 0,
      },
      call1 = function()
        set_first_blow()
        -- сюда скинул всё, что неудобно вызывать в простой форме
        on_surge_end()
      end,
      Dead2 = 0,
      Flag2 = 0,
    },
    on_info_deferred = {
      if_surface = {
        -- всё полностью белеет, потом обратно
        pp_eff1 = { "teleport.ppe", 2009, false },
      },
      if_underground = {
        pp_eff1 = { "escape.ppe", 2009, false },
      },
      if_not_safe = {
        -- короткая, затухающая встряска
        cam_eff1 = { "camera_effects\\shell_shock.anm", 1974, false },
        snd1     = "actor\\breath_1", -- дыхота
      },
      pp_eff1 = { "yantar_underground_psi.ppe", 2010, false },
      snd1    = "ambient\\earthquake",
    },
  }
  surge_db.surge_process_stage_15 = { -- 6. Выброс близится к концу
    on_info = {
      if_surface = {
      },
      call1 = this.surge_final,
    },
    on_info_deferred = {
    },
  }
end


function on_surge_end()
  actor_was_hit = false
  if db.actor:has_info( "blowout" ) then
    amk_anoms.after_blow_on()
  end
  amk.del_variable( "blowout" )
  db.actor:disable_info_portion("blowout")
  db.actor:disable_info_portion("pre_blowout2")
  ogse_signals.get_mgr():call( "on_after_blowout" )
end


function autosave_blowout()
  if u3_utils.can_save() then
    u3_utils.savegame_date( game.translate_string("save_surge") )
  else
    dsh.timeout( 3000, function()
      autosave_blowout()
    end )
  end
end


local all_infos = {
  "pre_blowout",
  "surge_process_stage_1",
  "surge_process_stage_2",
  "surge_process_stage_3",
  "surge_process_stage_4",
  "surge_process_stage_5",
  "surge_process_stage_6",
  "surge_process_stage_7",
  "surge_process_stage_8",
  "surge_process_stage_9",
  "surge_process_stage_10",
  "surge_process_stage_11",
  "surge_process_stage_12",
  "surge_process_stage_13",
  "surge_process_stage_14",
  "surge_process_stage_15",
}

function surge_final()
  for _, k in ipairs( all_infos ) do
    db.actor:disable_info_portion( k )
  end
  -- тут вставляем перезапуск выброса в погодном менеджере
  dsh_cop_weather.get_weather_mgr():prepare_new_surge()
  dsh.timeout( 10000, function() autosave_blowout() end )
  set_pda_params(vector():set(0,0,0))
end

-- Парсер единичного действия
function parse_and_process_action_item( key, item )
  ASSERT(
    type( key ) == "string",
    "[ogse_surge_mgr.parse_and_process_action_item] action key is not a string, '%s'",
    type( key )
  )
  if     key:sub( 1, 4 ) == "call" then
    ASSERT(
      type( item ) == "function",
      "[ogse_surge_mgr.parse_and_process_action_item] cannot execute function for the key '%s'",
      key
    )
    item()
  elseif key:sub( 1, 11 ) == "cam_eff_rem" then
    -- TODO: проверить, что эффект работает
    level.remove_cam_effector( item )
  elseif key:sub( 1, 10 ) == "pp_eff_rem" then
    -- TODO: проверить, что эффект работает
    level.remove_pp_effector( item )
  elseif key:sub( 1,  6 ) == "pp_eff" then
    -- TODO: проверить, что эффект работает
    -- {"<effect path>", 1974, false},
    level.add_pp_effector( item[ 1 ], item[ 2 ], item[ 3 ] )
  elseif key:sub( 1,  7 ) == "cam_eff" then
    -- TODO: проверить, что эффект работает
    -- {"<effect path>", 1975, false},
    level.add_cam_effector( item[ 1 ], item[ 2 ], item[ 3 ], "" )
  elseif key:sub( 1,   3 ) == "snd" then
    local snd_obj = xr_sound.get_safe_sound_object( item )
    snd_obj:play_at_pos(
      db.actor, vector():set( 0, 0, 0 ), 0, sound_object.s2d
    )
  elseif key == "Dead2" then
    db.Dead2 = item
  elseif key == "Flag2" then
    db.Flag2 = item
  else
    abort(
      "[ogse_surge_mgr.parse_and_process_action_item] unknown action '%s'", key
    )
  end
end


-- Парсер описателя стадии выброса с действиями
function parse_and_process_surge_stage( stage_info )
  for key, item in pairs( stage_info ) do
    if key == "if_underground" then
      if is_indoor then
        parse_and_process_surge_stage( item )
      end
    elseif key == "if_surface" then
      if not is_indoor then
        parse_and_process_surge_stage( item )
      end
    elseif key == "if_not_safe" then
      if not ogse_hideouts.npc_inside_safe_zone( db.actor ) then
        parse_and_process_surge_stage( item )
      end
    elseif key == "rnd" then
      local stage = item
      stage = item[ math.random( table.getn( item ) ) ]
      parse_and_process_surge_stage( stage )
    else
      -- TODO: проверить алгоритм, мог накосяяить
      parse_and_process_action_item( key, item )
    end
  end
end


local deferred_actions -- запрос на выполнение отложенных действий

-- делаем что-то для обновления текущего состояния
local blowout_t
function run_blowout_timer()
  if not blowout_t then
    blowout_t = check_blowout_timer():start()
  end
end


class "check_blowout_timer" ( ogse_qt.quick_timer )
function check_blowout_timer:__init() super()
end

function check_blowout_timer:condition()
  return not ( deferred_actions or db.actor:has_info( "blowout" ) )
end

function check_blowout_timer:action()
  blowout_t = nil
end

function check_blowout_timer:update()
  self:reschedule( 1000 )
  on_actor_update()
end


function on_actor_update()
  if deferred_actions then
    local info_action = deferred_actions.on_info_deferred
    if info_action then
      parse_and_process_surge_stage( info_action )
    end
    deferred_actions = nil
  end
  if db.actor:has_info( "blowout" ) then
    if ogse_hideouts.npc_inside_safe_zone( db.actor ) then
      db.FlagEsc = 1
    else
      db.FlagEsc = 0
    end
    if db.Dead2 == 1 and db.FlagEsc == 0 then
      g_R_Vibros:Run()
      play_sounds()
      level.add_pp_effector( "dead_zone.ppe", 1003, true )
      level.set_pp_effector_factor( 1003, 0.5 )
    end
    if db.FlagEsc == 1 then
      g_R_Vibros:Stop()
    end
  else
    if db.FlagEsc == 1 then
      db.FlagEsc = 0
      db.Dead2   = 0
      g_R_Vibros:Stop()
    end
  end
end


-- выполняем реинициализацию фазы выброса при перезагрузке
function on_first_update()
  -- выполняем восстановление временных эффектов, флагов и т.п.
  set_pda_params(vector():set(0,0,0))
  if db.actor:has_info( "pre_blowout" ) then
    -- ищем текущую стадию выброса
    for stage_infoportion, stage_actions in pairs( surge_db ) do
      -- если сейчас активна стадия выброса
      if db.actor:has_info( stage_infoportion ) then
        local info_action = stage_actions.on_reinit
        if info_action then
          parse_and_process_surge_stage( info_action )
        end
        deferred_actions = stage_actions
        run_blowout_timer()
        break
      end
    end
  end
end


-- выполняем действия, которые должны выполниться строго один раз в
-- момент наступления фазы выброса
function on_get_info( npc, info_id )
  local action_item = surge_db[ info_id ]
  if action_item then
    surge_log( "surge stage: %s", tostring( info_id ) )
    deferred_actions = action_item -- запрашиваем выполнение отложенных действий
    run_blowout_timer()
    local info_action = action_item.on_info
    if info_action then
      parse_and_process_surge_stage( info_action )
    end
  end
end


local surge_hit_db = {
	aver           = { power = 0.001,  type = hit.radiation},
	deadc_city     = {{power = 0.01,type = hit.radiation}, {power = 0.001,  type = hit.shock}, },
	l01_escape     = { power = 0.001,  type = hit.radiation},
	l02_garbage    = { power = 0.0013, type = hit.radiation},
	l03_agroprom   = { power = 0.0018, type = hit.radiation},
	l04_darkvalley = { power = 0.0018, type = hit.radiation},
	l05_bar        = { power = 0.0023, type = hit.radiation},
	l06_rostok     = { power = 0.0023, type = hit.radiation},
	l08_yantar     = {{power = 0.003,  type = hit.radiation}, {power = 0.0001, type = hit.shock}, },
	l07_military   = {{power = 0.005,  type = hit.radiation}, {power = 0.0005, type = hit.shock}, },
	l10_radar      = {{power = 0.008,  type = hit.radiation}, {power = 0.0007, type = hit.shock}, },
	predbannik     = {{power = 0.01,   type = hit.radiation}, {power = 0.001,  type = hit.shock}, },
	swamp          = {{power = 0.01,   type = hit.radiation}, {power = 0.001,  type = hit.shock}, },
}
-- Нанесение хита актору в смертельной стадии выброса
function hit_actor()
	local hit_data = surge_hit_db[lname]
	if hit_data then
		local psy_hit = hit()
		psy_hit.direction = vector():set(0,0,0)
		psy_hit.impulse = 0
		psy_hit.draftsman = db.actor
		--
		if hit_data.power and hit_data.type then
			psy_hit.power = hit_data.power
			psy_hit.type = hit_data.type
			db.actor:hit(psy_hit)
		else
			for _,hd in ipairs(hit_data) do
				psy_hit.power = hd.power
				psy_hit.type = hd.type
				db.actor:hit(psy_hit)
			end
		end
	end
end

-- Проигрыш странных звуков
local strange_sounds = {
  "ambient\\rnd_outdoor\\rnd_dark4",
  "ambient\\rnd_outdoor\\rnd_moan1",
  "ambient\\rnd_outdoor\\rnd_moan2",
  "ambient\\rnd_outdoor\\rnd_dark6",
}

function play_sounds()
  sound_obj_right.volume = 0.5
  sound_obj_left.volume  = 0.5
  if not sound_obj_left:playing() then
    sound_obj_left = xr_sound.get_safe_sound_object(
      strange_sounds[ math.random( table.getn( strange_sounds ) ) ]
    )
    sound_obj_left:play_at_pos(
      db.actor, vector():set( 1, 0, 1 ), 0, sound_object.s2d
    )
  end
  if not sound_obj_right:playing() then
    sound_obj_right = xr_sound.get_safe_sound_object(
      strange_sounds[ math.random( table.getn( strange_sounds ) ) ]
    )
    if sound_obj_right then
      sound_obj_right:play_at_pos(
        db.actor, vector():set( -1, 0, 1 ), 0, sound_object.s2d
      )
    end
  end
end


class "R_Vibros"
function R_Vibros:__init()
  self.work = 0
end
g_R_Vibros = R_Vibros()

function R_Vibros:construct()
end

function R_Vibros:Run()
  if self.work == 0 then
    xr_sound.set_actor_sound( "level_border_detector" )
    xr_sound.set_actor_sound_factor( 0.01 )
    level.add_cam_effector( "camera_effects\\fatigue.anm", 2004, true, "" )
    self.work = 1
  end
end

function R_Vibros:Stop()
  if self.work == 1 then
    level.remove_cam_effector( 2004 )
    xr_sound.set_actor_sound( "" )
    self.work = 0
  end
end


function get_blowout_count()
  return ogse.load_var( "ogse_surge_mgr.blowout_count", 0 )
end

function pda_off()
	set_pda_params(vector():set(0.5,0.2,0.0))
	if db.actor:dont_has_info("no_net_signal") then return end
	if db.actor:active_slot() == 7 and not (anim and ogsr_actor_animation.allow_animation()) then
		local pda_anm_time = game.play_hud_motion(2, "pda_hud", "anm_empty", true, 1)
		snd_pda_dead:play(db.actor,0,sound_object.s2d)
		ogsr_actor_animation.animation_on()
		dsh.timeout( pda_anim_time, function() ogsr_actor_animation.animation_off() end )
		anim = true
	end
end
