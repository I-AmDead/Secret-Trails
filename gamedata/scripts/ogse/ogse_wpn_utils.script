-- -*- mode: lua; coding: windows-1251-dos -*-
-----------------------------------------------------------------------
--- ogse_wpn_utils.script
--- Модуль функций работы с оружием.
--- Malandrinus, Dusty79 (c) OGS Evolution Team
--- version 0.2 (13/04/2011)
-----------------------------------------------------------------------
-- Функции клиентского объекта:
-- cobj:is_weapon() -- функция определяет, является ли объект оружием.
-- cobj:is_weapon_gl() -- более узкая функция. Определяет, является ли
-- объект оружием с возможностью установки подствольника.
-----------------------------------------------------------------------
-- Получение данных:
-----------------------------------------------------------------------
-- для получения режима подствольника
function get_gl_mode(wpn)
    -- если оружие не типа "ствол с подствольником", то смысла проверять нет.
    ASSERT(wpn:is_weapon_gl(),
        "[ogse_wpn_utils.get_gl_mode] function is only applicable to objects of 'CWeaponMagazinedWGrenade' type!")
    return wpn:get_gl_mode()
end

-- размер магазина активного типа зарядов
function get_active_magazine_size(wpn)
    return wpn:get_magazine_size()
end

-- индекс типа патронов для текущего типа зарядов
function get_active_ammo_type(wpn)
    return wpn:get_ammo_type()
end

-- индекс типа патронов для неактивного типа зарядов
function get_hidden_ammo_type(wpn)
    return wpn:get_underbarrel_ammo_type()
end

-- для получения количества скрытого типа патронов (не размера
-- магазина, а именно реального количества)
function get_ammo_elapsed2(wpn)
    return wpn:get_ammo_in_magazine2()
end

-- Логика проверки установленного аддона такая:
-- если статус == 0, значит аддона нет независимо от флажка,
-- если 1 - значит аддон постоянный и есть независимо от флажка,
-- если 2 - значит аддон съёмный и надо проверить соответствующий флажок.
-- маски аддонов 1 - прицел, 2 - подствольник, 4 - глушитель

-- для получения статуса установленных аддонов
-- прицел
function get_scope_status(wpn)
    return get_u32(wpn:section(), "scope_status")
end

-- глушитель
function get_silencer_status(wpn)
    return get_u32(wpn:section(), "silencer_status")
end

-- подствольник
function get_grenade_launcher_status(wpn)
    return get_u32(wpn:section(), "grenade_launcher_status")
end

-- флаги аддонов
addons_flags = {
    scope = 1,
    gl = 2,
    silencer = 4
}

-- для получения флагов установленных аддонов комплектом
function get_addon_flags(wpn)
    return wpn:get_addon_flags()
end

-- прицел
function get_scope_flag(wpn)
    return bit_and(wpn:get_addon_flags(), addons_flags.scope) ~= 0
end

-- подствольник
function get_grenade_launcher_flag(wpn)
    return bit_and(wpn:get_addon_flags(), addons_flags.gl) ~= 0
end

-- глушитель
function get_silencer_flag(wpn)
    return bit_and(wpn:get_addon_flags(), addons_flags.silencer) ~= 0
end

function add_addon_flags(wpn, flags)
    ASSERT(wpn:is_weapon(), "[add_addon_flags] not weapon object!")
    local old_flags = wpn:get_addon_flags()
    local new_flags = bit_or(old_flags, flags)
    wpn:set_addon_flags(new_flags)
end

-----------------------------------------------------------------------
-- Установка данных:
-----------------------------------------------------------------------

-- размер магазина активного типа зарядов
function set_active_magazine_size(wpn, v)
    wpn:set_magazine_size(v)
end

function get_forced_notex_scope(wpn)
    ASSERT(wpn:is_weapon(), "[get_forced_notex_scope] not weapon object!")
    return bit_and(wpn:get_addon_flags(), 128) ~= 0
end

-- установить/отключить принудительное отключение использования текстуры прицела
function set_forced_notex_scope(wpn, force_no_texture)
    ASSERT(wpn:is_weapon(), "[set_forced_notex_scope] not weapon object!")
    local flags = wpn:get_addon_flags()
    local new_flags = force_no_texture and bit_or(flags, 128) -- ставим флажок
    or bit_and(flags, 127) -- снимаем флаажок
    wpn:set_addon_flags(new_flags)
end

function get_visibility_updates_activated(wpn)
    ASSERT(wpn:is_weapon(), "[get_visibility_updates_activated] not weapon object!")
    return bit_and(wpn:get_addon_flags(), 64) ~= 0
end

function activate_visibility_updates(wpn, activate)
    ASSERT(wpn:is_weapon(), "[activate_visibility_updates] not weapon object!")
    local flags = wpn:get_addon_flags()
    local new_flags = activate and bit_or(flags, 64) -- ставим флажок
    or bit_and(flags, 191) -- снимаем флажок
    wpn:set_addon_flags(new_flags)
end

-- функции получения и установки текущего увеличения для бинокля
function get_binoc_rt_zoom_factor(obj)
    local cls = get_clsid(obj)
    ASSERT(cls == clsid.wpn_binocular or cls == clsid.wpn_binocular_s,
        "[get_binoc_rt_zoom_factor] object is not a binocular class")
    obj:get_binoc_zoom_factor()
end

function set_binoc_rt_zoom_factor(obj, value)
    local cls = get_clsid(obj)
    ASSERT(cls == clsid.wpn_binocular or cls == clsid.wpn_binocular_s,
        "[set_binoc_rt_zoom_factor] object is not a binocular class")
    obj:set_binoc_zoom_factor(value)
end

function set_hud_offset(item, offset)
    item:set_hud_offset(vector():set(unpack(offset)))
end

function set_hud_rotate(item, rot)
    item:set_hud_rotate(vector2():set(unpack(rot)))
end

-- получение состояния прицеливания
function is_aiming_complete(wpn)
    return wpn:get_weapon().zoom_rotation_factor == 1
end

function set_scope_zoom_factor(wpn, factor)
    wpn:get_weapon().scope_zoom_factor = factor
end

function get_condition_shot_dec(wpn)
    return wpn:get_weapon().condition_shot_dec
end

function set_condition_shot_dec(wpn, val)
    wpn:get_weapon().condition_shot_dec = val
end

function get_queue_size(wpn)
    return wpn:get_weapon_m().queue_size
end

function set_time_to_fire(wpn, val) -- 60 / rpm
    wpn:get_weapon().time_to_fire = val
end

function set_fire_dispersion_base(wpn, val)
    wpn:get_weapon().fire_dispersion_base = val
end
