-- -*- mode: lua; coding: windows-1251-dos -*-
-----------------------------------------------------------------------
--- ogse_anomaly_evader.script
--- Модуль обхода аномалий
--- KamikaZze, OGS Evolution Team 2011
--- version 1.3 (20/08/2012)
-----------------------------------------------------------------------
--- Настройки схемы
-----------------------------------------------------------------------

local excluded_npc = {
  [ 29 ] = true,                -- учебная плоть блин
  [ "peshera_plennyi"      ] = true,
}

local invisible_for_anoms = {
  [ "peshera_plennyi"   ] = true,
  [ "sim_stalker_fraer" ] = true,
}

local excluded_sect = {
  "anim_ph_",
}

local monster_excluded_sect = {
  "amk_zone_radioactive_",
}

local excluded_comms = {        -- запретные коммунити
  [ "zombied" ] = true,
}

local excluded_locations = {
}

local monster_excluded_locations = {
  [ "jupiter"        ] = true,
  [ "jupiter_underground" ] = true,
  [ "labx8"          ] = true,
  [ "pripyat"        ] = true,
  [ "zaton"          ] = true,
}

local excluded_by_name = {
  -- Росток, электры в тоннеле
  [ "amk_zone_witches_galantine_180" ] = true,
  [ "rostok_zone_witches_galantine_average" ] = true,
  [ "rostok_zone_witches_galantine_average_0000" ] = true,
}

local added_restrictions = {}
local last_position      = {}


function attach( sm )
  sm:subscribe({ signal = "on_after_blowout",       fun = this.on_after_blowout })
  sm:subscribe({ signal = "on_anomaly_spawn",       fun = this.on_anomaly_spawn })
  sm:subscribe({ signal = "on_anomaly_net_destroy", fun = this.on_anomaly_net_destroy })
  sm:subscribe({ signal = "on_monster_death",       fun = this.on_death   })
  sm:subscribe({ signal = "on_monster_net_destroy", fun = this.on_death   })
  sm:subscribe({ signal = "on_monster_spawn", fun = this.on_monster_spawn })
  sm:subscribe({ signal = "on_monster_update", fun = this.on_monster_update })
  sm:subscribe({ signal = "on_npc_death",           fun = this.on_death   })
  sm:subscribe({ signal = "on_npc_net_destroy",     fun = this.on_death   })
  sm:subscribe({ signal = "on_npc_spawn",     fun = this.on_npc_spawn     })
  sm:subscribe({ signal = "on_npc_update",    fun = this.on_monster_update })
  sm:subscribe({ signal = "on_spawn", fun = this.on_spawn })
  sm:subscribe({ signal = "on_save",  fun = this.on_save  })
end


function on_monster_spawn( obj, binder )
  added_restrictions[ obj:id() ] = nil
  last_position[ obj:id()      ] = nil
  if
    ( not obj:alive() )
    or get_bool( obj:section(), "ogse_anomaly_evader.disable", false )
  then
    return
  end
  local s = {}
  if obj:clsid() == clsid.burer_s then
    -- только бюреры замечены в подвисаниях, т.ч. имеет смысл следить
    -- только за ними
    table.insert( s, {
      [ "signal" ] = "on_update",
      [ "self"   ] = obj,
      [ "fun"    ] = this.check_deadlock,
      [ "script_name" ] = "ogse_anomaly_evader.check_deadlock",
    })
  end
  local all_anoms, process = false, true
  if get_bool( obj:section(), "ogse_anomaly_evader.all_anoms", false ) then
    all_anoms = true
    binder[ "ogse_anomaly_evader.all_anoms" ] = true
  end
  if not all_anoms then
    if
      excluded_npc[ obj:story_id() ]
      or excluded_locations[ level.name() ]
      or monster_excluded_locations[ level.name() ]
    then
      process = false
    end
  end
  if process and not battle.is_battle_spawned( obj ) then
    table.insert( s, {
      [ "signal" ] = "on_update",
      [ "self"   ] = obj,
      [ "fun"    ] = this.update_norm,
      [ "script_name" ] = "ogse_anomaly_evader.update_norm",
    })
  end
  if table.getn( s ) > 0 then
    binder[ "ogse_anomaly_evader.subscribed" ] = s
    local sm = ogse_signals.get_mgr()
    for _, sig in ipairs( s ) do
      sm:subscribe( sig )
    end
  end
end


function on_npc_spawn( obj, binder )
  added_restrictions[ obj:id() ] = nil
  last_position[ obj:id()      ] = nil
  if not obj:alive() then return end
  local all_anoms = false
  if
    invisible_for_anoms[ obj:name() ]
    and get_bool( obj:section(), "ogse_anomaly_evader.all_anoms", false )
  then
    all_anoms = true
    binder[ "ogse_anomaly_evader.all_anoms" ] = true
  end
  if not all_anoms then
    if
      excluded_npc[ obj:profile_name() ]
      or excluded_npc[ obj:name() ]
      or excluded_npc[ obj:story_id() ]
      or excluded_comms[ obj:character_community() ]
      or excluded_locations[ level.name() ]
    then
      return
    end
  end
  if all_anoms or obj:relation( db.actor ) ~= game_object.enemy then
    set_anomaly_invisibility( obj, true )
    binder[ "ogse_anomaly_evader.anomaly_invisibility" ] = true
  end
  local s = {
    {
      [ "signal" ] = "on_update",
      [ "self"   ] = obj,
      [ "fun"    ] = this.update_norm,
      [ "script_name" ] = "ogse_anomaly_evader.update_norm",
    },
  }
  binder[ "ogse_anomaly_evader.subscribed" ] = s
  local sm = ogse_signals.get_mgr()
  for _, sig in ipairs( s ) do
    sm:subscribe( sig )
  end
end


function on_death( obj )
  local binder     = obj:binded_object()
  local subscribed = binder[ "ogse_anomaly_evader.subscribed" ]
  if subscribed then
    local sm = ogse_signals.get_mgr()
    for _, sig in ipairs( subscribed ) do
      sm:unsubscribe( sig )
    end
    binder[ "ogse_anomaly_evader.subscribed" ] = nil
  end
  -- cleanup( obj )
  added_restrictions[ obj:id() ] = nil
  last_position[ obj:id() ]      = nil
  if binder[ "ogse_anomaly_evader.anomaly_invisibility" ] then
    set_anomaly_invisibility( obj, false )
    binder[ "ogse_anomaly_evader.anomaly_invisibility" ] = nil
  end
end


function remove_restriction( npc, anomid )
  local sobj = alife():object( anomid )
  for npc_id, anoms in pairs( added_restrictions ) do
    local npc_obj = level.object_by_id( npc_id )
    if npc_obj and anoms[ anomid ] then
      anoms[ anomid ] = nil
      npc_obj:remove_restrictions( "", sobj:name() )
    end
  end
  alife():release( sobj )
end


function cleanup( obj )
  local nid   = obj:id()
  local anoms = added_restrictions[ nid ]
  if anoms then
    local restrs = {}
    for k, v in pairs( anoms ) do
      local sobj = alife():object( k )
      if sobj then
        table.insert( restrs, sobj:name() )
      end
    end
    if table.getn( restrs ) > 0 then
      local s = table.concat( restrs, "," )
      ASSERT( s:len() < 3072, "too long: %s", s:len() )
      obj:remove_restrictions( "", s )
    end
    added_restrictions[ nid ] = nil
    last_position[ nid ]      = nil
  end
end


function on_monster_update( obj )
  local binder = obj:binded_object()
  binder[ "ogse_anomaly_evader.last_monster_update" ] = time_global() + 10000
end


function check_deadlock( obj )
  ogse_signals.get_mgr():reschedule( 1000 )
  local binder = obj:binded_object()
  local t = binder[ "ogse_anomaly_evader.last_monster_update" ]
  if not t then return end
  local d = t - time_global()
  if d > 0 then
    if d > 1000 then
      ogse_signals.get_mgr():reschedule( d )
    end
  else
    log2(
      "[%s]: bad mob '%s' detected: %s secs",
      script_name(), obj:name(), d / 1000
    )
    on_death( obj )
    amkii_equip.refit_npc( obj, obj:id() )
  end
end


-- как часто выполнять обход аномалий (в мс) и в каком радиусе
-- запоминать аномалии.
local freq, detect_radius = 1000, 50
local is_blowout = false

function update_norm( obj )
  ogse_signals.get_mgr():reschedule( freq + math.random( freq ) )
  local binder = obj:binded_object()
  if is_blowout then return end
  local curr_pos = obj:position()
  local prev_pos = last_position[ obj:id() ]
  if prev_pos then
    if prev_pos:distance_to( curr_pos ) < detect_radius / 2 then
      return
    else
      last_position[ obj:id() ] = curr_pos
    end
  else
    last_position[ obj:id() ] = curr_pos
  end

  if not added_restrictions[ obj:id() ] then
    added_restrictions[ obj:id() ] = {}
  end

  local restr = {}
  for _, o in ipairs( amk_anoms.get_anomaly_list( obj, detect_radius ) ) do
    local sobj = alife():object( o.id )
    if sobj then
      local sect_anom = sobj:section_name()
      local ignore    = ( excluded_by_name[ sobj:name() ] ~= nil )
      if not ignore then
        for _, k in ipairs( excluded_sect ) do
          if string.find( sect_anom, k, 1, true ) then
            ignore = true
            break
          end
        end
      end
      if obj:is_monster() and not ignore then
        for _, k in ipairs( monster_excluded_sect ) do
          if string.find( sect_anom, k, 1, true ) then
            ignore = true
            break
          end
        end
      end
      if not ignore then
        restr[ sobj:name() ] = true
      end
    end
  end

  local del = {}
  for k, _ in pairs( added_restrictions[ obj:id() ] ) do
    if restr[ k ] then
      restr[ k ] = nil -- уже установлен
    else
      table.insert( del, k ) -- удалить старый
    end
  end
  if table.getn( del ) > 0 then
    for _, k in ipairs( del ) do
      added_restrictions[ obj:id() ][ k ] = nil
    end
    local s = table.concat( del, "," )
    ASSERT( s:len() < 3072, "too long: %s", s:len() )
    obj:remove_restrictions( "", s )
  end

  local add = {}
  for k, _ in pairs( restr ) do
    if not should_npc_miss_this_anomaly( obj, binder ) then
      table.insert( add, k )
    end
  end
  if table.getn( add ) > 0 then
    local s = table.concat( add, "," )
    if obj:in_restrictions():len() + 1 + s:len() < 3072 then
      obj:add_restrictions( "", s )
      for _, k in ipairs( add ) do
        added_restrictions[ obj:id() ][ k ] = true
      end
    else
      log2(
        "[%s]: %s: in_restrictions is too long: %s, %s",
        script_name(), obj:name(), obj:in_restrictions():len(), s:len()
       )
      log2(
        "[%s]: %s: in_restrictions() = %s",
        script_name(), obj:name(), obj:in_restrictions()
       )
      log2(
        "[%s]: change detect radius: %s -> %s",
        script_name(), detect_radius, detect_radius * 0.75
       )
       detect_radius = detect_radius * 0.75
      log2(
        "[%s]: change detect freq:   %s -> %s",
        script_name(), freq, freq * 0.75
       )
       freq = freq * 0.75
       ogse_signals.get_mgr():reschedule( 200 )
    end
  end
end


local monster_miss_cnt = 0
function should_npc_miss_this_anomaly( npc, binder )
  local miss_this_anomaly = false
  if IsMonster( npc ) and not binder[ "ogse_anomaly_evader.all_anoms" ] then
    if monster_miss_cnt == 0 then
      miss_this_anomaly = true
      monster_miss_cnt  = init_monster_miss_cnt()
    else
      monster_miss_cnt = monster_miss_cnt - 1
    end
  end
  return miss_this_anomaly
end


function init_monster_miss_cnt() return 8 end


local known_anomaly = {}
function remember_generated_anomalies()
  known_anomaly = {}
  for id, _ in pairs( amk_anoms.anom_list ) do
    known_anomaly[ id ] = true
  end
end


function on_spawn()
  monster_miss_cnt = ogse.load_var(
    "ogse_anomaly_evader.monster_miss_cnt", init_monster_miss_cnt()
  )
  remember_generated_anomalies()
end


function on_save()
  ogse.save_var(
    "ogse_anomaly_evader.monster_miss_cnt", monster_miss_cnt, "u8"
  )
end


function pre_blow_off()
  is_blowout = true
  for id, _ in pairs( added_restrictions ) do
    local obj = level.object_by_id( id )
    if obj then
      cleanup( obj )
    end
  end
end


function on_after_blowout()
  is_blowout    = false
  last_position = {}
  remember_generated_anomalies()
end


function on_anomaly_spawn( obj, binder )
  if known_anomaly[ obj:id() ] then return end
  local sect = obj:section()
  for _, k in ipairs( excluded_sect ) do
    if string.find( sect, k, 1, true ) then return end
  end
  known_anomaly[ obj:id() ] = true
  local pos    = obj:position()
  local radius = amk_anoms.anom_list[ obj:id() ].radius
  local recalc = {}
  for id, _ in pairs( last_position ) do
    local npc = level.object_by_id( id )
    if npc then
      local ignore = false
      if npc:is_monster() then
        for _, k in ipairs( monster_excluded_sect ) do
          if string.find( sect, k, 1, true ) then
            ignore = true
            break
          end
        end
      end
      if
        ( not ignore )
        and npc:position():distance_to( pos ) - radius < detect_radius
      then
        table.insert( recalc, id )
      end
    end
  end
  for _, id in ipairs( recalc ) do
    last_position[ id ] = nil
  end
end


function on_anomaly_net_destroy( obj, binder )
  known_anomaly[ obj:id() ] = nil
end


function get_freq()
  return freq
end
