-- -*- mode: lua; coding: windows-1251-dos -*-
--/ ogse_night_vision.script /--
--/ Nightvision module /--
--/ OGS Evolution Team 2010 /--
--/ version 2.5 (27/04/2011)/--

--/ Модуль приборов ночного видения /--

function attach(sm)
  sm:subscribe({ signal = "on_destroy",      fun = this.on_destroy      })
  sm:subscribe({ signal = "on_load",         fun = this.on_game_load    })
  sm:subscribe({ signal = "on_scope_zoom",   fun = this.on_scope_zoom   })
  sm:subscribe({ signal = "on_sniper_mode",  fun = this.on_sniper_mode  })
  sm:subscribe({ signal = "on_spawn",        fun = this.on_spawn        })
  sm:subscribe({ signal = "on_drop",         fun = this.chek_drop_pnv   })
end


-- флаг защиты от ошибочного включения (общий)
local night_vision_fx_store = false
-- флаг защиты от ошибочного включения (в окнах интерфейса)
local night_vision_fx_not_inventory = true
-- флаг защиты от ошибочного включения (в режиме прицеливания)
local night_vision_fx_not_sniper = true
-- флаг защиты от ошибочного включения (при работе с багажником транспорта)
local night_vision_fx_not_trunk = true
-- флаг работающего ПНВ
local night_vision_fx_on = false
-- флаг автовключения ночного режима в оптическом прицеле (true)
local nv_scope_fx_autoenable = false
-- флаг работающего ночного режима в оптическом прицеле
local night_vision_scope_fx_on = false
-- флаг работающего ночного режима в бинокле
local night_vision_binocular_fx_on = false

-- флаг наложения эффекта визуального шума
local night_vision_noise_fx_on = false
-- интенсивность налагаемого эффекта визуального шума (0-255)
local night_vision_noise_fx_intensity = 200

-- звук включения ПНВ
local snd_nv_start = xr_sound.get_safe_sound_object( "interface\\nv_start" )
-- звук работающего ПНВ
local snd_nv_work -- = xr_sound.get_safe_sound_object( "interface\\nv_loop" )
-- звук выключения ПНВ
local snd_nv_stop = xr_sound.get_safe_sound_object( "interface\\nv_off" )
-- уровень громкости звуков
local snd_nv_fx_volume       = 0.5 -- общий уровень громкости звуков
local snd_nv_start_subvolume = 1   -- громкость звука включения ПНВ
local snd_nv_work_subvolume  = 0.3 -- громкость звука работающего ПНВ
local snd_nv_stop_subvolume  = 1   -- громкость звука выключения ПНВ

-- уровень интенсивности постэффектов
-- уровень интенсивности постэффекта ПНВ
local nv_ppe_factor = 1.0 --0.8
-- уровень интенсивности постэффекта ночного режима прицела
local nv_scope_ppe_factor = 1.0 --0.7
-- уровень интенсивности постэффекта ночного режима бинокля
local nv_binocular_ppe_factor = 0.8

local debug = false

function on_spawn()
  if debug then
    for _, k in ipairs({
      "r_pnv_color",
      "r_pnv_mode",
      "r_pnv_noise",
      "r_pnv_scanlines",
    }) do
      get_console():disable_command( k )
    end
  end
  cmd( "r_pnv_mode 0" )
  dsh.exec_on_update( this.on_first_update )
  nv_scope_fx_autoenable = ogse.load_var_safe(
    "ogse_night_vision.nv_scope_fx_autoenable", false
  )
end

-- Вызов вкл/выкл ПНВ из коллбэка нажатия клавиши
function call_pnv()
  quicklaunch_nv_call()
  quicklaunch_nv_scope_call()
  quicklaunch_nv_binocular_call()
end

-- Включение/выключение ПНВ из меню быстрого доступа
function quicklaunch_nv_call()
  if not night_vision_fx_on then
    nv_fx( true  )
  else
    nv_fx( false )
  end
end


-- Попытаемся восстановить работу ПНВ после загрузки сейва
function try_to_restart_nv_fx()
  local nv_fx_restore = ogse.load_var_safe( "pnv", false )
  if nv_fx_restore then
    if db.actor:alive() and not night_vision_fx_on then
      nv_fx( true )
    end
  end
end


-- Режим прицеливания через оптику
local switch_1 = false
local switch_2 = true

function on_sniper_mode( mode )
  if mode == nil then return end
  if mode == true then
    night_vision_fx_not_sniper = false
    switch_2 = true
    if nv_scope_fx_autoenable and not switch_1 then
      -- врубаем ночной прицел, если задано автовключение
      nv_scope_fx( true )
      switch_1 = true
    end
  elseif mode == false then
    if switch_2 then
      nv_scope_fx( false )      -- вырубаем ночной прицел
      switch_1 = false
      nv_binocular_fx( false )  -- вырубаем ночной бинокль
      night_vision_fx_not_sniper = true
      switch_2 = false
    end
  end
end


function on_scope_zoom( sect, mode )
  if mode then
    night_vision_fx_not_sniper = false
    if can_light_sights( sect ) then
      if nv_scope_fx_autoenable then
        nv_scope_fx( true )
      end
    else
      turn_off_scope_sights_lighting()
    end
  else
    night_vision_fx_not_sniper = true
    night_vision_scope_fx_on   = false
  end
end


-- Для проверки работы ПНВ из других скриптов
function is_nv_working()
  if
    night_vision_fx_on
    or night_vision_scope_fx_on
    or night_vision_binocular_fx_on
  then
    return true
  else
    return false
  end
end


-- Античит выкладывания работающего ПНВ в окнах, которые не удаётся
-- отловить штатно
function chek_drop_pnv(obj)
  if not obj then return end
  local s_obj = alife():object( obj:id() )
  if not s_obj then return end
  local obj_sec        = s_obj:section_name()
  local outfit_slot    = db.actor:item_in_slot( 6 )
  local outfit_slot_nv = outfit_slot
    and sys_ini:line_exist( outfit_slot:section(), "nightvision_sect" )
  local pnv_slot       =  db.actor:item_in_slot( 11 )
  local pnv_slot_nv    = pnv_slot
    and sys_ini:line_exist( pnv_slot:section(), "nightvision_sect" )
  if not outfit_slot_nv and not pnv_slot_nv then
    if night_vision_fx_on then
      turn_off_nv_fx( obj_sec )
      set_active_nv()
    end
  end
end


-- Проверка "двойного" надевания ПНВ при смене костюма
function chek_outfit_double_pnv( obj )
  if not obj then return end
  local nv_slot        = db.actor:item_in_slot( 11 )
  local is_nv_obj      = sys_ini:line_exist( obj:section(), "nightvision_sect" )
  local outfit_slot    = db.actor:item_in_slot(6)
  local outfit_slot_nv = outfit_slot
    and sys_ini:line_exist( outfit_slot:section(), "nightvision_sect" )
  local is_outfit_nv   = obj:is_outfit() and is_nv_obj
  if is_outfit_nv then
    if nv_slot then
      ogse.spawn_item_in_inv( nv_slot:section() )
      ogse.remove_item( nv_slot )
    end
    if night_vision_fx_on then
      turn_off_nv_fx( nv_slot:section() )
      set_active_nv()
    end
  elseif is_nv_obj then
    if outfit_slot_nv then
      ogse.spawn_item_in_inv( obj:section() )
      ogse.remove_item( obj )
    end
  end
end

-- "Горячий" рестарт ПНВ
function reset_pnv()
  standby_nv_fx( true  )
  standby_nv_fx( false )
end

-- "Ждущий режим" ПНВ для окон с отображающимся инвентарём, которые
-- можно "отловить" штатно, режима прицеливания и для "горячего"
-- рестарта
function standby_nv_fx( mode )
  if mode == nil then return end
  if mode == true then
    if night_vision_fx_on == true then
      night_vision_fx_store = true
      nv_fx( false )
    end
  elseif
    mode == false
    and ( not night_vision_fx_on )
    and night_vision_fx_not_inventory
    and night_vision_fx_not_sniper
    and night_vision_fx_not_trunk
  then
    if night_vision_fx_store == true then
      night_vision_fx_store = false
      nv_fx( true )
    end
  end
end


-- Старт/остановка работы ПНВ
local active_nv_device

function nv_fx( mode )
  if
    mode == true
    and ( not night_vision_fx_on )
    and night_vision_fx_not_inventory
    and night_vision_fx_not_sniper
    and night_vision_fx_not_trunk
  then
    local nightvision_section, nv_item
    local nv_in_outfit = db.actor:item_in_slot( 6 )
    if nv_in_outfit and not nightvision_section then
      local nv_sect = nv_in_outfit:section()
      if sys_ini:line_exist( nv_sect, "nightvision_sect" ) then
        nightvision_section = sys_ini:r_string( nv_sect, "nightvision_sect" )
        nv_item = nv_in_outfit
      end
    end
    if not nightvision_section then
      local nv_in_slot = db.actor:item_in_slot( 11 )
      if nv_in_slot then
        local nv_sect = nv_in_slot:section()
        if sys_ini:line_exist( nv_sect, "nightvision_sect" ) then
          nightvision_section = sys_ini:r_string( nv_sect, "nightvision_sect" )
          nv_item = nv_in_slot
        end
      end
    end
    if
      nightvision_section
    then
      turn_on_nv_fx( nightvision_section, nv_item )
      set_active_nv( nv_item )
    end
  elseif
    mode == false and night_vision_fx_on and night_vision_fx_not_sniper
  then
    turn_off_nv_fx()
    set_active_nv()
  end
end


-- Старт ПНВ (не использовать напрямую)
function turn_on_nv_fx( nightvision_section, nv_item )
  if not is_nv_working() then
    local nv_sect = nv_item:section()
    local r_pnv_mode = get_u32( nv_sect, "r_pnv_mode", 0 )
    if r_pnv_mode > 0 then
      local color = get_vector( nv_sect, "r_pnv_color" )
      cmd(
        "r_pnv_color",
        string.format( "%f,%f,%f", color.x, color.y, color.z )
      )
      cmd( "r_pnv_noise", get_float( nv_sect, "r_pnv_noise" ) )
      cmd( "r_pnv_scanlines", get_float( nv_sect, "r_pnv_scanlines" ) )
      cmd( "r_pnv_mode", r_pnv_mode )
    end
    night_vision_fx_on = true
    snd_fx_start()
  end
end


-- Остановка ПНВ (не использовать напрямую)
function turn_off_nv_fx( section )
  if is_nv_working() then
    -- local nv = db.actor:item_in_slot( 11 )
    cmd( "r_pnv_mode", 0 )
    level.remove_pp_effector( 2997 )
    night_vision_fx_on = false
    snd_fx_stop()
  end
end


-- Перемещение ПНВ в рюкзак
function nv_to_ruck( section )
  if night_vision_fx_on == true then
    turn_off_nv_fx( section )
    set_active_nv()
  end
end


-- Старт звукового сопровождения работы ПНВ (не использовать напрямую)
function snd_fx_start()
  if snd_nv_start then
    snd_nv_start:play_at_pos(
      db.actor, vector():set( 0, 0, 0 ), 0, sound_object.s2d
    )
    snd_nv_start.volume = snd_nv_fx_volume * snd_nv_start_subvolume
  end
  if snd_nv_work then
    snd_nv_work:play_at_pos(
      db.actor, vector():set( 0, 0, 0 ), 0,
      sound_object.s2d + sound_object.looped
    )
    snd_nv_work.volume = snd_nv_fx_volume * snd_nv_work_subvolume
  end
end


-- Остановка звукового сопровождения работы ПНВ (не использовать напрямую)
function snd_fx_stop()
  if snd_nv_start:playing() then
    snd_nv_start:stop()
  end
  if snd_nv_work and snd_nv_work:playing() then
    snd_nv_work:stop()
  end
  if snd_nv_stop then
    snd_nv_stop:play_at_pos(
      db.actor, vector():set( 0, 0, 0 ), 0, sound_object.s2d
    )
    snd_nv_stop.volume = snd_nv_fx_volume * snd_nv_stop_subvolume
  end
end


-- Включение/выключение ПНВ прицела из меню быстрого доступа
function quicklaunch_nv_scope_call()
  if not night_vision_scope_fx_on then
    nv_scope_fx( true )
  else
    nv_scope_fx( false )
    nv_scope_fx_autoenable = false
  end
  ogse.save_var(
    "ogse_night_vision.nv_scope_fx_autoenable", nv_scope_fx_autoenable
  )
end


-- Старт/остановка работы ПНВ в прицеле
local active_nv_scope_device

function nv_scope_fx( mode )
  if
    mode == true
    and ( not night_vision_scope_fx_on )
    and ( not night_vision_fx_not_sniper )
  then
    local act_it = db.actor:active_item()
    if act_it and act_it:is_weapon() then
      local scope_section = get_active_scope_section( act_it )
      if scope_section then
        -- k01jan (подсветка прицельных сеток)
        local scope_sights_lighting = get_string(
          scope_section, "scope_sights_lighting"
        )
        if scope_sights_lighting then
          turn_on_scope_sights_lighting(
            scope_section, scope_sights_lighting
          )
          nv_scope_fx_autoenable = true
        end
        -- EOF k01jan
        local nightvision_section = get_string(
          scope_section, "nightvision_sect"
        )
        if nightvision_section and dsh_acumm.has_power() > 0 then
          turn_on_nv_scope_fx( nightvision_section )
          nv_scope_fx_autoenable = true
          active_nv_scope_device = act_it
        end
      end
    end
  elseif mode == false and night_vision_scope_fx_on then
    turn_off_nv_scope_fx()
    turn_off_scope_sights_lighting()
    active_nv_scope_device = nil
  end
end


-- Старт ночника в прицеле (не использовать напрямую)
local night_vision_scope_fx_eff = false

function turn_on_nv_scope_fx( nightvision_section )
  local nightvision_fx = get_string( nightvision_section, "pp_eff_name" )
  if nightvision_fx then
    standby_nv_fx( true )
    level.add_pp_effector( nightvision_fx, 2998, true )
    level.set_pp_effector_factor( 2998, nv_scope_ppe_factor )
    night_vision_scope_fx_on  = true
    night_vision_scope_fx_eff = true
  end
end

-- Остановка ночника в прицеле (не использовать напрямую)
function turn_off_nv_scope_fx()
  if night_vision_scope_fx_eff then
    level.add_pp_effector( "nv_off.ppe", 2998, false )
    night_vision_scope_fx_eff = false
  end
  night_vision_scope_fx_on = false
  standby_nv_fx( false )
end


-- Включение/выключение ПНВ бинокля из меню быстрого доступа
function quicklaunch_nv_binocular_call()
  if not night_vision_binocular_fx_on then
    nv_binocular_fx( true  )
  else
    nv_binocular_fx( false )
  end
end

-- Старт/остановка работы ПНВ в бинокле
function nv_binocular_fx( mode )
  if
    mode == true
    and ( not night_vision_binocular_fx_on )
    and ( not night_vision_fx_not_sniper )
  then
    local act_it = db.actor:active_item()
    if act_it and act_it:is_binoculars() then
      local nightvision_section = get_string(
        act_it:section(), "nightvision_sect"
      )
      if nightvision_section and dsh_acumm.has_power() > 0 then
        turn_on_nv_binocular_fx( nightvision_section )
      end
    end
  elseif mode == false and night_vision_binocular_fx_on then
    turn_off_nv_binocular_fx()
  end
end


-- Старт ночника в бинокле (не использовать напрямую)
function turn_on_nv_binocular_fx( nightvision_section )
  local nightvision_fx = get_string( nightvision_section, "pp_eff_name" )
  if nightvision_fx then
    level.add_pp_effector( nightvision_fx, 2999, true )
    level.set_pp_effector_factor( 2999, nv_binocular_ppe_factor )
    night_vision_binocular_fx_on = true
  end
end


-- Остановка ночника в бинокле (не использовать напрямую)
function turn_off_nv_binocular_fx()
  level.add_pp_effector( "nv_off.ppe", 2999, false )
  night_vision_binocular_fx_on = false
end


function get_active_nv_device()
  if night_vision_scope_fx_on then
    return active_nv_scope_device
  elseif night_vision_fx_on then
    return active_nv_device
  end
  return nil
end


function on_destroy()
  cmd( "r_pnv_mode 0" )
  turn_off_scope_sights_lighting()
  get_grids():reset()
end


local GRIDS
function get_grids()
  if not GRIDS then
    GRIDS = grid_static()
  end
  return GRIDS
end


function on_game_load()
  if GRIDS then
    GRIDS:reset()
    GRIDS:update_rects()
  else
    GRIDS = grid_static()
  end
end


function on_main_menu()
  get_grids():update_rects()
end


class "grid_static" ( CUIScriptWnd )
function grid_static:__init() super()
  self.xml = CScriptXmlInit()
  self.xml:ParseFile( "ui_scope_grids.xml" )
  self:Init( 0, 0, 1024, 768 )
  self.initialized = false
  self.statics     = {}
end


function grid_static:reset()
  if self.initialized then
    get_hud():RemoveDialogToRender( self )
    self.initialized = false
  end
end


function grid_static:add_to_render()
  if not self.initialized then
    get_hud():AddDialogToRender( self )
    self.initialized = true
  end
end


function grid_static:update_rects()
  local dev    = device()
  local ratio  = dev.width / dev.height
  local width  = math.floor( 1024 * 1.6 / ratio )
  local offset = math.ceil( ( 1024 - width ) / 2 )
  for k, st in pairs( self.statics ) do
    st:SetWndRect( offset, 0, width, 768 )
    st:Show( false )
    st:SetStretchTexture( true )
  end
end


function grid_static:is_active()
  for k, st in pairs( self.statics ) do
    if st:IsShown() then return true end
  end
  return false
end


function grid_static:show_static( static, status )
  local st = self.statics[ static ]
  if not st then
    st = self.xml:InitStatic( static, self )
    self.statics[ static ] = st
    self:update_rects()
  end
  st:Show( true )
  if status then
    self:add_to_render()
  end
end


function grid_static:hide_static( static )
  if not static then
    for k, st in pairs( self.statics ) do
      if st:IsShown() then
        static = k
        break
      end
    end
  end
  if not static then return end
  local st = self.statics[ static ]
  if st and st:IsShown() then
    st:Show( false )
    self:reset()
  end
end


function can_light_sights( sect )
  return true
--[=[
  if
    get_bool( sect, "ogse_night_vision.acog_tritium", false )
    or dsh_acumm.has_power() > 0
  then
    return true
  end
  return false
--]=]
end


local replaced_textures = {}

function turn_on_scope_sights_lighting( scope_sect, texture )
  if not can_light_sights( scope_sect ) then return end
  night_vision_scope_fx_on = true
  if
    get_bool( scope_sect, "ignore_scope_texture", false )
    or not get_string( scope_sect, "scope_texture" )
  then
    local t = parse_names( texture )
    for i = 1, table.getn( t ), 2 do
      local tex1, tex2 = t[ i ], t[ i + 1 ]
      if not replaced_textures[ tex1 ] then
        local textures   = texture_find( tex1 )
        local texture    = textures[ tex1 ]
        texture:load( tex2 )
        replaced_textures[ tex1 ] = texture
      end
    end
  else
    get_grids():show_static( texture, true )
    ogse_signals.get_mgr():call( "on_scope_sights_lighting" )
  end
end


function turn_off_scope_sights_lighting()
  for name, texture in pairs( replaced_textures ) do
    texture:load( name )
    replaced_textures[ name ] = nil
  end
  get_grids():hide_static()
  night_vision_scope_fx_on = false
end


function get_active_scope_section( wpn )
	if not wpn then wpn = db.actor:active_item() end
  if not wpn then return end
  if     ogse_wpn_utils.get_scope_status( wpn ) == 1 then
    return wpn:section()
  elseif ogse_wpn_utils.get_scope_status( wpn ) == 2 then
	local scope_status = ogse_wpn_utils.get_scope_flag( wpn )
	if scope_status then
		local sect       = wpn:section()
      if get_bool( sect, "ignore_scope_texture", false ) then
        return sect
      end
      local scope_sect = get_string_wq( sect, "scope_name" )
		if scope_sect then return scope_sect end
	end
end
end


local scope_colored = false

function turn_on_scope_color()
  if scope_colored then return end
  local scope_sect = get_active_scope_section()
  if scope_sect then
    if night_vision_scope_fx_on == false then -- ночной режим не включен
      local scope_color = get_string(
        scope_sect, "scope_color_sect", "0,0,0,0"
      )
      cmd( "r2_color_grading", scope_color )
    end
  end
  scope_colored = true
end


function turn_off_scope_color()
  if scope_colored then
    cmd( "r2_color_grading", "0,0,0,0" )
    scope_colored = false
  end
end


function on_first_update()
  local sm = ogse_signals.get_mgr()
  sm:subscribe({ signal = "on_item_to_ruck", fun = this.chek_drop_pnv })
  sm:subscribe({ signal = "on_item_to_slot", fun = this.chek_outfit_double_pnv })
  try_to_restart_nv_fx()
end

function set_active_nv( obj )
  if obj then
    ogse.save_var( "pnv", true )
  else
    ogse.delete_var( "pnv" )
  end
  active_nv_device = obj
end