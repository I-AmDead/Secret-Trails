
--[[
ОПИСАНИЕ ФУНКЦИЙ

-- Выводит отладочное сообщение в лог, если скрипт активен (активный скрипт выбирается с помощью
-- переменной debug_info.trace_script). 
function trace(script_name, fmt, ...)

-- Переводит переменную любого типа (включая nil) в строку. Используется для отладочного вывода информации.
function to_str(what)

-- Создает и возвращает копию вектора
function vector_copy_by_val(vec)

-- Настройка параметров игровых объектов:
function cfg_get_bool(char_ini, section, field, object, mandatory, default_val)
function cfg_get_string(char_ini, section, field, object, mandatory, gulag_name, default_val)
function cfg_get_number(char_ini, section, field, object, mandatory, default_val)

-- Проверяет, находится ли stalker рядом с точкой path_point пути patrol_path
function stalker_at_waypoint(stalker, patrol_path, path_point)

-- Послать stalker в заданную точку patrol_path(path_point)
function stalker_go_to_waypoint(stalker, patrol_path, path_point)

--]] ----------------------------------------------------------------------------------------------------

-- Выводит отладочное сообщение в лог, если скрипт активен (активный скрипт выбирается с помощью
-- переменной debug_info.trace_script). 
-- function trace(script_name, fmt, ...)
--	if debug_info.trace_script == script_name then
--		log(string.format("[TRACE] " .. script_name .. ".script: " .. fmt, unpack(arg)))
--	end
-- end
-- Переводит переменную любого типа (включая nil) в строку. Используется для отладочного вывода информации.

function to_str(what)
    if what == nil then
        return "<nil>"
    elseif type(what) == "userdata" then
        return "userdata"
    else
        return tostring(what)
    end
end

-- ' Сравнивает два вектора
function vector_cmp(a, b)
    return a.x == b.x and a.y == b.y and a.z == b.z
end

-- ' Сравнивает два вектора с заданной погрешностью
function vector_cmp_prec(a, b, d)
    return math.abs(a.x - b.x) <= d and math.abs(a.y - b.y) <= d and math.abs(a.z - b.z) <= d
end

-- Создает и возвращает копию вектора
function vector_copy_by_val(vec)
    return vector():set(vec)
end

-- Настройка параметра типа bool у игрового объекта.
-- 
-- char_ini - указатель на customdata (обычно object:spawn_ini())
-- section - имя секции в customdata
-- field - имя поля в customdata
-- object - игровой объект, от которого будет взято имя для сообщения об ошибке
-- mandatory - поле обязательно должно быть задано
--
-- Возвращает true или false
function cfg_get_bool(char_ini, section, field, object, mandatory, default_val)
    if mandatory == nil then
        abort("section '%s': wrong arguments order in call to cfg_get_bool", section)
    end
    if not char_ini then
        return default_val
    end

    if section and char_ini:section_exist(section) and char_ini:line_exist(section, field) then
        local ret = char_ini:r_bool(section, field)
        return ret
    end
    if not mandatory then
        if default_val then
            if default_val ~= false and default_val ~= true then
                abort("object '%s': section '%s': field '%s': default value is " .. "not boolean", object:name(),
                    section, field)
            end
            return default_val
        end
        return false
    end
    abort("object '%s': attempt to read a non-existant boolean field '%s' in " .. "section '%s'", object:name(), field,
        section)
end

function cfg_get_string(char_ini, section, field, object, mandatory, gulag_name, default_val)
    if mandatory == nil or gulag_name == nil then
        abort("section '%s': wrong arguments order in call to cfg_get_string", section)
    end

    if not char_ini then
        return default_val
    end

    if section and char_ini:section_exist(section) and char_ini:line_exist(section, field) then
        if gulag_name and gulag_name ~= "" then
            return gulag_name .. "_" .. char_ini:r_string(section, field)
        else
            return char_ini:r_string(section, field)
        end
    end
    if not mandatory then
        return default_val
    end
    local err = "object name '" .. object:name() .. "': attempt to read a non-existant string field '" .. field ..
                    "' in section '" .. section .. "'";
    abort("%s", err)
end

function cfg_get_number(char_ini, section, field, object, mandatory, default_val)
    if mandatory == nil then
        abort("section '%s': wrong arguments order in call to cfg_get_number", section)
    end

    if not char_ini then
        return default_val
    end

    if section and char_ini:section_exist(section) and char_ini:line_exist(section, field) then
        return char_ini:r_float(section, field)
    end
    if not mandatory then
        return default_val
    end
    -- local err = "object name '" .. object:name() .. "': attempt to read a non-existant numeric field '" ..
    --	field .. "' in section '" .. section .. "'";
    -- abort("%s", err)
end

function mob_get_string(char_ini, section, field, override, object, mandatory, default_val)
    if override ~= nil then
        return override
    end

    if not char_ini then
        return false
    end

    return cfg_get_string(char_ini, section, field, object, mandatory, "", default_val)
end

function mob_get_number(char_ini, section, field, override, object, mandatory, default_val)
    if override ~= nil then
        return override
    end

    if not char_ini then
        return false
    end

    return cfg_get_number(char_ini, section, field, object, mandatory, default_val)
end

function mob_get_bool(char_ini, section, field, override, object, mandatory, default_val)
    if override ~= nil then
        return override ~= false
    end

    if not char_ini then
        return true
    end

    return cfg_get_bool(char_ini, section, field, object, mandatory, default_val)
end

-- Проверяет, находится ли stalker рядом с точкой path_point пути patrol_path
function stalker_at_waypoint(stalker, patrol_path, path_point)
    --	return stalker:level_vertex_id() == patrol_path:level_vertex_id(path_point)

    local stalker_pos = stalker:position()
    local distance = stalker_pos:distance_to_sqr(patrol_path:point(path_point))
    if distance <= 0.13 then
        return true
    end
    return false

end

-- Послать stalker в заданную точку patrol_path(path_point)
--[[
function stalker_go_to_waypoint(stalker, patrol_path, path_point)
	if stalker:animation_count() > 0 then
		stalker:clear_animations()
	end
	if stalker:level_vertex_id() == patrol_path:level_vertex_id(path_point) then
		return
	end
	stalker:set_dest_level_vertex_id(patrol_path:level_vertex_id(path_point))
	stalker:set_movement_type(move.run)
	stalker:set_body_state(move.standing)
	stalker:set_sight(look.path_dir, nil, 0)
	stalker:set_path_type(game_object.level_path)
	stalker:set_mental_state(anim.danger)
	stalker:set_detail_path_type(move.line)
end
--]]

function stalker_stop(stalker)
    stalker:set_movement_type(move.stand)
end

--[[
function stalker_look_at_waypoint(stalker, patrol_path, path_point)
	local look_pt = this.vector_copy_by_val(patrol_path:point(path_point)):sub(stalker:position())
	stalker:set_sight(look.direction, look_pt, 0)
end
--]]

--[[
function stalker_look_at_stalker(stalker, whom)
	local look_pt = this.vector_copy_by_val(whom:position()):sub(stalker:position())
	stalker:set_sight(look.direction, look_pt, 0)
end
--]]

--[[
function stalker_look_at_stalker_angle(stalker, whom, angle)
    --stalker - killer
    --whom - killed :)
	local look_pt = this.vector_copy_by_val(whom:position()):sub(stalker:position())
	stalker:set_sight (look.direction, vector_rotate_y (look_pt, angle), 0)
end
--]]

--[[
function stalker_look_firepoint_angle(stalker, whom, angle)
    --stalker - killer
    --whom - killed :)
	local look_pt = this.vector_copy_by_val(whom:position()):sub(stalker:position())
	stalker:set_sight (look.fire_point, vector_rotate_y (look_pt, angle), 0)
end
--]]

--[[local function door_default_callback(door, actor)
	local ph_shell = door:get_physics_shell()
	local joint = ph_shell:get_joint_by_bone_name("door")

	local low_limit = 0
	local hi_limit = 0
	low_limit, hi_limit = joint:get_limits(low_limit, hi_limit, 0)

	local angle = joint:get_axis_angle(0)
	if angle-low_limit > hi_limit - angle 
	then
		joint:set_max_force_and_velocity(100, -1.5, 0)
	else
		joint:set_max_force_and_velocity(100, 1.5, 0)
	end
end]]

--[[function door_init(door)
	door:set_use_callback(door_default_callback)
end]]

-- Дверь door импульсом захлопнется и залочится, при юзе будет вызываться callback_fn
--[[function door_close_then_lock(door, callback_fn)
	local ph_shell = door:get_physics_shell()
	local joint = ph_shell:get_joint_by_bone_name("door")
	local low_limit = 0
	local hi_limit = 0
	low_limit, hi_limit = joint:get_limits(low_limit, hi_limit, 0)
	local angle = joint:get_axis_angle(0)
	if angle-low_limit > hi_limit - angle 
	then
		joint:set_max_force_and_velocity(1000000, 0, 0)
	else
		joint:set_max_force_and_velocity(1000000, 0, 0)
	end
end]]

-- unlock_then_open(door) -- дверь разлочится и импульсом откроется
-- locked(door) -- true, если дверь закрыта и залочена

-- При попытке поюзать незапертую дверь она просто силой открывается до максимально допустимого состояния.

function parse_waypoint_data(pathname, wpflags, wpname)
    local rslt = {}
    rslt.flags = wpflags

    local pp_name = wpname
    if string.find(wpname, "|", 1, true) == nil then
        return rslt, pp_name
    end

    local par_num = 1
    for param in string.gmatch(wpname, "([%w_\\%=%-%,%*]+)|*") do
        if par_num == 1 then
            pp_name = param
        else
            ASSERT(param ~= "", "path '%s': waypoint '%s': syntax error in waypoint name", pathname, wpname)

            local fld_num = 1
            local fld, val
            for v in string.gmatch(param, "([%w_\\%-%,%*]+)=*") do
                if fld_num == 1 then
                    fld = v
                elseif fld_num == 2 then
                    val = v
                else
                    abort("path '%s': waypoint '%s': syntax error while parsing the param '%s'", pathname, wpname, param)
                end
                fld_num = fld_num + 1
            end

            ASSERT((fld and fld ~= ""),
                "path '%s': waypoint '%s': syntax error while parsing the param '%s': no field specified", pathname,
                wpname, param)

            if (not val) or val == "" then
                val = "true"
            end
            rslt[fld] = val
        end
        par_num = par_num + 1
    end
    return rslt, pp_name
end

function path_parse_waypoints(pathname)
    if not pathname then
        return nil
    end

    -- log2( "_bp: path_parse_waypoints: pathname = %s", pathname )
    ASSERT(level.patrol_path_exists(pathname), "can't load path %s", tostring(pathname))
    local ptr = patrol(pathname)
    ASSERT(ptr:point(0), "can't load path %s", tostring(pathname))
    local cnt = ptr:count()
    local rslt = {}

    for pt = 0, cnt - 1 do
        local pp_name
        rslt[pt], pp_name = parse_waypoint_data(pathname, ptr:flags(pt), ptr:name(pt))
        ASSERT(rslt[pt], "error while parsing point %d of path '%s'", pt, pathname)
        if not rslt[pt].sig then
            if pt < cnt - 1 then
                rslt[pt].sig = pp_name
            else
                rslt[pt].sig = "endpoint"
            end
        end
    end

    return rslt
end

function path_parse_waypoints_from_arglist(pathname, num_points, ...)
    local arg = {...}

    if not pathname then
        return nil
    end

    local ptr = patrol(pathname)
    local cnt = ptr:count()

    if cnt ~= num_points then
        abort("path '%s' has %d points, but %d points were expected", pathname, cnt, num_points)
    end

    local rslt = {}

    local cur_arg
    local fl
    for pt = 0, cnt - 1 do
        cur_arg = arg[pt + 1]
        if not cur_arg then
            abort("script error [1] while processing point %d of path '%s'", pt, pathname)
        end
        fl = flags32()
        fl:assign(cur_arg[1])
        rslt[pt] = parse_waypoint_data(pathname, fl, cur_arg[2])
        if not rslt[pt] then
            abort("script error [2] while processing point %d of path '%s'", pt, pathname)
        end
    end

    return rslt
end

--[[function action2(obj,...)
	local act = entity_action()
	local i = 1
	while true do
		if (arg[i] ~= nil) then
			act:set_action(arg[i])
		else
			break
		end
		i = i + 1
	end
	if (obj ~= nil) then
		obj:command(act,false)
	end
	return  entity_action(act)
end]]

function wpn_info_get(npc)
    local rslt = {}

    local active_item = npc:active_item()
    local has_weapon = active_item and isWeapon(active_item)
    if has_weapon then
        rslt["id"] = active_item:id()
        rslt["ammo"] = active_item:get_ammo_in_magazine()
    end

    return rslt
end

function wpn_info_equal(wpn_info1, wpn_info2)
    return wpn_info1["id"] == wpn_info2["id"] and wpn_info1["ammo"] == wpn_info2["ammo"]
end

function get_scheme_by_section(section)
    local scheme = string.gsub(section, "%d", "")
    local at, to = string.find(scheme, "@", 1, true)
    if at and to then
        scheme = string.sub(scheme, 1, at - 1)
    end
    return scheme
end

-- a | b | c  ==>  { 1 = "a", 2 = "b", 3 = "c" }
function parse_params(params)
    local rslt = {}
    local n = 1
    for fld in string.gmatch(params, "%s*([^|]+)%s*") do
        rslt[n] = fld
        n = n + 1
    end
    return rslt
end

function is_day()
    return level.get_time_hours() >= 6 and level.get_time_hours() < 21
end

function electro_art_enabled()
    return level.get_time_hours() >= 0 and level.get_time_hours() < 5
end

function no_need_to_rotate(npc, target_pos)
    local y = yaw(npc:direction(), utils.vector_copy_by_val(target_pos):sub(npc:position()))

    return y < 0.3
end

function no_need_to_rotate_xz(npc, target_pos)
    local dir1 = npc:direction()
    dir1.y = 0
    local dir2 = utils.vector_copy_by_val(target_pos):sub(npc:position())
    dir2.y = 0
    local y = yaw(dir1, dir2)

    return y < 0.3
end

-- Перевод угла из радианов в градусы
function rad2deg(r)
    return r * 180.0 / math.pi
end

-- Перевод угла из градусов в радианы
function deg2rad(d)
    return d * math.pi / 180.0
end

-- угол между двумя векторами в градусах.
function angle_diff(a1, a2)
    local b1 = a1:normalize()
    local b2 = a2:normalize()
    local dotp = b1:dotproduct(b2)

    return rad2deg(math.acos(math.abs(dotp)))
end

-- true, если нужно поворачивать влево
function angle_left(dir1, dir2)
    local dir_res = vector():set(0, 0, 0)
    dir_res:crossproduct(dir1, dir2)
    return dir_res.y <= 0
end

function angle_left_xz(dir1, dir2)
    local dir_res = vector():set(0, 0, 0)
    dir1.y = 0
    dir2.y = 0
    dir_res:crossproduct(dir1, dir2)
    return dir_res.y <= 0
end

function get_nearest_waypoint(obj, pathname, ptr, cnt)
    local pt_chosen = nil
    local min_dist = nil
    local dist
    for i = 0, cnt - 1 do
        dist = obj:position():distance_to(ptr:point(i))
        if not min_dist or dist < min_dist then
            min_dist = dist
            pt_chosen = i
        end
    end
    if not pt_chosen then
        abort(
            "object '%s': path '%s': get_nearest_waypoint: unable to choose a nearest waypoint (path has no waypoints?)",
            obj:name(), pathname)
    end
    return pt_chosen
end

function npc_in_zone(npc, zone)
    if not (npc and zone) then
        return false
    end
    local sr = zone:get_space_restrictor()
    ASSERT(sr, "[%s]: %s isn't space_restrictor", script_name(), zone:name())
    if sr:is_scheduled() then
        return sr:active_contact(npc:id())
    end
    return zone:inside(npc:position())
end

-- запись CTime в пакет. если t=nil, то запишет один нулевой байт
function w_CTime(p, t)
    if (not t) or t == game.CTime() then
        p:w_u8(0)
    else
        local Y, M, D, h, m, s, ms = t:get()
        p:w_u8(Y - 2000)
        p:w_u8(M)
        p:w_u8(D)
        p:w_u8(h)
        p:w_u8(m)
        p:w_u8(s)
        p:w_u16(ms)
    end
end

-- чтение CTime из пакета
function r_CTime(p)
    local t = game.CTime()
    local Y = p:r_u8()
    if Y ~= 0 then
        local M, D, h, m, s, ms = p:r_u8(), p:r_u8(), p:r_u8(), p:r_u8(), p:r_u8(), p:r_u16()
        t:set(Y + 2000, M, D, h, m, s, ms)
    end
    return t
end

-- запись CTime в пакет.
function w_CTime_ex(p, t)
    ASSERT(t, "[w_CTime_ex] time is nil")
    local Y, M, D, h, m, s, ms = -1, 0, 0, 0, 0, 0, 0
    if t ~= game.CTime() then
        Y, M, D, h, m, s, ms = t:get()
        Y = Y - 2000
    end
    p:w_u8(Y)
    p:w_u8(M)
    p:w_u8(D)
    p:w_u8(h)
    p:w_u8(m)
    p:w_u8(s)
    p:w_u16(ms)
end

-- чтение CTime из пакета
function r_CTime_ex(p)
    local Y, M, D, h, m, s, ms = p:r_s8(), p:r_u8(), p:r_u8(), p:r_u8(), p:r_u8(), p:r_u8(), p:r_u16()
    local t = game.CTime()
    if Y ~= -1 then
        t:set(Y + 2000, M, D, h, m, s, ms)
    end
    return t
end

-- отослать в ближайшую разрешённую ноду по направлению к заданной.
-- возвращает vertex_id, в которое отправил персонажа
function send_to_nearest_accessible_vertex(npc, v_id)
    if npc and v_id then
        if not npc:accessible(v_id) then
            local vtemp = vector():set(0, 0, 0)
            v_id, vtemp = npc:accessible_nearest(level.vertex_position(v_id), vtemp)
        end
        npc:set_dest_level_vertex_id(v_id)
    end
    return v_id
end

-- происходит ли в данный момент смена уровня?
-- нужно для того, чтобы объекты знали, какую информацию записывать при сохранении, а какую нет
function level_changing()
    if not alife() then
        return false
    end

    local actor_gv = game_graph():vertex(alife():actor().m_game_vertex_id)

    return actor_gv:level_id() ~= alife():level_id()
end

function parse_data_1v(npc, s)
    local t = {}

    if s then
        for name in string.gmatch(s, "(%|*%d+%|[^%|]+)%p*") do
            local dat = {
                dist = nil,
                state = nil
            }

            local t_pos = string.find(name, "|", 1, true)

            local dist = string.sub(name, 1, t_pos - 1)
            local state = string.sub(name, t_pos + 1)

            dat.dist = tonumber(dist)
            if state then
                dat.state = xr_logic.parse_condlist(npc, dist, state, state)
            end
            t[tonumber(dist)] = dat
        end
    end
    return t
end

local index_for_community = {}
local communities_relations = {}
local community_for_index = {}
local function load_communities_relations()
    local index = 1

    for comm, id in string.gmatch(get_string("game_relations", "communities"), "([%w_]+)%s*,%s*([%d%.%-]+)%,*") do
        local t = {}
        for rel in string.gmatch(get_string("communities_relations", comm), "([%d%.%-]+)%,*") do
            table.insert(t, tonumber(rel))
        end
        communities_relations[comm] = t
        index_for_community[comm] = index
        community_for_index[index] = comm
        index = index + 1
    end
end
load_communities_relations() -- Построение таблиц делаем при первом запуске скрипта

function comm2idx(comm)
    return index_for_community[comm]
end

function idx2comm(id)
    return community_for_index[id]
end

function comm2comm_relation(community_from, community_to)
    local relations = communities_relations[community_from]
    ASSERT(relations, "")
    return relations[index_for_community[community_to]]
end

function community_relation_safe(community, npc_id, char_comm)
    local relations = communities_relations[community]
    ASSERT(relations, "Can't find relation for community: [%s]", community or "nil")
    return relations[index_for_community[char_comm]] + relation_registry.community_goodwill(community, npc_id)
end
