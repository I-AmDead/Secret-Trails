
local forbidden_npc_names = { --Таблица трупов, с которых запрещено снимать костюмы
	["esc_novice_attacker1"] = true,
	["esc_blokpost_commander"] = true,
	["agr_ratcatcher"] = true,
	["val_lager_bandits_borov"] = true,
	["gar_wounded_bandit"] = true,
	["bar_dolg_leader"] = true,
	["bar_dolg_petrenko"] = true,
	["mil_freedom_member0012"] = true,
	["mil_freedom_member0018"] = true,
	["mil_stalker0012"] = true,
	["mil_stalker0023"] = true,
	["mil_ara"] = true,
	["mil_blockpost_freedomstalker001"] = true,
	["bar_ecolog_professor"] = true,
	["yan_scientist_help"] = true,
	["yan_specnaz_dead"] = true,
	["x16_stalker_ghost"] = true,
	["yantar_semenov"] = true,
}
--' Ключем является группировка персонажа. Значением является таблица, содержашая имена секций предметов.
local item_by_community = {}

--' Зависимости в спауне предметов. Предмет спауниться только если есть хотя бы один из зависимых.
local item_dependence = {}

--' Множители и минимаксы для выпадения вещей в зависимости от уровня
local mul_by_level = {}
local count_by_level = {}

--' Предметы, которые удалять
local always_keep_item = {}
local always_offs_items = {
"hand_radio",
"guitar_a",
"harmonica_a",
"bolt",
"grenade_f1",
"grenade_rgd5",
"ammo_9x19_pbp",
"ammo_9x39_pab9",
"ammo_9x39_ap",
"ammo_9x18_fmj",
"ammo_9x18_pmm",
"ammo_11.43x23_fmj",
"ammo_5.45x39_fmj",
"ammo_5.45x39_ap",
"ammo_9x19_fmj",
"ammo_5.56x45_ss190",
"ammo_5.56x45_ap",
"ammo_12x70_buck",
"ammo_12x76_zhekan",
"ammo_12x76_dart",
"ammo_og-7b",
"ammo_m209",
"ammo_vog-25p",
"bandage",
"medkit",
"medkit_army",
"medkit_scientic",
"antirad",
"bread",
"kolbasa",
"conserva",
"vodka",
"energy_drink"
}

local suit_prob = 100

--' Предметы, относящиеся к патронам. Их надо спаунить другим методом.
local ammo_sections = {}

local death_ini = ini_file("misc\\death_generic.ltx")


function init_drop_settings()
	local community_list = { "stalker", "dolg", "freedom", "bandit", "military", "zombied", "ecolog", "killer", "monolith", "arena_enemy", "actor_dolg","bratok","nebo","wanderer","ucheniy","usa","newstalk","hunter","maroder","maroderka" }	

    for k,v in pairs(community_list) do
        --' Необходимо заполнить таблицу
        item_by_community[v] = {}
        if death_ini:section_exist(v) then
		    local n = death_ini:line_count(v)
		    local id, value = "", ""
		    for i=0,n-1 do
			    result, id, value	= death_ini:r_line(v,i)
                --item_by_community[v][id] = 1000 * tonumber(value)
				if tonumber(value) >= 0.4 then value = 0.2 end
				item_by_community[v][id] = 1000 * tonumber(value)
		    end
        end
    end

    --' Заполняем таблицу зависимостей
	local n = death_ini:line_count("item_dependence")
	local id, value = "", ""
	for i=0,n-1 do
		result, id, value	= death_ini:r_line("item_dependence",i)
		item_dependence[id] = {}
		local vvv = parse_names(value)
		for k,v in pairs(vvv) do
			item_dependence[id][v] = true
		end
	end

	--' Множители и минимаксы для выпадения вещей в зависимости от уровня
    local level_name = level.name()
	
	if not death_ini:section_exist(level_name) then
		level_name = "default"
	end

    local n = death_ini:line_count(level_name)
	local id, value = "", ""
	for i=0,n-1 do
		result, id, value	= death_ini:r_line(level_name,i)
        mul_by_level[id] = tonumber(value)
	end        

    local item_count_section = "item_count_" .. level.get_game_difficulty()
    local n = death_ini:line_count(item_count_section)
	for i=0,n-1 do
		result, id, value	= death_ini:r_line(item_count_section,i)
        --' Нужно распарсить value в два значения
        local t = parse_nums(value)
		if t[1] == nil then
            abort("Error on [death_ini] declaration. Section [%s], line [%s]", item_count_section, tostring(id))
        end
        local min = t[1]
        local max = t[2] or min
        
        mul_by_level[id] = mul_by_level[id] or 0

        min = tonumber(min) * mul_by_level[id]
        max = tonumber(max) * mul_by_level[id]

        count_by_level[id] = {min = min, max = max}
	end        

 	--' Предметы, которые нельзя удалять (квестовые например)
    local n = death_ini:line_count("keep_items")
	for i=0,n-1 do
		result, id, value	= death_ini:r_line("keep_items",i)
        if value == "true" then
            always_keep_item[id] = true
        end
    end
      
	--' Предметы, относящиеся к патронам. Их надо спаунить другим методом.
    ammo_sections = {}
    local n = death_ini:line_count("ammo_sections")
	local id, value = "", ""
	for i=0,n-1 do
		result, id, value	= death_ini:r_line("ammo_sections",i)
        ammo_sections[id] = true
	end        
end



class "drop_manager"
function drop_manager:__init(npc)
	self.npc = npc
end
function drop_manager:create_release_item(npc)
	if not self.npc then return end
	--' Спрашиваем у серверного объекта генерились ли предметы
	local se_obj = alife():object(self.npc:id())
	if not se_obj or se_obj.death_dropped then return end
	se_obj.death_dropped = true

    --' Запускаем итератор на удаление предметов
    self.npc:iterate_inventory(keep_item, self.npc)

    --' Проверка на отсутствие спауна лута
    --local ini = self.npc:spawn_ini()
    --if ini and ini:section_exist("dont_spawn_loot") and not self.npc:name() == "fedya_razboinik" then
        --return
    --end

    --' Доспавниваем необходимое количество итемов:
    --' Необходимо составить список объектов которые могут быть заспавнены для персонажа
	local spawn_items = item_by_community[self.npc:character_community()]    
    if spawn_items then
	for k,v in pairs(spawn_items) do
          --' По каждому объекту необходимо получить зависимости		
          if check_item_dependence(self.npc, k) == true then
		--' По каждому объекту необходимо получить количество
		local number = math.ceil(math.random(count_by_level[k].min, count_by_level[k].max))
		--' Необходимо заспавнить нужное количество.
		create_items(self.npc, k, number, v)
	end
      end
    end

	local sect = ogse_real_armor.vis_to_armor(self.npc) --RealArmor by KamikaZze

	if sect and not forbidden_npc_names[self.npc:name()] then
		local rnd = suit_prob
		local otf = create_items(self.npc, sect, 1, rnd)
		if otf then
			level.client_spawn_manager():add( otf.id, -1, function(id, obj)
				obj:set_condition( (10+math.random(6,65))/100 )
			end )
		end
	end
	
if self.npc:name() =="esc_shilo_band" then
  ogse.spawn_item_in_inv("part6", self.npc)
  ogse.spawn_item_in_inv("money_gg", self.npc)
  ogse.spawn_item_in_inv("wpn_ks23", self.npc)
end
if self.npc:name() =="fedya_razboinik" then
  ogse.spawn_item_in_inv("amulet_1", self.npc)
end
if self.npc:name() =="solomon" then
  db.actor:give_info_portion("haron_need_stalker_fail")
end
if string.find(self.npc:name(),"mathon") then
  db.actor:give_info_portion("haron_naem_fail")  
end
if string.find(self.npc:name(),"new_prizrak") then
  db.actor:give_info_portion("prizrak_help_fail")  
end
if string.find(self.npc:name(),"mil_lucash") then
  db.actor:give_info_portion("mil_lucash_dead")  
end
if string.find(self.npc:name(),"mil_blockpost_leader") then
  db.actor:give_info_portion("mil_blockpost_leader_dead")  
end
if string.find(self.npc:name(),"mil_soldat_one") then
  db.actor:give_info_portion("mil_voen_one")  
end
if string.find(self.npc:name(),"mil_soldat_two") then
  db.actor:give_info_portion("mil_voen_two")  
end
if string.find(self.npc:name(),"mil_soldat_tri") then
  db.actor:give_info_portion("mil_voen_tri")  
end
if string.find(self.npc:name(),"mil_soldat_four") then
  db.actor:give_info_portion("mil_voen_four")  
end
if string.find(self.npc:name(),"mil_soldat_five") then
  db.actor:give_info_portion("mil_voen_five")  
end
if string.find(self.npc:name(),"dark_komandir_belchuk") then
  db.actor:give_info_portion("mil_voen_six")  
end
if string.find(self.npc:name(),"mil_barier_one") then
  db.actor:give_info_portion("mil_barier_one")  
end
if string.find(self.npc:name(),"mil_barier_two") then
  db.actor:give_info_portion("mil_barier_two")  
end
if string.find(self.npc:name(),"mil_barier_tri") then
  db.actor:give_info_portion("mil_barier_tri")  
end
if string.find(self.npc:name(),"mil_barier_four") then
  db.actor:give_info_portion("mil_barier_four")  
end
if string.find(self.npc:name(),"mil_komandir_sidorchuk") then
  db.actor:give_info_portion("mil_barier_five")  
end
if string.find(self.npc:name(),"mil_stukach") then
  db.actor:give_info_portion("mil_stukach_dead")  
end
if string.find(self.npc:name(),"mil_trader") then
  db.actor:give_info_portion("mil_trader_dead")  
end
if string.find(self.npc:name(),"mil_engineer") then
  db.actor:give_info_portion("mil_engineer_dead")  
end
if string.find(self.npc:name(),"mil_cook") then
  db.actor:give_info_portion("mil_cook_new_dead")  
end
if self.npc:name() == "bes" then
  db.actor:give_info_portion("bes_dead")  
end
if string.find(self.npc:name(),"garbage_stalker_wound") then
  db.actor:give_info_portion("garbage_stalker_wound_dead")  
end
if string.find(self.npc:name(),"mil_osvedomitel") then
  db.actor:give_info_portion("mil_osvedomitel_dead")  
end
if string.find(self.npc:name(),"clear_scy_leader") then
  db.actor:give_info_portion("sviblov_dead")  
end
if string.find(self.npc:name(),"esc_krest_bratok") then
  db.actor:give_info_portion("krest_dead")  
end
if string.find(self.npc:name(),"atp_barman") then
  db.actor:give_info_portion("band_kill_have")  
end
end

--' Функция вызывается для каждого предмета в инвентаре убитого НПС
function keep_item(npc, item)
	local npc_community = npc:character_community()
    if item==nil or alife():object(item:id())==nil then return end
	
	if npc == nil then return end
    local section = item:section()

    if section == "bolt" then
        return false
    end

    if always_keep_item[section] == true then
        return true
    end

    local item_id = item:id()
	local kond=75
	if 		npc_community == "military" then kond=75
	elseif 	npc_community == "killer" then kond=75
	elseif 	npc_community == "monolith" then kond=20
	elseif 	npc_community == "zombied" then kond=5
	elseif 	npc_community == "bandit" then kond=40
	else kond=60
	end
    local item_in_slot = npc:item_in_slot(1)
    if item_in_slot ~= nil and item_in_slot:id() == item_id then
        item:unload_magazine()
                --' Тут надо уменьшить кондишн оружия
                item:set_condition((math.random(90-kond)+kond)/100)
        return true
    end
    item_in_slot = npc:item_in_slot(2)
    if item_in_slot ~= nil and item_in_slot:id() == item_id then
        item:unload_magazine()
                --' Тут надо уменьшить кондишн оружия
                item:set_condition((math.random(95-kond)+kond)/100)
        return true
    end

	-- удалять ПДА, гитару\гармошку, фонарики и приборы ночного видения, рацию, бинокль.
	for a=1,table.getn(always_offs_items),1 do
		if always_offs_items[a]==section then
		--if (npc.mark_item_dropped) then
--    npc:mark_item_dropped(item)
		--end
    alife():release(alife():object(item:id()), true) 
	end
	end
end

--' Функция спавнит необходимое число предметов
function create_items(npc, section, number, rnd)
	if npc == nil then return end
    --'printf("create %s of %s", tostring(number), tostring(section))
    if ammo_sections[section] == true then
        if number > 0 then
            se_respawn.create_ammo(section,	
				    npc:position(),
				    npc:level_vertex_id(),	
				    npc:game_vertex_id(),
				    npc:id(),
                    number)
        end
    else
        for i=1,number do
			--' Проверяем вероятность появить каждый объект в отдельности
            if math.random(1000) <=  rnd then
				return alife():create(section,	
					    npc:position(),
						npc:level_vertex_id(),	
						npc:game_vertex_id(),
						npc:id())
			end
        end
    end    
end


--' Функция проверяет есть ли хоть один из зависимых объектов у персонажа
function check_item_dependence(npc, section)
	if npc == nil then return end
	if item_dependence[section] == nil then
		return true
	end

    local d_flag = true
    for k,v in pairs(item_dependence[section]) do
        local obj = npc:object(k)
        if obj ~= nil and npc:marked_dropped(obj) ~= true then
            return true
        end
        d_flag = false
    end

    return d_flag
end