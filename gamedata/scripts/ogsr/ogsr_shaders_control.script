local function dof_enable()
    if db.actor:dont_has_info("ui_pda") then
        set_dof_params(1.0, 1.0, 1.0, 1.1)
    else
        set_dof_params(0.0, 0.0, 0.0, 0.0)
    end
end

local function dof_disable()
    set_dof_params(0.0, 0.0, 0.0, 0.0)
end

local function on_first_update()
    cmd("ssfx_wpn_dof_2 0.5")
    set_dof_params(0.0, 0.0, 0.0, 0.0)
    shader_set_custom_param("radiation_effect", 0, 0, 0, 0)
end

local function on_key_down(key, bind)
    if not (bind == key_bindings.kSWITCH_MARK or bind == key_bindings.kSWITCH_MARK_COLOR) then return end

    if not (db.actor and db.actor:alive()) then return end

    local wpn = db.actor:active_item()
    if not wpn then return end
    mark_control(wpn, false, bind)
end

function on_dots_update()
    if not (db.actor and db.actor:alive()) then return end

    local wpn = db.actor:active_item()
    if not wpn then return end

    if last_weapon_id and last_weapon_id == wpn:id() then return end
    last_weapon_id = wpn:id()
    mark_control(wpn, true)
end

function mark_control(wpn, force, bind)
    local scope_name = get_string(wpn:section(), "scope_name", wpn:section())
    local dots_number = get_u32(wpn:section(), "dots_number", 0)
    if scope_name and get_line_exist(scope_name, "dots_number") then
        dots_number = get_u32(scope_name, "dots_number", 0)
    else
        scope_name = wpn:section()
    end
    if not force then
        if dots_number and dots_number > 0 then
            if bind == key_bindings.kSWITCH_MARK then
                settings_mark(false, dots_number, "mark_number", scope_name)
            else
                settings_mark(false, 3, "mark_color", scope_name)
            end
        end
    else
        settings_mark(true, dots_number, "mark_number", scope_name)
        settings_mark(true, 3, "mark_color", scope_name)
    end
end

local last_weapon_id
local snd_adjust = sound_object('interface\\mark_adjust')
function settings_mark(update, max_value, value_name, scope_name)
    local value = ogse.load_var(value_name .. scope_name, 0)
    if not update then
        value = value < max_value - 1 and value + 1 or 0
        ogse.save_var(value_name .. scope_name, value)
        game.play_hud_anm("script\\mark_adjust.anm", 2, 2, 1, false, false)
        snd_adjust:play(db.actor, 0, sound_object.s2d)
    end
    if value_name == "mark_color" then
        if value < 2 then
            if value < 1 then
                shader_set_custom_param(value_name, 1, 0, 0)
            else
                shader_set_custom_param(value_name, 0, 1, 0)
            end
        else
            shader_set_custom_param(value_name, 0, 0, 1)
        end
    else
        shader_set_custom_param(value_name, value, max_value, 0)
    end
end

local rad_effect
local function update_rad_effect()
    local rads = ogse_dbg_anomaly_binder.get_max_radlevel()
    local distance = ogse_dbg_anomaly_binder.get_ditance_to_radzone()
    if rads > 0 then
        shader_set_custom_param("radiation_effect", rads * 0.1, distance, 0, 0)
        rad_effect = true
    else
        if rad_effect then
            shader_set_custom_param("radiation_effect", 0, 0, 0, 0)
            rad_effect = false
        end
    end
end

function on_actor_update()
    update_rad_effect()
    on_dots_update()
end

function attach(sm)
    sm:subscribe({ signal = "on_first_update",     fun = on_first_update })
    sm:subscribe({ signal = "ui_on_dialog_show",   fun = dof_enable })
    sm:subscribe({ signal = "ui_on_dialog_hide",   fun = dof_disable })
    sm:subscribe({ signal = "on_update",           fun = on_actor_update })
    sm:subscribe({ signal = "on_key_down",         fun = on_key_down })
end
