-- -*- mode: lua; coding: windows-1251-dos -*-

-- Movement manager
-- Created by: Andrey Fidrya (Zmey), af@svitonline.com

local dist_walk =   10          -- < dist_run
local dist_run  = 50 --2500

local walk_min_time = 3000
local run_min_time  = 2000

local keep_state_min_time = 1500 -- переключившись в состояние (бег, ходьба, спринт), не переключаться в другое N ms

local default_wait_time      = 5000
local default_state_standing = "guard"
local default_state_moving1  = "patrol"
local default_state_moving2  = "rush"
local default_state_moving3  = "sprint"

arrival_before_rotation = 0
arrival_after_rotation  = 1

local state_none     = 0
local state_moving   = 1
local state_standing = 2

local sync = {}

local extrapolate_hack_type = {
  [ "zat_romale_walk" ] = patrol.next,
}


function attach( sm )
  sm:subscribe({ signal = "on_first_update", fun = this.on_first_update })
end


function printf()
end


function alt_choose_look_point( patrol_look, path_look_info, search_for )
  -- количество найденных точек (с нужными флагами)
  local pts_found_total_weight = 0
  local pt_chosen_idx           -- индекс выбранной точки
  local num_equal_pts = 0
  for look_idx = 0, patrol_look.count - 1 do
    -- значение флагов текущей точки
    local this_val = path_look_info[ look_idx ].flags
    if this_val == search_for then
      num_equal_pts = num_equal_pts + 1
      -- Нашли точку с нужными флагами, но поскольку в пути могут быть
      -- еще такие-же точки, возьмем текущую только с некоторой
      -- вероятностью: Шанс, с которым на точку посмотрит персонаж:
      local point_look_weight = path_look_info[ look_idx ][ "p" ]
      if point_look_weight then
        point_look_weight = tonumber( point_look_weight )
      else
        point_look_weight = 100 -- по умолчанию у всех точек вес = 100
      end
      pts_found_total_weight = pts_found_total_weight + point_look_weight
      local r = math.random( pts_found_total_weight )
      if r <= point_look_weight then
        pt_chosen_idx = look_idx
      end
    end
  end
  return pt_chosen_idx, num_equal_pts
end


function choose_look_point( patrol_look, path_look_info, search_for )
  -- количество найденных точек (с нужными флагами)
  local pts_found_total_weight = 0
  local pt_chosen_idx              -- индекс выбранной точки
  local num_equal_pts = 0
  for look_idx = 0, patrol_look:count() - 1 do
    -- значение флагов текущей точки
    local this_val = path_look_info[ look_idx ].flags
    if this_val:equal( search_for ) then
      num_equal_pts = num_equal_pts + 1
      -- Нашли точку с нужными флагами, но поскольку в пути могут быть
      -- еще такие-же точки, возьмем текущую только с некоторой
      -- вероятностью: Шанс, с которым на точку посмотрит персонаж:
      local point_look_weight = path_look_info[ look_idx ][ "p" ]
      if point_look_weight then
        point_look_weight = tonumber( point_look_weight )
      else
        point_look_weight = 100 -- по умолчанию у всех точек вес = 100
      end
      pts_found_total_weight = pts_found_total_weight + point_look_weight
      local r = math.random( pts_found_total_weight )
      if r <= point_look_weight then
        pt_chosen_idx = look_idx
      end
    end
  end
  return pt_chosen_idx, num_equal_pts
end


class "move_mgr"
function move_mgr:__init( npc )
  ASSERT( npc, "move_mgr:__init() - npc is nil, please update the script" )
  self.object = npc
end


function move_mgr:initialize( npc )
  ASSERT(
    ( not npc ),
    "Wrong arguments passed to move_mgr:initialize(), please update the script"
  )
  self.object:set_callback(
    callback.patrol_path_in_point, self.waypoint_callback, self
  )
end


-- Удостоверяется, что пути и флажки на них проставлены корректно
function move_mgr:validate_paths()
  if self.no_validation then return end
  local patrol_walk_count = self.patrol_walk:count()
  if patrol_walk_count == 1 then
    -- Временно затыкаем, чтобы не срабатывало для пути атаки
    -- наёмников на сталкеров возле армейских складов.
    -- ASSERT(
    --   self.path_walk_info[ 0 ].flags:get() ~= 0,
    --   "object '%s': path_walk '%s' has 1 waypoint, but has no flags",
    --   self.object:name(), self.path_walk
    -- )
  end
end


function move_mgr:extrapolate_callback( npc, cur_pt )
  self.can_use_get_current_point_index = true
  self.current_point_init_time = time_global()
  self.current_point_index     = self.object:get_current_point_index()
  self.object:set_start_point(self.current_point_index)
  self.object:set_patrol_path(self.path_walk, ( extrapolate_hack_type[ self.path_walk ] or patrol.next ), patrol.continue, true)
end


function move_mgr:standing_on_terminal_waypoint()
  if self.patrol_walk ~= nil then
    for idx = 0, self.patrol_walk:count() - 1 do
      if
        self.patrol_walk:terminal( idx )
        and utils.stalker_at_waypoint( self.object, self.patrol_walk, idx )
      then
        return true, idx
      end
    end
  end
  return false
end


-- Может быть вызвано внешним скриптом после вызова reset() и до
-- вызова finalize(). Возвращает true, если персонаж прибыл в конечную
-- точку пути.
function move_mgr:at_terminal_waypoint()
  return self.at_terminal_waypoint_flag
end


-- Из move_cb вернуть true, чтобы приостановить работу схемы. Чтобы
-- продолжить движение, нужно вызвать метод set_movement_state,
-- который включит перемещение по вейпоинтам с нужной скоростью.
function move_mgr:reset( path_walk, path_walk_info, path_look, path_look_info, team, suggested_state, move_cb_info, no_validation, continue, use_default_sound )
  -- сколько ждать в точке, где играем анимацию
  self.pt_wait_time = default_wait_time

  -- Запоминаем массив целиком на случай, если придется себя сбросить,
  -- повторно вызвав reset()
  self.suggested_state = suggested_state
  -- После этого распарсиваем массив:
  if not suggested_state then
    self.default_state_standing = default_state_standing
    self.default_state_moving1  = default_state_moving1
    self.default_state_moving2  = default_state_moving2
    self.default_state_moving3  = default_state_moving3
  else
    self.default_state_standing = if_then_else(
      suggested_state.standing, suggested_state.standing, default_state_standing
    )
    self.default_state_moving1  = if_then_else(
      suggested_state.moving1, suggested_state.moving1, default_state_moving1
    )
    self.default_state_moving2  = if_then_else(
      suggested_state.moving2, suggested_state.moving2, default_state_moving2
    )
    self.default_state_moving3  = if_then_else(
      suggested_state.moving3, suggested_state.moving3, default_state_moving3
    )
  end

  -- С момента включения схемы должна пройти как минимум секунда,
  -- прежде чем проверять состояние синхронизации с другими сталкерами
  -- (иначе после лоада они могут не успеть заспавниться).
  self.syn_signal_set_tm = time_global() + 1000
  self.syn_signal        = nil

  self.move_cb_info = move_cb_info

  -- Возможные изменения
  -- Изменилась команда
  if team ~= self.team then
    self.team = team
    if self.team then
      local s = sync[ self.team ]
      if not s then
        sync[ self.team ] = {}
        s = sync[ self.team ]
      end
      s[ self.object:id() ] = false -- not synchronized
    end
  end

  -- Изменились пути
  if self.path_walk ~= path_walk or self.path_look ~= path_look then
    self.no_validation = no_validation

    self.path_walk   = path_walk
    self.patrol_walk = patrol( path_walk )
    ASSERT(
      self.patrol_walk,
      "object '%s': unable to find path_walk '%s' on the map",
      self.object:name(), path_walk
    )
    ASSERT(
      path_walk_info,
      "object '%s': path_walk ('%s') field was supplied, but path_walk_info field is nil",
      self.object:name(), path_walk
    )
    self.path_walk_info = path_walk_info

    if path_look then
      ASSERT(
        path_look_info,
        "object '%s': path_look ('%s') field was supplied, but path_look_info field is nil",
        self.object:name(), path_look
      )
      self.patrol_look = patrol( path_look )
      ASSERT(
        self.patrol_look,
        "object '%s': unable to find path_look '%s' on the map",
        self.object:name(), path_look
      )
    else
      self.patrol_look = nil
    end
    self.path_look      = path_look
    self.path_look_info = path_look_info

    self:validate_paths()
    self.at_terminal_waypoint_flag = false
    self.cur_state_standing     = self.default_state_standing
    self.cur_state_moving       = self.default_state_moving1
    self.retval_after_rotation  = nil
    self.sound_after_anim_start = nil

    -- Пока этот флаг не станет true (он будет установлен в
    -- extrapolate_callback), нельзя использовать значение, которое
    -- возвращает get_current_point_index().
    self.can_use_get_current_point_index = false
    self.current_point_index = nil
    self.walk_until          = time_global() + walk_min_time
    self.run_until           = time_global() + walk_min_time + run_min_time
    self.keep_state_until    = time_global()

    self.last_index        = nil
    self.last_look_index   = nil
    self.use_default_sound = use_default_sound
    self.object:patrol_path_make_inactual()
  end

  if rx_ai.is_reset_protected_action(self.object) then
--  	rx_utils.printf("move_mgr[%s] block activity of %s for %s ",self.object:character_name(),db.storage[self.object:id()].active_scheme,self.object:motivation_action_manager():current_action_id())
  	self.setup_movement_postponed = true
  	return
  end

  self:setup_movement_by_patrol_path()
end


-- Очищаем патрульный путь от аномалий.
local pp_anoms     = {}
local pp_validated = {}

function invalidate_pp_accessibility()
  pp_anoms     = {}
  pp_validated = {}
end


function on_first_update()
  invalidate_pp_accessibility()
end


function remove_anomalies_on_path( npc, ppname )
  if pp_anoms[ ppname ] then return end
  local pp = patrol( ppname )
  ASSERT( pp, "[%s]: patrol %s not found", script_name(), ppname )
  for i = 0, pp:count() - 1 do
    local pos = pp:point( i )
    local nearest_anoms = amk_anoms.get_anomaly_list_for_pos( pos, npc:radius() )
    for _, v in ipairs( nearest_anoms ) do
      log2(
        "[%s]: found anomaly %s on point %s for %s",
        script_name(), v.name, ppname, npc:name()
      )
      dsh_anomaly_detector.remove_restriction( npc, v.id )
      log2(
        "[%s]: removed anomaly %s on point %s for %s",
        script_name(), v.name, ppname, npc:name()
      )
    end
    amk_anoms.add_anti_spawn_zone( pos, npc:radius() + 5 )
  end
  pp_anoms[ ppname ] = true
end


function validate_accessibility( npc, ppname )
  remove_anomalies_on_path( npc, ppname )
  if pp_validated[ ppname ] ~= nil then
    return pp_validated[ ppname ], ppname
  end
  pp_validated[ ppname ] = false
  local pp = patrol( ppname )
  if pp then
    if debug then
      log2( "MOVE_MGR validating %s for %s",  ppname, npc:name() )
    end
    for i = 0, pp:count() - 1 do
      if debug then
        log2(
          "MOVE_MGR verifying point [%s] on path %s VTX [%s] for %s",
          i, ppname, pp:level_vertex_id( i ), npc:name()
        )
      end
      if not level.valid_vertex_id( pp:level_vertex_id( i ) ) then
        log2(
          "[%s]: wrong point [%s] on path [%s]: level_vertex_id = %s, vertex_count = %s",
          script_name(), i, ppname, pp:level_vertex_id( i ),
          level.vertex_count()
        )
        return pp_validated[ ppname ], ppname
      end
      if debug then log1( "MOVE_MGR verifying point end" ) end
      if not npc:accessible( pp:level_vertex_id( i ) ) then
        if debug then log1( "MOVE_MGR checked point" ) end
        return pp_validated[ ppname ], ppname
      end
    end
    pp_validated[ ppname ] = true
  end
  return pp_validated[ ppname ], ppname
end


-- продолжить движение со следующей точки, а не с ближайшей.
-- состояние move manager-a не сбрасывается.
function move_mgr:continue()
  self:setup_movement_by_patrol_path()
end


function move_mgr:setup_movement_by_patrol_path()
  -- Red75 --
  local valid = validate_accessibility( self.object, self.path_walk )
  if valid then
    self.object:set_path_type( game_object.patrol_path )
  else
    self.object:set_path_type( game_object.level_path  )
  end
  self.object:set_detail_path_type( move.line )

  if valid then
    if self.current_point_index then
      self.object:set_start_point( self.current_point_index )
      self.object:set_patrol_path(
        self.path_walk, patrol.next,    patrol.continue, true
      )
    else
      self.object:set_patrol_path(
        self.path_walk, patrol.nearest, patrol.continue, true
      )
    end
  else
    -- путь недоступен. отправляем в ближайшую доступную точку
    pp=patrol(self.path_walk)
    if pp and pp:count()>0 then
      utils.send_to_nearest_accessible_vertex(self.object,pp:level_vertex_id(0))
    end
  end
  -- Red75 --

  self.state = state_moving
  local is_term, idx = self:standing_on_terminal_waypoint()
  if is_term then
    -- Стоим на терминальной вершине пути  - сразу иммитировать прибытие
    self:waypoint_callback( self.object, nil, idx )
  else
    -- Реально идем в вершину
    self:update_movement_state()
  end

  local sect = self.object:section()
  if self.use_default_sound then
    self.default_sound = "state"
    xr_sound.set_sound( self.object, self.default_sound )
  else
    self.default_sound = nil
  end
end


function move_mgr:arrived_to_first_waypoint()
  return self.last_index ~= nil
end


--' Проверка синхронизации с остальными солдатами на пути.
--' Возвращает true, если дальнейшее движение разрешено.
function move_mgr:sync_ok()
	if self.team then
		local s = sync[self.team]


		local self_id = self.object:id()
		
		for k, v in pairs(s) do
			local obj = level.object_by_id(k)
			if obj and obj:alive() then
				if v ~= true then
					return false
				end
			else
				sync[self.team][k] = nil
			end
		end
	end
	return true
end


function move_mgr:update()
  if self.syn_signal and time_global() >= self.syn_signal_set_tm then
    if self:sync_ok() then
      self:scheme_set_signal( self.syn_signal )
      self.syn_signal = nil
    end
  end
  if self.can_use_get_current_point_index and not self:arrived_to_first_waypoint() then
    local t = time_global()
    if t >= self.keep_state_until then
      self.keep_state_until = t + keep_state_min_time
      local cur_pt = self.current_point_index
      local dist = self.object:position():distance_to(self.patrol_walk:point(cur_pt))
      if dist <= dist_walk or t < self.walk_until then
        self.cur_state_moving = self.default_state_moving1
      elseif dist <= dist_run or t < self.run_until then
        self.cur_state_moving = self.default_state_moving2
      else
        self.cur_state_moving = self.default_state_moving3
      end
      self:update_movement_state()
    end
    return
  end
end


function move_mgr:finalize( npc )
  xr_sound.set_sound( self.object, nil )
  if self.team then
    sync[ self.team ][ self.object:id() ] = nil
  end
  -- чтобы избежать дальнейшего движения по пути при установке рестрикторов
  self.object:set_path_type( game_object.level_path )
end


function move_mgr:update_movement_state()
  state_mgr.set_state( self.object, self.cur_state_moving, nil, nil, nil )
end


function move_mgr:update_standing_state( look_pos, snd )
  state_mgr.set_state(
    self.object, self.cur_state_standing,
    {
      obj           = self,
      func          = self.time_callback,
      turn_end_func = self.turn_end_callback,
    },
    self.pt_wait_time, { look_position = look_pos }, nil, snd
  )
end


function move_mgr:time_callback()
  local sigtm = self.path_look_info[ self.last_look_index ][ "sigtm" ]
  if sigtm then
    self:scheme_set_signal( sigtm )
  end
  -- Если нет активной схемы - игнорировать.
  if db.storage[ self.object:id() ].active_scheme == nil then return end
  if self.last_index and self.patrol_walk:terminal( self.last_index ) then
    if
      utils.stalker_at_waypoint( self.object, self.patrol_walk, self.last_index )
    then
      -- Если стоим на конечной точке пути и с нее никуда не
      -- сдвинулись, сразу иммитируем callback на прибытие, чтобы
      -- включить look.
      self:waypoint_callback( self.object, nil, self.last_index )
      return
    end
    -- Стоим на конечной точке пути, но неточно. Чтобы вернуться на
    -- ближайшую точку пути, сбрасываем схему. Обратите внимание, что
    -- здесь нельзя просто вызвать update_movement_state, потому что
    -- мы УЖЕ были в конечной точке пути и дальше идти некуда, а
    -- reset_scheme сбросит настройки movement manager-а и выберет
    -- ближайшую точку, куда и пойдет.
    self:reset(
      self.path_walk, self.path_walk_info,
      self.path_look, self.path_look_info,
      self.team,
      self.suggested_state,
      self.move_cb_info,
      self.no_validation
    )
  else
    self:update_movement_state() -- идти дальше
    local syn = self.path_look_info[ self.last_look_index ][ "syn" ]
    ASSERT(
      ( not syn ),
      "object '%s': path_walk '%s': syn flag used on non-terminal waypoint",
      self.object:name(), self.path_walk
    )
  end
end


function move_mgr:scheme_set_signal( sig )
  local npc_id = self.object:id()
  local stor   = db.storage[ npc_id ]
  if stor ~= nil and stor[ stor.active_scheme ] ~= nil then
    local signals = stor[ stor.active_scheme ].signals
    if signals ~= nil then
      signals[ sig ] = true
    end
  end
end


function move_mgr:turn_end_callback()
  local syn = self.path_look_info[ self.last_look_index ][ "syn" ]
  if syn then
    self.syn_signal = self.path_look_info[ self.last_look_index ][ "sig" ]
    ASSERT(
      self.syn_signal,
      "object '%s': path_look '%s': syn flag uset without sig flag",
      self.object:name(), self.path_look
    )
    -- Отметить, что мы сами уже прибыли в точку синхронизации:
    if self.team then
      sync[ self.team ][ self.object:id() ] = true
    end
  else
    local sig = self.path_look_info[ self.last_look_index ][ "sig" ]
    if sig then
      self:scheme_set_signal( sig )
    end
  end

  local anim_synced_snd
  if self.sound_after_anim_start then
    -- Проиграть звук сразу после окончания поворота:
    anim_synced_snd = self.sound_after_anim_start
    self.sound_after_anim_start = nil
  end

  if self.retval_after_rotation then
    ASSERT(
      self.move_cb_info,
      "object '%s': path_look '%s': ret flag is set, but callback function wasn't registered in move_mgr:reset()",
      self.object:name(), self.path_look
    )
    -- Отключаем таймер путем установки того же самого состояния, но
    -- без таймера, затем вызываем callback. Если callback вернул
    -- false, т.е. решил не вмешиваться в перемещение, то включаем
    -- опять таймер. Если callback вернул true - не восстанавливаем
    -- таймер т.к. это могли сделать в самом callback-е.

    -- 1) Отключаем таймер
    state_mgr.set_state( self.object, self.cur_state_standing, nil, nil, nil )
    -- 2) Вызываем callback
    if
      self.move_cb_info.func(
        self.move_cb_info.obj,
        this.arrival_after_rotation, self.retval_after_rotation, self.last_index
      )
    then
      -- Callback решил перехватить управление перемещением, не
      -- восстанавливаем таймер
      return
    end
    -- Callback не перехватил управление, нужно восстановить таймер:
    local look_pos = self.patrol_look:point( self.last_look_index )
    self:update_standing_state( look_pos, anim_synced_snd )
  end
end


function move_mgr:waypoint_callback( obj, action_type, index )
  if index == -1 or index == nil then
    return
  end
  self.last_index = index
  if self.patrol_walk:terminal( index ) then
    self.at_terminal_waypoint_flag = true
  end

  -- <ЗВУК>
  local suggested_snd = self.path_walk_info[ index ][ "s" ]
  if suggested_snd then
    local snd_prob = self.path_walk_info[ index ][ "sp" ]
    if snd_prob then
      snd_prob = tonumber( snd_prob )
    else
      snd_prob = 100
    end
    if snd_prob == 100 or snd_prob >= math.random( 100 ) then
      xr_sound.set_sound( self.object, suggested_snd )
    else
      xr_sound.set_sound( self.object, nil )
    end
  else
    xr_sound.set_sound( self.object, self.default_sound )
  end
  -- </ЗВУК>

  local suggested_state_moving = self.path_walk_info[ index ][ "a" ]
  if suggested_state_moving then
    self.cur_state_moving = suggested_state_moving
  else
    self.cur_state_moving = self.default_state_moving1
  end

  local retv = self.path_walk_info[ index ][ "ret" ]
  if retv then
    local retv_num = tonumber( retv )
    ASSERT(
      self.move_cb_info,
      "object '%s': path_walk '%s': ret flag is set, but callback function wasn't registered in move_mgr:reset()",
      self.object:name(), self.path_walk
    )
    if
      self.move_cb_info.func(
        self.move_cb_info.obj, this.arrival_before_rotation, retv_num, index
      )
    then
      return
    end
  end

  local sig = self.path_walk_info[ index ][ "sig" ]
  if sig then
    self:scheme_set_signal( sig )
  end

  local stop_probability = self.path_walk_info[ index ][ "p" ]
  if
    ( not self.patrol_look )
    or (
      stop_probability and tonumber( stop_probability ) < math.random( 100 )
    )
  then
    self:update_movement_state() -- идти дальше
    return
  end

  -- Значение флагов точки, которую будем искать:
  local search_for = self.path_walk_info[ index ].flags
  if search_for:get() == 0 then
    self:update_movement_state() -- идти дальше
    return
  end

  local pt_chosen_idx, num_equal_pts = choose_look_point(self.patrol_look, self.path_look_info, search_for)
  if pt_chosen_idx then
    local suggested_anim_set = self.path_look_info[ pt_chosen_idx ][ "a" ]
    if suggested_anim_set then
      self.cur_state_standing = suggested_anim_set
    else
      self.cur_state_standing = self.default_state_standing
    end

    local suggested_wait_time = self.path_look_info[ pt_chosen_idx ][ "t" ]
    if suggested_wait_time then
      if suggested_wait_time == "*" then
        self.pt_wait_time = nil -- -1
      else
        local tm = tonumber( suggested_wait_time )
        ASSERT(
          ( tm and tm >= 1000 and tm <= 30000 ),
          "object '%s': path_look '%s': flag 't': incorrect time specified (* or number in interval [1000, 30000] is expected)",
          self.object:name(), self.path_look
        )
        self.pt_wait_time = tm
      end
    else
      self.pt_wait_time = default_wait_time
    end

    local retv = self.path_look_info[ pt_chosen_idx ][ "ret" ]
    if retv then
      self.retval_after_rotation = tonumber( retv )
    else
      self.retval_after_rotation = nil
    end

    if not suggested_snd then
      -- в path_walk звук не задан, проверить, задан ли он на точке
      suggested_snd = self.path_look_info[ pt_chosen_idx ][ "s" ]
      if suggested_snd then
        local snd_prob = self.path_look_info[ pt_chosen_idx ][ "sp" ]
        if snd_prob then
          snd_prob = tonumber( snd_prob )
        else
          snd_prob = 100
        end
        if snd_prob == 100 or snd_prob >= math.random( 100 ) then
          self.sound_after_anim_start = suggested_snd
        else
          self.sound_after_anim_start = nil
        end
      end
    end

    local look_pos = self.patrol_look:point( pt_chosen_idx )
    self.last_look_index = pt_chosen_idx
    self:update_standing_state( look_pos, self.sound_after_anim_start )
    self.state           = state_standing
    -- Сразу же стартовать update, не ждать execute. Тогда, если мы
    -- уже смотрим в нужную сторону - не будет паузы в несколько
    -- миллисекунд на поворот.
    self:update()
  else
    self.at_terminal_waypoint_flag = true
    return
  end
end
