--[[ ---
File : totalizator.script
 Description    : Тотализатор v. 1.1
 Copyright      : 2010 © Erlik(aka Garry_Galler)
Author : Erlik (aka Garry_Galler)
Last edit : 25.09.2010

Благодарю за помощь в разработке singapur'a22,
--]] -----------------------------------------------------------------------------------------------

function attach(sm)
	sm:subscribe({ signal = "on_update", fun = this.update })
	sm:subscribe({ signal = "on_spawn", fun = this.on_spawn })
	sm:subscribe({ signal = "on_save", fun = this.on_save })
end

local constanta = 60 * 1000
local last_time_info = 0
local last_time_send = 0
local last_time_dolg = 0
local last_time_deposit = 0
local last_time_news = 0
local dolg = 0
local bank = 0
local deposit = 0
local pause = 2
local time_send_prize = 720
local time_send_dolg = constanta * 6
local time_index_dolg = constanta * 6 * 12
local time_index_deposit = constanta * 6 * 24
local Timer_Info
local Timer_News
local gameTime_0
local gameTime_1
local gameTime_2
local text_news = ""

function update()
    timer_infoportion()
    timer_deposit()
    timer_dolg()
    timer_send()
    timer_news()
end

local ts = {
    sums_1 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500,
              500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
              500, 500, 500, 500, 500, -- \ 14 сумм по 500 
    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
              5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 10000,
              10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 15000, 15000, 15000, 15000, 15000,
              15000, 15000, 15000, 15000, 15000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 25000,
              25000, 25000, 25000, 25000, 25000, 25000, 25000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 75000,
              75000, 75000, 75000, 75000, 75000, 100000, 100000, 100000, 100000, 100000, 200000, 200000, 200000, 300000,
              300000, 400000, 500000},

    sums_2 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500,
              500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
              500, 500, 500, 500, 500, -- \ 14 сумм по 500 
    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 5000,
              5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 10000, 10000, 10000,
              10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 15000, 15000, 15000, 15000, 15000, 15000, 15000,
              15000, 15000, 15000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 25000, 25000, 25000,
              25000, 25000, 25000, 25000, 25000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 75000, 75000, 75000,
              75000, 75000, 75000, 100000, 100000, 100000, 100000, 100000, 200000, 200000, 200000, 200000, 300000,
              300000, 400000, 500000},

    sums_3 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500,
              500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
              500, 500, 500, 500, -- \ 14 сумм по 500 
    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 5000, 5000,
              5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 10000, 10000, 10000, 10000, 10000, 10000,
              10000, 10000, 10000, 10000, 10000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000,
              15000, 15000, 15000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 25000, 25000, 25000,
              25000, 25000, 25000, 25000, 25000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 75000, 75000, 75000,
              75000, 75000, 75000, 100000, 100000, 100000, 100000, 100000, 200000, 200000, 200000, 200000, 300000,
              300000, 400000, 500000},

    sums_4 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500, 500,
              500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
              500, 500, 500, -- \ 14 сумм по 500 
    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 5000, 5000, 5000,
              5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 10000, 10000, 10000, 10000, 10000, 10000,
              10000, 10000, 10000, 10000, 10000, 10000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000,
              15000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 25000, 25000, 25000, 25000, 25000,
              25000, 25000, 25000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 75000, 75000, 75000, 75000, 75000,
              75000, 100000, 100000, 100000, 100000, 100000, 200000, 200000, 200000, 200000, 300000, 300000, 300000,
              400000, 400000, 500000},

    sums_5 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500, 500,
              500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
              500, 500, 500, -- \ 14 сумм по 500 
    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 5000, 5000, 5000, 5000,
              5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000,
              10000, 10000, 10000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 20000, 20000,
              20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 25000, 25000, 25000, 25000, 25000, 25000,
              25000, 25000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 75000, 75000, 75000, 75000, 75000, 75000,
              100000, 100000, 100000, 100000, 100000, 200000, 200000, 200000, 200000, 300000, 300000, 300000, 400000,
              400000, 500000},

    sums_6 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500,
              500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
              500, 500, 500, 500, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
              5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 10000, 10000, 10000, 10000,
              10000, 10000, 10000, 10000, 10000, 10000, 10000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000,
              15000, 15000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 25000, 25000, 25000, 25000, 25000,
              25000, 25000, 25000, 25000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 75000, 75000, 75000, 75000,
              75000, 75000, 100000, 100000, 100000, 100000, 100000, 200000, 200000, 200000, 200000, 300000, 300000,
              300000, 400000, 400000, 500000},

    sums_7 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500,
              500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
              500, 500, 500, 500, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 5000,
              5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 10000, 10000, 10000, 10000, 10000,
              10000, 10000, 10000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 20000, 20000,
              20000, 20000, 20000, 20000, 20000, 20000, 20000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000,
              25000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 75000, 75000, 75000, 75000, 75000, 75000, 100000,
              100000, 100000, 100000, 100000, 200000, 200000, 200000, 200000, 300000, 300000, 300000, 400000, 400000,
              500000},

    sums_8 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500,
              500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
              500, 500, 500, 500, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 5000,
              5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 10000, 10000, 10000, 10000, 10000,
              10000, 10000, 10000, 10000, 10000, 10000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000,
              15000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 25000, 25000, 25000, 25000, 25000,
              25000, 25000, 25000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 75000, 75000, 75000, 75000, 75000,
              75000, 100000, 100000, 100000, 100000, 100000, 200000, 200000, 200000, 200000, 300000, 300000, 300000,
              400000, 400000, 500000},

    sums_9 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500,
              500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
              500, 500, 500, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 5000, 5000,
              5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 10000, 10000, 10000, 10000, 10000, 10000,
              10000, 10000, 10000, 10000, 10000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000, 15000,
              20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 25000, 25000, 25000, 25000, 25000, 25000,
              25000, 25000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 75000, 75000, 75000, 75000, 75000, 75000,
              100000, 100000, 100000, 100000, 100000, 200000, 200000, 200000, 200000, 300000, 300000, 300000, 400000,
              400000, 500000},

    -- \ для максимальной ставки уменьшаем число безвыигрышных вариантов и разных мелких выигрышей
    sums_10 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 500,
               500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 1000, 1000, 1000, 1000, 1000,
               1000, 1000, 1000, 1000, 1000, 1000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 10000,
               10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 15000, 15000, 15000, 15000, 15000, 15000,
               15000, 15000, 15000, 15000, 15000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000, 20000,
               25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 50000, 50000, 50000, 50000, 50000, 50000,
               50000, 50000, 75000, 75000, 75000, 75000, 75000, 75000, 75000, 100000, 100000, 100000, 100000, 100000,
               200000, 200000, 200000, 200000, 300000, 300000, 300000, 400000, 400000, 500000}
}

local stavka = {1000, 5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 50000}

local prize = {0, 500, 1000, 5000, 10000, 15000, 20000, 25000, 50000, 75000, 100000, 200000, 300000, 400000, 500000} -- \ С‚Р°Р±Р»РёС†Р° РІСЃРµС… РІС‹РёРіСЂС‹С€РЅС‹С… СЃСѓРјРј

local portion = {"frase_1", "frase_2", "frase_3", "frase_4", "frase_5", "frase_6", "frase_7", "frase_8", "frase_9",
                 "frase_10"}

local type_frase = {game.translate_string("type_frase1"), game.translate_string("type_frase2"),
                    game.translate_string("type_frase3"), game.translate_string("type_frase4"),
                    game.translate_string("type_frase5"), game.translate_string("type_frase6")}

-- \ делаем ставку
function transfer_stavka(npc, actor)
    local money = actor:money()
    for n, s in ipairs(stavka) do
        if actor:has_info("frase_" .. n) then
            if money > 0 and money < s then
                actor:transfer_money(money, npc)
                talk_message(3, money)
                dolg = dolg + (s - money)
                talk_message(4, s - money)
                talk_message(6, dolg)
            elseif money == 0 then
                dolg = dolg + s
                talk_message(4, s)
                talk_message(6, dolg)
            elseif money == s then
                actor:transfer_money(s, npc)
                talk_message(3, s)
                talk_message(6, dolg)
            elseif money > s then
                actor:transfer_money(s, npc)
                talk_message(3, s)
                talk_message(6, dolg)
            end
        end
    end
    this.totalizator(actor, npc)
end

function totalizator(actor, npc)
    local sums
    local summa = 0
    for s, v in ipairs(portion) do
        if actor:has_info(v) then
            sums = ts["sums_" .. s]
            summa = sums[math.random(#sums)]
        end
    end
    for _, v in ipairs(prize) do
        if summa == v then
            bank = summa
            break
        end
    end

    disable_portion()
    if dolg == 0 and bank == 0 then
        text_news = game.translate_string("type_frase_result1")
    elseif dolg == 0 and bank > 0 then
        text_news = game.translate_string("type_frase_result2") .. " " .. tostring(bank) .. " " ..
                        game.translate_string("type_frase_result3")
    elseif dolg > 0 and bank == 0 then
        text_news = game.translate_string("type_frase_result4") .. " " .. tostring(dolg) .. " " ..
                        game.translate_string("type_frase_result5")
    elseif dolg > 0 and bank > 0 then
        if dolg < bank then
            text_news = game.translate_string("type_frase_result6") .. " " .. tostring(bank) .. " " ..
                            game.translate_string("type_frase_result7") .. " " .. tostring(dolg) .. " " ..
                            game.translate_string("type_frase_result8") .. " " .. tostring(bank - dolg) .. " " ..
                            game.translate_string("type_frase_result3")
            bank = bank - dolg
            dolg = 0
        elseif dolg == bank then
            text_news = game.translate_string("type_frase_result9") .. " " .. tostring(bank) .. " " ..
                            game.translate_string("type_frase_result10")
            dolg = 0
            bank = 0
        elseif dolg > bank then
            dolg = dolg - bank
            text_news = game.translate_string("type_frase_result11") .. " " .. tostring(bank) .. " " ..
                            game.translate_string("type_frase_result12") .. " " .. tostring(dolg) .. " " ..
                            game.translate_string("type_frase_result13")
            bank = 0
        end
    end
    start_timer_infoportion(time_send_prize + pause)
end

function give_prize(actor, npc)
    actor:give_money(bank)
    talk_message(1, bank)
    bank = 0
end

function give_dolg(first_speaker, second_speaker)
    db.actor:transfer_money(dolg, second_speaker)
    talk_message(3, dolg)
    dolg = 0
end

function transfer_bank()
    if deposit == 0 then
        deposit = bank
        news_manager.send_tip(db.actor, game.translate_string("transfer_bank1") .. " " .. tostring(deposit), 5,
            "default", 10000)
        talk_message(2, deposit)
        talk_message(5, deposit)
        bank = 0
    elseif deposit > 0 then
        deposit = deposit + bank
        news_manager.send_tip(db.actor,
            game.translate_string("transfer_bank1") .. " " .. tostring(bank) .. " " ..
                game.translate_string("transfer_bank2") .. " " .. tostring(deposit), 5, "default", 10000)
        talk_message(2, bank)
        talk_message(5, deposit)
        bank = 0
    end
end

function transfer_deposit(npc, actor)
    local summa = 0
    local t = {"dep_1", "dep_2", "dep_3"}
    if actor:has_info("dep_1") then
        summa = math.ceil(deposit / 10)
        actor:give_money(summa)
        news_manager.send_tip(db.actor,
            game.translate_string("transfer_deposit1") .. " " .. tostring(summa) ..
                game.translate_string("transfer_deposit2") .. " " .. tostring(deposit - summa), 5, "default", 10000)
        deposit = deposit - summa
        talk_message(1, summa)
        talk_message(5, deposit)
        summa = 0
    elseif actor:has_info("dep_2") then
        summa = math.ceil(deposit / 2)
        actor:give_money(summa)
        news_manager.send_tip(db.actor,
            game.translate_string("transfer_deposit1") .. " " .. tostring(summa) ..
                game.translate_string("transfer_deposit2") .. " " .. tostring(deposit - summa), 5, "default", 10000)
        deposit = deposit - summa
        talk_message(1, summa)
        talk_message(5, deposit)
        summa = 0
    elseif actor:has_info("dep_3") then
        actor:give_money(deposit)
        news_manager.send_tip(db.actor, game.translate_string("transfer_deposit1") .. " " .. tostring(deposit) ..
            game.translate_string("transfer_deposit3"), 5, "default", 10000)
        talk_message(1, deposit)
        deposit = 0
        talk_message(5, deposit)
    end
    for _, v in ipairs(t) do
        if db.actor:has_info(v) then
            db.actor:disable_info_portion(v)
        end
    end
end

function timer_news()
    if text_news and text_news ~= "" then
        if Timer_News == nil then
            if last_time_news ~= 0 then
                Timer_News = time_global() + last_time_news
            else
                Timer_News = time_global() + 1000 * time_send_prize
            end
        end
        last_time_news = Timer_News - time_global()
        if Timer_News < time_global() then
            Timer_News = nil
            last_time_news = 0
            set_message()
        end
    end
end

function start_timer_infoportion(seconds)
    Timer_Info = time_global() + seconds * 1000
end

function timer_infoportion()
    if not Timer_Info then
        if last_time_info ~= 0 then
            Timer_Info = time_global() + last_time_info
        end
    else
        last_time_info = Timer_Info - time_global()
        if Timer_Info < time_global() then
            enable_dialog()
            Timer_Info = nil
            last_time_info = 0
        end
    end
end

function timer_send()
    if dolg ~= 0 then
        if not gameTime_0 then
            if last_time_send ~= 0 then
                gameTime_0 = time_global() + last_time_send
            else
                gameTime_0 = time_global() + time_send_dolg
            end
        end
        last_time_send = gameTime_0 - time_global()
        if gameTime_0 < time_global() then
            send()
            gameTime_0 = nil
            last_time_send = 0
        end
    else
        gameTime_0 = nil
        last_time_send = 0
    end
end

function timer_dolg()
    if dolg ~= 0 then
        if not gameTime_1 then
            if last_time_dolg ~= 0 then
                gameTime_1 = time_global() + last_time_dolg
            else
                gameTime_1 = time_global() + time_index_dolg
            end
        end
        last_time_dolg = gameTime_1 - time_global()
        if gameTime_1 < time_global() then
            percent_dolg()
            gameTime_1 = nil
            last_time_dolg = 0
        end
    else
        gameTime_1 = nil
        last_time_dolg = 0
    end
end

function timer_deposit()
    if deposit ~= 0 then
        if not gameTime_2 then
            if last_time_deposit ~= 0 then
                gameTime_2 = time_global() + last_time_deposit
            else
                gameTime_2 = time_global() + time_index_deposit
            end
        end
        last_time_deposit = gameTime_2 - time_global()
        if gameTime_2 < time_global() then
            percent_deposit()
            gameTime_2 = nil
            last_time_deposit = 0
        end
    else
        gameTime_2 = nil
        last_time_deposit = 0
    end
end

function percent_deposit()
    if deposit == 0 then
        return
    elseif deposit > 0 and deposit < 50000 then
        deposit = math.ceil(deposit + deposit / 100 * math.random(5, 8))
        news_manager.send_tip(db.actor, game.translate_string("deposit_plus") .. " " .. tostring(deposit) .. " " ..
            game.translate_string("descr_rub"), 5, "default", 10000)
    elseif deposit > 50000 and deposit < 100000 then
        deposit = math.ceil(deposit + deposit / 100 * math.random(9, 12))
        news_manager.send_tip(db.actor, game.translate_string("deposit_plus") .. " " .. tostring(deposit) .. " " ..
            game.translate_string("descr_rub"), 5, "default", 10000)
    elseif deposit > 100000 and deposit < 300000 then
        deposit = math.ceil(deposit + deposit / 100 * math.random(13, 15))
        news_manager.send_tip(db.actor, game.translate_string("deposit_plus") .. " " .. tostring(deposit) .. " " ..
            game.translate_string("descr_rub"), 5, "default", 10000)
    elseif deposit > 300000 then
        deposit = math.ceil(deposit + deposit / 100 * math.random(16, 20))
        news_manager.send_tip(db.actor, game.translate_string("deposit_plus") .. " " .. tostring(deposit) .. " " ..
            game.translate_string("descr_rub"), 5, "default", 10000)
    end
end

function percent_dolg()
    if dolg == 0 then
        return
    elseif dolg > 0 and dolg < 50000 then
        dolg = math.ceil(dolg + dolg / 100 * 10)
        news_manager.send_tip(db.actor, game.translate_string("deposit_plus") .. " " .. tostring(dolg) .. " " ..
            game.translate_string("descr_rub"), 5, "default", 10000)
    elseif dolg > 50000 and dolg < 100000 then
        dolg = math.ceil(dolg + dolg / 100 * 30)
        news_manager.send_tip(db.actor, game.translate_string("deposit_plus") .. " " .. tostring(dolg) .. " " ..
            game.translate_string("descr_rub"), 5, "default", 10000)
    elseif dolg > 100000 and dolg < 300000 then
        dolg = math.ceil(dolg + dolg / 100 * 50)
        news_manager.send_tip(db.actor, game.translate_string("deposit_plus") .. " " .. tostring(dolg) .. " " ..
            game.translate_string("descr_rub"), 5, "default", 10000)
    elseif dolg > 300000 then
        dolg = math.ceil(dolg + dolg / 100 * 70)
        news_manager.send_tip(db.actor, game.translate_string("deposit_plus") .. " " .. tostring(dolg) .. " " ..
            game.translate_string("descr_rub"), 5, "default", 10000)
    end
end

function send()
    if dolg == 0 then
        return
    elseif dolg > 5000 and dolg < 30000 then
        news_manager.send_tip(db.actor, "dolg_1", 0, "killer", 5000)
    elseif dolg > 30000 and dolg < 50000 then
        news_manager.send_tip(db.actor, "dolg_2", 0, "killer", 5000)
    elseif dolg > 50000 and dolg < 80000 then
        news_manager.send_tip(db.actor, "dolg_3", 0, "killer", 5000)
    elseif dolg > 80000 and dolg < 110000 then
        news_manager.send_tip(db.actor, "dolg_4", 0, "killer", 5000)
    elseif dolg > 110000 and dolg < 150000 then
        news_manager.send_tip(db.actor, "dolg_5", 0, "killer", 5000)
    elseif dolg > 150000 and dolg < 200000 then
        news_manager.send_tip(db.actor, "dolg_6", 0, "killer", 5000)
    elseif dolg > 200000 and dolg < 300000 then
        news_manager.send_tip(db.actor, "dolg_7", 0, "killer", 5000)
    elseif dolg > 300000 and dolg < 400000 then
        news_manager.send_tip(db.actor, "dolg_8", 0, "killer", 5000)
    elseif dolg > 400000 and dolg < 500000 then
        news_manager.send_tip(db.actor, "dolg_9", 0, "killer", 5000)
    elseif dolg > 500000 then
        news_manager.send_tip(db.actor, "dolg_10", 0, "killer", 5000)
    end
end

function precond()
    return bank > 0
end

function precond_2()
    return bank == 0
end

function precond_3()
    local money = db.actor:money()
    return dolg > 0 and money >= dolg and bank == 0
end

function precond_4()
    return deposit > 0
end

function precond_5()
    return dolg > 100000
end

function precond_6()
    return dolg < 100000
end

function random_dialog()
    local i = math.random(10)
    db.actor:give_info_portion("frase_" .. tostring(i))
end

function talk_message(id, num)
    local task_texture, task_rect
    if id == 3 or id == 4 or id == 6 then
        task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
    else
        task_texture, task_rect = get_texture_info("ui_iconsTotal_found_money")
    end
    db.actor:give_talk_message(type_frase[id] .. " " .. tostring(num) .. " rur.", task_texture, task_rect,
        "actor_iconed_answer_item")
end

function enable_dialog()
    if has_alife_info("totalizator") then
        db.actor:disable_info_portion("totalizator")
    end
end

function disable_portion()
    for k, v in pairs(portion) do
        if db.actor:has_info(v) then
            db.actor:disable_info_portion(v)
        end
    end
end

function set_message()
    if text_news and text_news ~= "" then
        news_manager.send_tip(db.actor, text_news, 0, "default", 15000)
        text_news = ""
    end
end

function SendMessage(text)
    news_manager.send_tip(db.actor, text, 0, "default", 10000)
end

-- // сохранение и загрузка табличных и прочих данных - так как фонарик всегда в онлайне  - очень удобно использовать
function on_save()
    ogse.save_var("totalizator.dolg", dolg)
    ogse.save_var("totalizator.bank", bank)
    ogse.save_var("totalizator.deposit", deposit)
    ogse.save_var("totalizator.last_time_dolg", last_time_dolg)
    ogse.save_var("totalizator.last_time_deposit", last_time_deposit)
    ogse.save_var("totalizator.last_time_send", last_time_send)
    ogse.save_var("totalizator.last_time_info", last_time_info)
    ogse.save_var("totalizator.last_time_news", last_time_news)
    ogse.save_var("totalizator.text_news", text_news)
end

function on_spawn()
    dolg = ogse.load_var("totalizator.dolg", 0)
    bank = ogse.load_var("totalizator.bank", 0)
    deposit = ogse.load_var("totalizator.deposit", 0)
    last_time_dolg = ogse.load_var("totalizator.last_time_dolg", 0)
    last_time_deposit = ogse.load_var("totalizator.last_time_deposit", 0)
    last_time_send = ogse.load_var("totalizator.last_time_send", 0)
    last_time_info = ogse.load_var("totalizator.last_time_info", 0)
    last_time_news = ogse.load_var("totalizator.last_time_news", 0)
    text_news = ogse.load_var("totalizator.text_news", "")
end
