----------------------------------------------------------------------------------------------------
-- Apply directional force to the object
----------------------------------------------------------------------------------------------------
-- Исходный скрипт: Oleg Hryptul (Haron) haronk@ukr.net
----------------------------------------------------------------------------------------------------
local def_vel_x, def_vel_y, def_vel_z = 0.1, 0, 0.1
local def_force_min, def_force_max = 10, 20
local def_duration = 500
local def_bone = "provod"
local def_interval = 300

local state_push, state_interval = 0, 1

----------------------------------------------------------------------------------------------------
-- Class declaration
----------------------------------------------------------------------------------------------------
class "action_impulse"

----------------------------------------------------------------------------------------------------
-- Constructor
----------------------------------------------------------------------------------------------------
function action_impulse:__init(obj, storage)
    self.object = obj
    self.st = storage
end

function action_impulse:reset_scheme()
    self.joint = self.object:get_physics_shell():get_joint_by_bone_name(self.st.bone)
    self.duration = self.st.duration
    self.interval = self.st.interval

    if self.st.force then
        self.force = self.st.force
    else
        self.force = nil
        self.force_min = self.st.force_min
        self.force_max = self.st.force_max
    end

    self.velocity = self.st.velocity

    if self.velocity.x == 0 then
        self.joint:set_max_force_and_velocity(0, 0, 0)
    end

    if self.velocity.y == 0 then
        self.joint:set_max_force_and_velocity(0, 0, 1)
    end

    if self.velocity.z == 0 then
        self.joint:set_max_force_and_velocity(0, 0, 2)
    end

    self.state = state_push
    self.direction = 1
    self:perform_impulse(self.direction)
    self.state_start_time = time_global()
end

function action_impulse:update(delta)
    if xr_logic.try_switch_to_another_section(self.object, self.st, db.actor) then
        return
    end

    local tg = time_global()
    if self.state == state_push then
        if tg > self.state_start_time + self.duration then
            self.joint:set_max_force_and_velocity(0, 0, 0)
            self.joint:set_max_force_and_velocity(0, 0, 1)
            self.joint:set_max_force_and_velocity(0, 0, 2)
            self.state = state_interval
            self.state_start_time = tg
        end
    elseif tg >= self.state_start_time + self.interval then
        self.direction = -self.direction
        self:perform_impulse(self.direction)
        self.state = state_push
        self.state_start_time = tg
    end
end

function action_impulse:perform_impulse(dir)
    local force_x, force_y, force_z = 0, 0, 0

    if self.force then
        force_x = self.force
        force_y = force_x
        force_z = force_x
    else
        force_x = math.random(self.force_min, self.force_max)
        force_y = math.random(self.force_min, self.force_max)
        force_z = math.random(self.force_min, self.force_max)
    end

    if self.velocity.x ~= 0 then
        self.joint:set_max_force_and_velocity(force_x, dir * self.velocity.x, 0)
    end

    if self.velocity.y ~= 0 then
        self.joint:set_max_force_and_velocity(force_y, dir * self.velocity.y, 1)
    end

    if self.velocity.z ~= 0 then
        self.joint:set_max_force_and_velocity(force_z, dir * self.velocity.z, 2)
    end
end

---------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)
    local new_action = action_impulse(npc, storage)
    xr_logic.subscribe_action_for_events(npc, storage, new_action)
end

function set_scheme(npc, ini, scheme, section, gulag_name)
    local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)

    st.logic = xr_logic.cfg_get_switch_conditions(ini, section, npc)

    st.force = get_u32(section, "force", nil, ini)
    if not st.force then
        st.force_min = get_u32(section, "force_min", def_force_min, ini)
        st.force_max = get_u32(section, "force_max", def_force_max, ini)
    end

    local velocity = get_u32(section, "velocity", nil, ini)
    st.velocity = {}
    if velocity then
        st.velocity.x = velocity
        st.velocity.y = velocity
        st.velocity.z = velocity
    else
        st.velocity.x = get_u32(section, "velocity_x", def_vel_x, ini)
        st.velocity.y = get_u32(section, "velocity_y", def_vel_y, ini)
        st.velocity.z = get_u32(section, "velocity_z", def_vel_z, ini)
    end

    st.bone = get_string(section, "bone", def_bone, ini)
    st.duration = get_string(section, "duration", def_duration, ini)
    st.interval = get_string(section, "interval", def_interval, ini)
end
