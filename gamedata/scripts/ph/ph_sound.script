
class "snd_source"
function snd_source:__init(obj, storage)
    self.object = obj
    self.st = storage
    self.destructed = false
end
function snd_source:reset_scheme(loading)
    self.last_update = 0
    self.st.signals = {}
    self.played_sound = nil

    self.first_sound = true
    self.st.pause_time = 0
    self.st.sound_set = true
    if loading == false then
        self.destructed = false
    else
        self.destructed = xr_logic.pstor_retrieve(self.object, "destr")
    end
    self.object:set_nonscript_usable(self.st.nonscript_usable)
end

function snd_source:save()
    xr_logic.pstor_store(self.object, "destr", self.destructed)
end

function snd_source:hit_callback(obj, amount, local_direction, who, bone_index)
    if self.st.no_hit == true then
        return
    end

    local who_name
    if who then
        who_name = who:name()
    else
        who_name = "nil"
    end

    if self.played_sound ~= nil then
        self.played_sound:stop()
        self.played_sound = nil
    end
    self.destructed = true
end

function snd_source:use_callback(obj, actor)
    if self.st.on_use then
        if xr_logic.switch_to_section(self.object, self.st, xr_logic.pick_section_from_condlist(db.actor, self.object,
            self.st.on_use.condlist)) then
            return true
        end
    end
end

function snd_source:update(delta)
    if self.destructed == true then
        return
    end
    if xr_logic.try_switch_to_another_section(self.object, self.st, db.actor) then
        return
    end

    if self.st.pause_time - time_global() > 0 then
        return
    end

    self.st.pause_time = 0
    if self.st.sound_set == true then
        self.st.sound_set = false

        if self.st.snd_object then
            self.played_sound = self.st.snd_object
        elseif self.st.random then
            self.played_sound = xr_sound.get_sound_object(self.st.theme, "random")
        elseif self.st.looped then
            self.played_sound = xr_sound.get_sound_object(self.st.theme, "looped")
        else
            self.played_sound = xr_sound.get_sound_object(self.st.theme, "seq")
        end

        if self.played_sound ~= nil then
            local flags = sound_object.s3d
            if self.st.looped and self.st.snd_object then -- Зациклить звук можно только если он один. А при `looped = true` в секции логики предполагается что xr_sound.get_sound_object должен выбирать звуки из таблицы последовательно (их может быть много)
                flags = flags + sound_object.looped
            end
            self.played_sound:play_at_pos(self.object, self.object:position(), 0, flags)
        else
            self.st.signals["theme_end"] = true
        end
        self.first_sound = false
    end
    if self.played_sound and self.st.volume_control then
        local v = self.st.volume_control(self.object:position(), db.actor:position())
        self.played_sound.volume = v
    end

    if self.last_update == 0 then
        self.last_update = time_global()
    else
        if time_global() - self.last_update > 50 then
            self.last_update = 0
        else
            return
        end
    end

    if self.played_sound ~= nil then
        if self.played_sound:playing() == false then
            if self.first_sound == false then
                self.st.signals["sound_end"] = true
            end

            self.st.sound_set = true
            if self.st.pause_min ~= 0 or self.st.pause_max ~= 0 then
                local time = math.random(self.st.pause_min, self.st.pause_max)
                self.st.pause_time = time_global() + time
            end
            self.first_sound = false
        else
            self.played_sound:set_position(self.object:position())
        end
    end
end

function snd_source:net_destroy()
    if self.played_sound ~= nil then
        self.played_sound:stop()
        self.played_sound = nil
    end
end

function snd_source:deactivate()
    if self.played_sound ~= nil then
        self.played_sound:stop()
        self.played_sound = nil
    end
    if self.st.snd_object then
        self.st.snd_object = nil
    end
    self.object:set_tip_text("")
end

function add_to_binder(npc, ini, scheme, section, storage)
    local new_action = snd_source(npc, storage)
    -- Зарегистрировать все actions, в которых должен быть вызван метод reset_scheme при изменении настроек схемы:
    xr_logic.subscribe_action_for_events(npc, storage, new_action)

end

function set_scheme(npc, ini, scheme, section, gulag_name)
    local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
    st.logic = xr_logic.cfg_get_switch_conditions(ini, section, npc)
    st.theme = get_string(section, "snd", nil, ini)
    st.looped = get_bool(section, "looped", false, ini)
    st.random = get_bool(section, "random", true, ini)
    st.pause_min = get_u32(section, "min_idle", 0, ini)
    st.pause_max = get_u32(section, "max_idle", 0, ini)
    st.no_hit = get_bool(section, "no_hit", true, ini)
    st.nonscript_usable = get_bool(section, "nonscript_usable", false, ini)
    st.on_use = xr_logic.cfg_get_condlist(ini, section, "on_use", npc)
    st.tips = get_string(section, "tips", "", ini)
    local fname = get_string(section, "volume_control", nil, ini)
    -- log3("zone_name=%s", fname)
    if type(xr_effects[fname]) == "function" then
        -- log1("exist")
        st.volume_control = xr_effects[fname]
    end
    if st.pause_max < st.pause_min then
        abort("PH_SOUND - invalid time range !!!")
    end
    st.snd_object = get_string(section, "snd_object", nil, ini)
    if st.snd_object then
        st.snd_object = sound_object(st.snd_object)
    end
    npc:set_tip_text(st.tips)
end
