-- -*- mode: lua; coding: windows-1251-dos -*-

-------------------------------------------------------------------------------------
-- Зоны пси-излучения. Отыгрывают постпроцесс и фантомов по настройкам из custom_data
-------------------------------------------------------------------------------------
-- KRodin © 2016: переделал весь скрипт, исправил ошибки, оптимизировал.
-------------------------------------------------------------------------------------

psy_antenna = nil

local psy_emitters_active = {} --Здесь хранятся имена пси-зон, внутри которых находится актор.
local effectors = {} --Здесь хранятся данные активных эффекторов
local subscribed = nil

class "PsyAntenna" --TODO: избавиться от класса.
function PsyAntenna:__init()
	self.sm = ogsr_signals.get_mgr()
-------------------------------------[НАСТРОЙКИ]-------------------------------------
	self.phantom_max 				= 8 --10 -- Максимальное кол-во фантомов
	self.phantom_spawn_radius		= 30 -- Макс. расстояние от актора, на котором могут спавниться фантомы
	self.phantom_fov				= 45 -- ширина сектора перед глазами актёра, в котором могут рождаться фантомы
	self.sound_obj_right, self.sound_obj_left = xr_sound.get_sound_object("psy_voices") --Звуки в голове
	self.sound_obj_left.volume		= self.sound_intensity --Громкость звуков
	self.sound_obj_right.volume		= self.sound_intensity --Громкость звуков
	self.snd_volume					= level.get_snd_volume() --Нужно для корректного восстановления уровня громкости при отключении схемы.
-------------------------------------------------------------------------------------
--Параметры ниже читаются из кастомдаты
	self.hit_intensity				= 0 --Интенсивность хита.
	self.phantom_spawn_probability	= 0	--Вероятность спавна фантомов (0..1)
	self.sound_intensity			= 0 --Интенсивность звуковых эффектов.
	self.mute_sound_threshold		= 0 --Предел до которого можно занижать звук уровня. 0 - можно заглушить полностью.
end

function PsyAntenna:unsubscribe()
	if get_hud():GetCustomStatic("cs_psy_danger") then
		get_hud():RemoveCustomStatic("cs_psy_danger") --Удаляем с худа предупреждение
	end
	if self.sound_obj_left:playing() then
		--log1("~~sound l stop!")
		self.sound_obj_left:stop() --Останавливаем звуки в голове
	end
	if self.sound_obj_right:playing() then
		--log1("~~sound r stop!")
		self.sound_obj_right:stop()
	end
	level.set_snd_volume(self.snd_volume) --Возвращаем нормальную громкость
	--log3("~~Sound volume after unsubscribe: %s", level.get_snd_volume())

	self.sm:unsubscribe( subscribed ) --Отписываемся от апдейта
	subscribed = nil
	sr_psy_antenna.psy_antenna = nil --НЕ УДАЛЯТЬ!
	--log2( "~~[%s]: unsubscribed from update", script_name() )
end

function PsyAntenna:subscribe()
	subscribed = { signal = "on_update", self = self, fun = self.update }
	self.sm:subscribe( subscribed ) --Подписываемся на апдейт
	sr_psy_antenna.psy_antenna = self --НЕ УДАЛЯТЬ!
	--log2( "--[%s]: subscribed on update", script_name() )
end

function PsyAntenna:update_psy_hit()
	local hud = get_hud()
	local custom_static = hud:GetCustomStatic("cs_psy_danger")
	if self.hit_intensity > 0.01 then
		if not custom_static then
			hud:AddCustomStatic("cs_psy_danger", true)
			hud:GetCustomStatic("cs_psy_danger"):wnd():SetTextST("st_psy_danger")
		end
	else
		if custom_static then
			hud:RemoveCustomStatic("cs_psy_danger")
		end
	end
	if not self.hit_time or time_global() - self.hit_time > 5000 then
		self.hit_time = time_global()
		if self.hit_intensity > 0.01 then
			local psy_hit = hit()
			psy_hit.power = self.hit_intensity
			psy_hit.direction = vector():set( 0, 0, 0 )
			psy_hit.impulse = 0
			psy_hit.draftsman = db.actor
			psy_hit.type = hit.telepatic
			db.actor:hit(psy_hit)
		end
	end
end

function PsyAntenna:generate_phantoms()
	if not self.phantom_time or time_global() - self.phantom_time > self.phantom_idle then
		self.phantom_time = time_global()
		self.phantom_idle = math.random(2000,5000)
		if math.random() < self.phantom_spawn_probability then
			if phantom_manager:phantom_count() < self.phantom_max then
				local radius = self.phantom_spawn_radius * ( math.random()/2.0+0.5 )
				local ang = self.phantom_fov * math.random() - self.phantom_fov * 0.5
				local dir = vector_rotate_y( db.actor:direction(), ang )

				phantom_manager.spawn_phantom( db.actor:position():add( dir:mul(radius) ) )
			end
		end
	end
end

function PsyAntenna:update_sound() --TODO: перенести в zone_enter/leave
	if not self.sound_initialized then
		self.sound_obj_left:play_at_pos(db.actor, vector():set(-1, 0, 1), 0, sound_object.s2d + sound_object.looped)
		self.sound_obj_right:play_at_pos(db.actor, vector():set( 1, 0, 1), 0, sound_object.s2d + sound_object.looped)
		self.sound_initialized = true
	end

	--log3("--Snd Intensity: %s", self.sound_intensity)
	local vol = 1 - ( self.sound_intensity ^ 3 ) * 0.9
	if vol < self.mute_sound_threshold then
		level.set_snd_volume( self.mute_sound_threshold )
	else
		level.set_snd_volume( vol )
	end
	--log3("--Sound volume: %s", level.get_snd_volume())

	self.sound_obj_left.volume  = 1 / vol - 1
	self.sound_obj_right.volume = 1 / vol - 1
end

function PsyAntenna:update()
	self.sm:reschedule( math.random(900, 1100) ) --Раз в секунду достаточно
	self:generate_phantoms()
	self:update_sound()
	self:update_psy_hit()
end


----------------------------------------------------------------------------------------------------
-- логическая схема для space restrictor
----------------------------------------------------------------------------------------------------
class "action_psy_antenna"
function action_psy_antenna:__init( obj, storage )
	self.object = obj
	self.st = storage
end

function action_psy_antenna:reset_scheme() --Вызывается ПОСЛЕ изменения настроек схемы, или после включения схемы.
	self:zone_leave()
	self:switch_state()
end

function action_psy_antenna:deactivate() --Вызывается при ПЕРЕД изменением настроек схемы / при переключении на другую схему.
	self:zone_leave()
end

function action_psy_antenna:net_destroy() --Вызывается при удалении объекта / переходе в оффлайн.
	self:zone_leave()
end

function action_psy_antenna:update() -- bind_restrictor.actor_update()
	if xr_logic.try_switch_to_another_section( self.object, self.st, db.actor ) then
		return
	end

	self:switch_state()
end

function action_psy_antenna:switch_state()
	if self.object:inside( db.actor:position() ) then --Если актор находится в зоне действия рестриктора
		self:zone_enter()
	else --В противном случае
		self:zone_leave()
	end
end

function action_psy_antenna:zone_enter() --Действие по факту входа в зону действия рестриктора
	if psy_emitters_active[self.object:name()] then return end --Если рестриктор уже есть в таблице - дальше делать нечего.

	psy_emitters_active[self.object:name()] = true --Добавляем рестриктор в таблицу
	self:check_subscribe() --Если надо, подписываемся на апдейт

	psy_antenna.sound_intensity				= psy_antenna.sound_intensity + self.st.intensity
	psy_antenna.mute_sound_threshold		= psy_antenna.mute_sound_threshold + self.st.mute_sound_threshold
	psy_antenna.hit_intensity				= psy_antenna.hit_intensity + self.st.hit_intensity
	psy_antenna.phantom_spawn_probability	= psy_antenna.phantom_spawn_probability + self.st.phantom_prob

	local pp = self.st.postprocess
	if pp ~= "nil" then
		if not effectors[pp] then --Если эффектора нет в табице
			local new_idx = nil
			repeat --Поиск свободного id для эффектора. Да, это громоздкий способ, но другого в голову не пришло(
				new_idx = math.random(1601, 1699)
				for _, v in pairs(effectors) do
					if v.idx == new_idx then
						new_idx = nil
						break
					end
				end
			until new_idx ~= nil
			effectors[pp] = { intensity = self.st.intensity, idx = new_idx } --Добавляем эффектор в таблицу
			level.add_pp_effector(pp, effectors[pp].idx, true) --Запускаем его
			--log3("--[action_psy_antenna:zone_enter] Add_pp_effector: %s %s", pp, effectors[pp])
		else --Если такой же эффектор уже есть в таблице
			effectors[pp].intensity = effectors[pp].intensity + self.st.intensity --Просто добавим ему интенсивности
		end
		level.set_pp_effector_factor(effectors[pp].idx, effectors[pp].intensity) --Тут устанавливаем интенсивность эффектора
		--log3("--[action_psy_antenna:zone_enter] Set Intensity for: %s %s", pp, effectors[pp])
	end
end

function action_psy_antenna:zone_leave() --Действие по факту выхода из зоны действия рестриктора, или при удалении/отключении рестриктора
	if not psy_emitters_active[self.object:name()] then return end --Если рестриктора уже нет в таблице - дальше делать нечего.
	
	psy_emitters_active[self.object:name()] = nil --Удаляем рестриктор из таблицы
	if not psy_antenna then return end --Если условие не истинно - дальше делать нечего

	psy_antenna.sound_intensity				= psy_antenna.sound_intensity - self.st.intensity
	psy_antenna.mute_sound_threshold		= psy_antenna.mute_sound_threshold - self.st.mute_sound_threshold
	psy_antenna.hit_intensity				= psy_antenna.hit_intensity  - self.st.hit_intensity
	psy_antenna.phantom_spawn_probability	= psy_antenna.phantom_spawn_probability - self.st.phantom_prob

	local pp = self.st.postprocess
	if pp ~= "nil" then
		if effectors[pp] then --Если эффектор есть в таблице
			effectors[pp].intensity = effectors[pp].intensity - self.st.intensity --Убавляем ему интенсивность
			--log3("~~[action_psy_antenna:zone_leave] Set Intensity for: %s %s", pp, effectors[pp])
			if effectors[pp].intensity <= 0 then --Если полученная интенсивность <= 0 , то:
				level.remove_pp_effector(effectors[pp].idx) --Останавливаем эффектор, больше он не нужен
				--log3("~~[action_psy_antenna:zone_leave] Remove_pp_effector: %s %s", pp, effectors[pp])
				effectors[pp] = nil --И удаляем его из таблицы
			else --Если интенсивность > 0 , то:
				level.set_pp_effector_factor(effectors[pp].idx, effectors[pp].intensity) --Устанавливаем эту интенсивность эффектора.
			end
		end
	end

	self:check_subscribe() --Если надо, отписываемся от апдейта
end

function action_psy_antenna:check_subscribe()
	if next(psy_emitters_active) == nil then --Если таблица psy_emitters_active пуста
		if subscribed then --И скрипт подписан на апдейт
			psy_antenna:unsubscribe() --Отписываемся от апдейта
		end
	else --Если в таблице что-то есть
		if not subscribed then --И скрипт ещё не подписался на апдейт
			PsyAntenna():subscribe() --Подписываемся на апдейт
		end
	end
end


-----------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)
	local new_action = action_psy_antenna(npc, storage)
	-- Зарегистрировать все actions, в которых должен быть вызван метод reset_scheme при изменении настроек схемы:
	xr_logic.subscribe_action_for_events(npc, storage, new_action)
end

function set_scheme(npc, ini, scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, npc)

	st.intensity = get_float(section, "eff_intensity", 0, ini) * 0.01
	st.postprocess = get_string(section, "postprocess", "psy_antenna.ppe", ini)
	st.hit_intensity = get_float(section, "hit_intensity", 0, ini) * 0.01
	st.phantom_prob  = get_float(section, "phantom_prob", 0, ini) * 0.01
	st.mute_sound_threshold = get_float(section, "mute_sound_threshold", 0, ini)
end
