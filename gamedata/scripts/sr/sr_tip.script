----------------------------------------------------------------------------------------------------
-- Do nothing
----------------------------------------------------------------------------------------------------

class "action_tip"

function action_tip:__init(obj, storage)
    self.object = obj
    self.st = storage
end

function action_tip:reset_scheme()
    self.st.tips_sended = false
    self.st.signals = {}
end

function action_tip:update(delta)

    -- if not xr_logic.is_active(self.object, self.st) then
    --	return
    -- end

    local actor = db.actor
    if not actor then
        return
    end

    if self.object:inside(actor:position()) then
        if self.st.conditions == nil or xr_logic.pick_section_from_condlist(actor, nil, self.st.conditions.condlist) ~=
            nil then
            if self.st.tips_sended == false then
                -- '			   if self.st.type == "tips" then
                news_manager.send_tip(actor, self.st.info, self.st.timeout, self.st.sender, self.st.showtime)
                -- '			   elseif self.st.type == "news" then
                -- '				  news_manager.send_news( actor, self.st.info, self.st.timeout, self.st.showtime )
                -- '			   end
                if self.st.single == true then
                    self.st.signals["tip_sended"] = true
                    self.st.tips_sended = true
                end
            end
        end
    end

    if xr_logic.try_switch_to_another_section(self.object, self.st, actor) then
        return
    end
end

---------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)

    local new_action = action_tip(npc, storage)

    -- Зарегистрировать все actions, в которых должен быть вызван метод reset_scheme при изменении настроек схемы:
    xr_logic.subscribe_action_for_events(npc, storage, new_action)
end

function set_scheme(obj, ini, scheme, section, gulag_name)
    local st = xr_logic.assign_storage_and_bind(obj, ini, scheme, section)
    st.logic = xr_logic.cfg_get_switch_conditions(ini, section, obj)

    st.info = get_string(section, "name", "", ini)
    st.type = get_string(section, "type", "news", ini)
    st.sender = get_string(section, "sender", nil, ini)
    st.timeout = get_u32(section, "timeout", nil, ini)
    st.showtime = get_u32(section, "showtime", nil, ini)
    st.single = get_bool(section, "single", false, ini)

    st.conditions = xr_logic.cfg_get_condlist(ini, section, "cond", obj)
end

