-- -*- mode: lua; coding: windows-1251-dos -*-
function attach( sm )
    sm:subscribe({ signal = "on_destroy",   fun = this.on_destroy   })
    sm:subscribe({ signal = "on_npc_death", fun = this.on_death     })
    sm:subscribe({ signal = "on_npc_spawn", fun = this.on_npc_spawn })
end

function on_npc_spawn(obj, binder)
    if not obj:alive() then
        return
    end
    local s = {
        ["signal"] = "on_npc_update." .. obj:id(),
        ["fun"] = this.on_update
    }
    binder["sr_light.subscribed"] = s
    ogsr_signals.get_mgr():subscribe(s)
end

function on_update(obj)
    ogsr_signals.get_mgr():reschedule(math.random(6000, 12000))
    check_light(obj)
end

function on_death(obj)
    local binder = obj:binded_object()
    local subscribed = binder["sr_light.subscribed"]
    if subscribed then
        ogsr_signals.get_mgr():unsubscribe(subscribed)
    end
    check_light(obj)
end

function on_destroy()
    clean_up()
end

local light_zones = {}

class "action_light"
function action_light:__init(obj, storage)
    self.object = obj
    self.st = storage
    self.active = false
    self.id = obj:id()
end

function action_light:reset_scheme()
    light_zones[self.id] = self
end

function action_light:update(delta)
    local actor = db.actor
    if xr_logic.try_switch_to_another_section(self.object, self.st, actor) then
        self.active = false
        self.stalkers = {}
        light_zones[self.id] = nil
        return
    end
    self.active = true
end

function action_light:check_stalker(stalker)
    if self.active == false then
        return false, false
    end
    if stalker and self.object:inside(stalker:position()) then
        return self.st.light, true
    end
    return false, false
end

function add_to_binder(npc, ini, scheme, section, storage)
    local new_action = action_light(npc, storage)
    xr_logic.subscribe_action_for_events(npc, storage, new_action)
end

function set_scheme(npc, ini, scheme, section, gulag_name)
    local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
    st.logic = xr_logic.cfg_get_switch_conditions(ini, section, npc)
    st.light = get_bool(section, "light_on", false, ini)
end

function check_light(stalker)
    if not stalker then
        return
    end

    local torch = stalker:object("device_torch")
    if not torch then
        return
    end
    local light = false
    local forced = false

    if stalker:alive() == false then
        light = false
        forced = true
    end

    -- ' Проверка по лайтзонам
    if not forced then
        for k, v in pairs(light_zones) do
            light, forced = v:check_stalker(stalker)
            if forced == true then
                break
            end
        end
    end

    local weather = dsh_cop_weather.monitoring_weather_sect
    if not forced then
        -- ' Проверка по времени суток (ночью всегда включено)
        local htime = level.get_time_hours()
        if htime then
            if (htime <= 5 or htime >= 20) or (weather and weather == "storm") then
                light = true
            else
                light = false
            end
        end

        -- ' Проверка на индор-аутдор (внутри всегда включено)
        if light == false then
            if isIndoor(level.name()) then
                light = true
            end
        end
    end

    -- ' Проверка по активному действию
    if not forced and light == true then
        -- ' Фонарики должны быть выключены у костра
        local scheme = db.storage[stalker:id()].active_scheme
        if scheme == "kamp" or scheme == "camper" then
            light = false
            forced = true
        end
    end

    if light ~= nil then
        torch:enable_attachable_item(light)
    end
end

function clean_up()
    light_zones = {}
end
