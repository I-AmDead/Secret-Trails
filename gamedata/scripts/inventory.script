-- -*- mode: lua; coding: windows-1251-dos -*-
function attach(sm)
    sm:subscribe({signal = "on_spawn", fun = this.on_spawn})
end

function on_spawn()
    dsh.exec_on_update(this.on_first_update)
end

function on_first_update()
    rescan_belt()
    local sm = ogsr_signals.get_mgr()
    sm:subscribe({ signal = "on_drop",         fun = this.on_belt_drop    })
    sm:subscribe({ signal = "on_item_to_belt", fun = this.on_item_to_belt })
    sm:subscribe({ signal = "on_item_to_ruck", fun = this.on_belt_drop    })
    sm:subscribe({ signal = "on_item_to_slot", fun = this.on_belt_drop    })
  end

function on_item_to_belt(obj)
    rescan_belt()
    ogsr_signals.get_mgr():call("on_belt_change")
end

local belt = {}
local belt_id = {}
local belt_obj = {}

local hit_immunities = {
    ["burn_immunity"] = 0,
    ["strike_immunity"] = 0,
    ["shock_immunity"] = 0,
    ["wound_immunity"] = 0,
    ["radiation_immunity"] = 0,
    ["telepatic_immunity"] = 0,
    ["chemical_burn_immunity"] = 0,
    ["explosion_immunity"] = 0,
    ["fire_wound_immunity"] = 0
}

local af_restore_speeds = {
    ["additional_inventory_weight"] = 0,
    ["additional_inventory_weight2"] = 0,
    ["bleeding_restore_speed"] = 0,
    ["health_restore_speed"] = 0,
    ["power_restore_speed"] = 0,
    ["psy_health_restore_speed"] = 0,
    ["radiation_restore_speed"] = 0,
    ["satiety_restore_speed"] = 0
}
local af_restore_speeds_neg = {}
local af_restore_speeds_pos = {}

function rescan_belt()
    for k, _ in pairs(hit_immunities) do
        hit_immunities[k] = 0
    end
    for k, _ in pairs(af_restore_speeds) do
        af_restore_speeds[k] = 0
        af_restore_speeds_neg[k] = false
        af_restore_speeds_pos[k] = false
    end
    belt = {}
    belt_id = {}
    belt_obj = {}
    for i = 0, db.actor:belt_count() - 1 do
        local item = db.actor:item_on_belt(i)
        local sect = item:section()
        belt[sect] = (belt[sect] or 0) + 1
        belt_id[item:id()] = true
        if not belt_obj[sect] then
            belt_obj[sect] = {}
        end
        table.insert(belt_obj[sect], item)
        if item:condition() > 0 then
            local props = get_af_props(sect)
            for k, total in pairs(hit_immunities) do
                hit_immunities[k] = total + props[k]
            end
            for k, total in pairs(af_restore_speeds) do
                local v = props[k]
                af_restore_speeds[k] = total + v
                if v > 0 then
                    af_restore_speeds_pos[k] = (af_restore_speeds_pos[k] or 0) + v
                elseif v < 0 then
                    af_restore_speeds_neg[k] = (af_restore_speeds_neg[k] or 0) + math.abs(v)
                end
            end
        end
    end
end

local cached_props = {}
function get_af_props(sect)
    if not cached_props[sect] then
        local t = {}
        local imm_sect = get_string(sect, "hit_absorbation_sect")
        for k, _ in pairs(hit_immunities) do
            if imm_sect then
                t[k] = 1 - get_float(imm_sect, k, 1)
            else
                t[k] = 0
            end
        end
        for k, _ in pairs(af_restore_speeds) do
            t[k] = get_float(sect, k, 0)
        end
        cached_props[sect] = t
    end
    return cached_props[sect]
end

function on_belt_drop(item)
    if belt_id[item:id()] then
        rescan_belt()
        ogsr_signals.get_mgr():call("on_belt_change")
    end
end

function on_belt_hit_immunity(sect)
    return hit_immunities[sect] or 0
end

function on_belt_restore_speed(k)
    return af_restore_speeds[k] or 0
end
function on_belt_restore_speed_neg(k)
    return af_restore_speeds_neg[k]
end
function on_belt_restore_speed_pos(k)
    return af_restore_speeds_pos[k]
end

function on_belt(sect)
    return belt[sect]
end

function items_on_belt()
    local count = 0
    for k, v in pairs(belt) do
        count = count + v
    end
    return count
end

function on_belt_obj(sect)
    return belt_obj[sect]
end
