-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  sm:subscribe({ signal = "on_take", fun = this.on_take })
end

function on_take( obj )
  have_a_fire_kolobok()
  have_a_trubki()
  have_a_manometr()
  have_a_vodko()
  have_a_gorelka()
end


function remove_spot()
  for a, obj in alife():objects() do
    if obj.parent_id == 65535 then
      if obj:section_name() == "trubka" then
        level.map_remove_object_spot( obj.id, "red_location" )
        break
      end
    end
  end
  if db.actor:dont_has_info( "find_815" ) then
    remove_metka_na_npc()
  end
end


function good_bye(first_speaker, second_speaker)
  amk_utils.out_items_number({
      [ "af_fireball" ] =  1,
      [ "trubka"      ] =  1,
      [ "gorelka"     ] =  1,
      [ "manometr"    ] =  1,
      [ "vodka"       ] = 10,
      [ "flamethrower_bad" ] = 1,
  })
end

function have_n_items( section, number )
  return amk_utils.inventory_search(section, number)
end

function have_10_vodka()
  return amk_utils.inventory_search( "vodka", 10 )
end

function have_bablo()
  return db.actor:money() >= 25000
end

function give_flamethrower_worked( first_speaker, second_speaker )
  local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
  dialogs.relocate_item_section( trader, "wpn_flame", "in" )
  dialogs.relocate_money( trader, 25000, "out" )
end


function clear_parts( first_speaker, second_speaker )
  local actor, trader
  if db.actor and db.actor:id() == first_speaker:id() then
    actor = first_speaker
    trader = second_speaker
  else
    actor = second_speaker
    trader = first_speaker
  end
  local obj = trader:object( "manometr" )
  if obj ~= nil then
    alife():release( alife():object( obj:id() ), true )
  end
  obj = trader:object( "trubka" )
  if obj ~= nil then
    alife():release( alife():object( obj:id() ), true )
  end
  obj = trader:object( "gorelka" )
  if obj ~= nil then
    alife():release( alife():object( obj:id() ), true )
  end
  obj = trader:object( "flamethrower_bad" )
  if obj ~= nil then
    alife():release( alife():object( obj:id() ), true )
  end
  obj = trader:object( "af_fireball" )
  if obj ~= nil then
    alife():release( alife():object( obj:id() ), true )
  end
end


function clear_fuel()
end


function spawn_parts()
  alife():create(
    "manometr", vector():set( -146.01, 6.04, -201.16 ), 91750, 621
  )
  alife():create(
    "trubka", vector():set( -57.36, 22.54, -120.73 ), 118492, 298
  )
  alife():create(
    "gorelka", vector():set( -79.62, -10.69, 39.95 ), 233164, 1595
  )
end


function set_metka()
  remove_metka_na_npc()
  for a, sobj in alife():objects() do
    if sobj.parent_id == 65535 then
      if sobj:section_name() == "trubka" then
        level.map_add_object_spot( sobj.id, "red_location", "Трубка" )
    return
   end
  end
 end
end


function relocate_to_barman( first_speaker, second_speaker )
  dialogs.relocate_item_section( second_speaker, "gorelka", "in" )
  dialogs.relocate_money( second_speaker, 250, "out" )
end


function out_antirad( first_speaker, second_speaker )
  amk_utils.out_items_number({
    [ "antirad" ] = 1,
  })
end


function transfer_deneg_blockpost( first_speaker, second_speaker )
  dialogs.relocate_money( second_speaker, 5000, "in" )
end


function give_flamethrower( first_speaker, second_speaker )
  dialogs.relocate_item_section( second_speaker, "flamethrower_bad", "in" )
end


function have_a_flamethrower_bad( stalker, player )
  return amk_utils.inventory_search( "flamethrower_bad", 1 )
end


function give_1000( first_speaker, second_speaker )
  dialogs.relocate_money( second_speaker, 1000, "in" )
end


function have_a_antirad( stalker, player )
  return amk_utils.inventory_search( "antirad", 1 )
end


function out_flamethrower( first_speaker, second_speaker )
  dialogs.relocate_item_section( first_speaker, "flamethrower_bad", "out" )
  dialogs.relocate_money( second_speaker, 2500, "in" )
end


function have_a_fire_kolobok()
  local actor = db.actor
  if
    actor:dont_has_info( "flamethrower_quest_fireball" )
    and actor:has_info( "flamethrower_quest_start" )
    and amk_utils.inventory_search( "af_fireball", 1 )
  then
    actor:give_info_portion( "flamethrower_quest_fireball" )
  end
end


function have_a_trubki()
  local actor = db.actor
  if actor:dont_has_info( "flamethrower_quest_trubki" ) then
    if amk_utils.inventory_search( "trubka", 1 ) then
      actor:give_info_portion( "flamethrower_quest_trubki" )
    end
  end
end


function have_a_manometr()
  local actor = db.actor
  if
    actor:dont_has_info("flamethrower_quest_manometr")
    and amk_utils.inventory_search( "manometr", 1 )
  then
    actor:give_info_portion( "flamethrower_quest_manometr" )
  end
end


function have_a_vodko()
  local actor = db.actor
  if actor:has_info( "flamethrower_quest_start" ) then
    if amk_utils.inventory_search( "vodka", 10 ) then
      actor:give_info_portion( "flamethrower_quest_vodka" )
    else
      actor:disable_info_portion( "flamethrower_quest_vodka" )
    end
  end
end


function have_a_gorelka()
  local actor = db.actor
  if
    actor:dont_has_info( "flamethrower_quest_gorelka" )
    and amk_utils.inventory_search( "gorelka", 1 )
  then
    actor:give_info_portion( "flamethrower_quest_gorelka" )
  end
end


function have_a_gorelka2( stalker, player )
  return amk_utils.inventory_search( "gorelka", 1 )
end


function have_a_manometr2(stalker, player)
  return amk_utils.inventory_search( "manometr", 1 )
end


function have_a_trubka2(stalker, player)
  return amk_utils.inventory_search( "trubka", 1 )
end


function have_a_af_fireball(stalker, player)
  return amk_utils.inventory_search( "af_fireball", 1 )
end


function have_a_drink()
  return amk_utils.inventory_search( "vodka", 1 )
end


function have_a_fuel()
  return have_a_ballon() and have_a_kanistra()
end


function have_30000()
  if db.actor and db.actor:money() >= 30000 then
    return true
  else
    return false
  end
end


function have_2000()
  if db.actor and db.actor:money() >= 2000 then
    return true
  else
    return false
  end
end


function have_a_ballon()
  return amk_utils.inventory_search( "amk_ballon", 1 )
end


function have_a_kanistra()
  return amk_utils.inventory_search( "amk_kanistra", 1 )
end


function have_a_flamethrower()
  return amk_utils.inventory_search( "wpn_flame", 1 )
end


function metka_na_npc()
  local sobj = dsh.create_free_mob(
    "gar_stalker_flame_quest23",
    vector():set( 24.86, 0.40, 209.75 ), 198510, 359
  )
  new_spawn.assing_cd_and_sid(
    sobj,
    "[smart_terrains]\n"
    .. "none = true\n" ..
    "[logic]\n"
    .. "active = walker\ncombat_ignore = combat_ignore\n" ..
    "[walker]\n"
    .. "path_walk = garb_tambovski_path\n"
    .. "path_look = garb_tambovski_look\n"
    .. "on_info = {+find_815} nil\n"
    .. "combat_ignore_cond = {=dist_to_enemy_ge(15)}\n",
    story_ids.gar_stalker_flame_quest23
  )
  level.map_add_object_spot_ser( sobj.id, "green_location", "Лёха Тамбовский" )
end


function remove_metka_na_npc()
  local sobj = alife():story_object( story_ids.gar_stalker_flame_quest23 ) -- 481516
  if sobj then
    level.map_remove_object_spot( sobj.id, "green_location" )
    local pk = get_netpk( sobj, 1 )
    ASSERT( pk:isOk(), "can't read netpacket of %s", sobj:name() )
    local data = pk:get()
    data.custom_data:setTable( {} )
    data.story_id = -1
    pk:set( data )
  end
end


function start_work()
  ogse_st_mgr.start_gtimer(
    "flamethrower.start_work",
    24 * 3600, "flamethrower.work_done",
    "flame_start"
  )
  ogse.save_var( "flamethrower.flame_start", true, "bool" )
end


function work_done( k )
  ogse.save_var( "flamethrower." .. k, false, "bool" )
end


function is_ready()
  return ogse.load_var_safe( "flamethrower.flame_start" ) == false
end


function not_ready()
  return ogse.load_var_safe( "flamethrower.flame_start" ) == true
end


function clear_ready()
  ogse.delete_var( "flamethrower.flame_start" )
  amk.del_variable( "flame_start" )
end


function start_reload( first_speaker, second_speaker )
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
  dialogs.relocate_money( trader, 2000, "out" )
  amk_utils.out_items_number({
    [ "vodka"     ] = 1,
    [ "wpn_flame" ] = 1,
  })
  ogse_st_mgr.start_gtimer(
    "flamethrower.start_work",
    30 * 60, "flamethrower.work_done",
    "flame_reload"
  )
  ogse.save_var( "flamethrower.flame_reload", true, "bool" )
  calc_reload()
  clear_flame( actor )
end


function start_find_and_reload()
  dsh.actor_give_art_modif_bio()
  amk_utils.out_items_number({
    [ "vodka"     ] = 1,
    [ "wpn_flame" ] = 1,
  })
  ogse_st_mgr.start_gtimer(
    "flamethrower.start_work",
    math.random( 12, 24 ) * 3600, "flamethrower.work_done",
    "flame_reload"
  )
  ogse.save_var( "flamethrower.flame_reload", true, "bool" )
  clear_flame( actor )
end


function is_reload_ready( first_speaker, second_speaker )
  return ogse.load_var_safe( "flamethrower.flame_reload" ) == false
end


function is_reload_not_ready()
  return ogse.load_var_safe( "flamethrower.flame_reload" ) == true
end


function is_reload_started( first_speaker, second_speaker )
  return ogse.load_var_safe( "flamethrower.flame_reload" ) ~= nil
end


function finish_reload( first_speaker, second_speaker )
  reload( first_speaker, second_speaker )
  -- clear_fuel( first_speaker, second_speaker )
  clear_reload( first_speaker, second_speaker )
end


function clear_reload( first_speaker, second_speaker )
  ogse.delete_var( "flamethrower.flame_reload" )
  ogse.delete_var( "flamethrower.flame_reload_count" )
  amk.del_variable( "flame_reload" )
  amk.del_variable( "flame_reload_count" )
end


function relocate_n_items_section( victim, section, type, n )
  if db.actor and victim then
    if type == "in" then
      for i = 1, n do
        ogse.spawn_item_in_inv( section )
      end
      news_manager.relocate_item( db.actor, type, section )
    elseif type == "out" then
      amk_utils.out_items_number({
        [ section ] = n,
      })
    end
  end
end


function calc_reload()
  amk_utils.out_items_number({
    [ "amk_kanistra" ] = 1,
    [ "amk_ballon"   ] = 1,
  })
end


function reload( first_speaker, second_speaker )
  local actor, trader
  if db.actor and db.actor:id() == first_speaker:id() then
    actor  = first_speaker
    trader = second_speaker
  else
    actor  = second_speaker
    trader = first_speaker
  end
  local items = dialogs.relocate_item_section( trader, "wpn_flame", "in" )
  level.client_spawn_manager():add(
    items[ 1 ].id, -1, function( id, obj )
      obj:set_ammo_elapsed( get_u32( obj:section(), "ammo_mag_size" ) )
    end
  )
end


function clear_flame( person )
  if person and person:object( "wpn_flame" ) then
    ogse.remove_item_from_inventory_by_name( "wpn_flame", person )
  end
end


function have_all_parts()
  return have_a_flamethrower_bad()
    and have_10_vodka()
    and have_a_gorelka2()
    and have_a_manometr2()
    and have_a_af_fireball()
    and have_a_trubka2()
end

function havent_all_parts()
  return not have_all_parts()
end
