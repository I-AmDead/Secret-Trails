-- -*- mode: lua; coding: windows-1251-dos -*-
--[[----------------------------------------------------------------------------
Respawner. Схема обновления популяции всего всего всего в симуляции.
by Stohe (Диденко Руслан)
------------------------------------------------------------------------------]]

local section_name = "respawn"

local idle_spawn_preset = {
  seldom = 60 * 60 * 96,
  medium = 60 * 60 * 48,
  often  = 60 * 60 * 24,
  once   = -100000
}

-- Список респавнеров, для сбора статистики
local respawners = {}
local respawners_by_parent = {}

-- Хэш id всех созданных объектов. В качестве значения будет id респаунера.
local all_spawned_obj = {}


function attach( sm )
  sm:subscribe({ signal = "on_release_npc", fun = this.on_release_npc })
end

function init()
  event( "se_monster:on_before_register" ):register( this.se_on_before_register )
  event( "se_stalker:on_before_register" ):register( this.se_on_before_register )
end


--------------------------------------------------------------------------------
-- Разные полезные функции
--------------------------------------------------------------------------------

function r_bool( spawn_ini, section, line, default )
  return get_bool( section, line, default, spawn_ini )
end


function r_str( spawn_ini, section, line, default )
  return get_string( section, line, default, spawn_ini )
end


function r_num( spawn_ini, section, line, default )
  return get_float( section, line, default, spawn_ini )
end


function r_2nums( spawn_ini, section, line, def1, def2 )
  if spawn_ini:line_exist( section, line ) then
    -- если default-ов больше, чем значений в ini, то забить
    -- недостающие последним значением из ini
    local t = parse_names( get_string( section, line, nil, spawn_ini ) )
    local n = table.getn( t )
    if n == 0 then
      return def1, def2
    elseif n == 1 then
      return t[ 1 ], def2
    else
      return t[ 1 ], t[ 2 ]
    end
  else
    return def1, def2
  end
end


function r_spawns( spawn_ini, section, line )
  if spawn_ini:line_exist( section, line ) then
    --' если default-ов больше, чем значений в ini, то забить
    -- недостающие последним значением из ini
    local t = parse_names( get_string( section, line, nil, spawn_ini ) )
    local n = table.getn( t )
    local ret_table = {}
    local k = 1
    while k <= n do
      local spawn = {}
      spawn.section = t[ k ]
      -- Проверяем что это не последняя запись
      if t[ k + 1 ] ~= nil then
        local p = tonumber( t[ k+1 ] )
        -- проверяем что вторым числом задана вероятность, а не другая
        -- секция спавну
        if p then
          -- забиваем число
          spawn.prob = p
          k = k + 2
        else
          -- забиваем дефолт 1
          spawn.prob = 1
          k = k + 1
        end
      else
        spawn.prob = 1
        k = k + 1
      end
      table.insert( ret_table, spawn )
      -- Вычитываем настройки секций респавна и кешируем их.
      local custom_data = get_string( spawn.section, "custom_data" )
      if custom_data then
        local ltx = dsh.cached_ini_file( custom_data )
        ASSERT(
          ( not ltx:section_exist( "smart_terrains" ) ),
          "[%s]: found [smart_terrains] in %s", script_name(), spawn.section
        )
      end
    end
    return ret_table
  end
  return nil
end


--------------------------------------------------------------------------------
-- Серверный объект спавнера
--------------------------------------------------------------------------------

class "se_respawn" ( cse_alife_smart_zone )
function se_respawn:__init( section ) super( section )
  self.spawned_obj       = {}
  -- Таблица для кеширования свойств секций респавна.
  self.sectSpawnProps    = {}
  self.rt_read           = false
  self.proxy_initialized = false
  self.not_yet_registered_cnt = 0
  self.not_yet_registered_id  = 0
end


-- сохранение
function se_respawn:STATE_Write( packet )
  cse_alife_smart_zone.STATE_Write( self, packet )
  local table_size = table.getn( self.spawned_obj )
  packet:w_u8( table_size )
  for i, k in ipairs( self.spawned_obj ) do
    packet:w_u16( k )
  end
  utils.w_CTime( packet, self.respawn_time )
  if not self.respawn_time then
    self.respawn_time = game.CTime()
  end
  packet:w_u8(  self.not_yet_registered_cnt )
  packet:w_u16( self.not_yet_registered_id  )
end


-- восстановление
function se_respawn:STATE_Read( packet, size )
  cse_alife_smart_zone.STATE_Read( self, packet, size )
  if editor() then return end
  local table_size = packet:r_u8()
  for i = 1, table_size do
    local obj_id = packet:r_u16()
    table.insert( self.spawned_obj, obj_id )
    all_spawned_obj[ obj_id ] = self.id
  end
  if not packet:r_eof() then
    self.respawn_time = utils.r_CTime( packet )
    self.rt_read = true
  end
  if not packet:r_eof() then
    self.not_yet_registered_cnt = packet:r_u8()
    self.not_yet_registered_id  = packet:r_u16()
  end
end


-- инициализация объекта.
-- вызывается симулятором.
function se_respawn:on_register()
  cse_alife_smart_zone.on_register( self )
  init_respawn_params( self )
end


function se_respawn:on_unregister()
  cse_alife_smart_zone.on_unregister( self )
  for _, v in ipairs( self.spawned_obj ) do
    all_spawned_obj[ v ] = nil
    local sobj = alife():object( v )
    if sobj then
      sobj.se_respawn = nil
    end
  end
end


local cur_se_respawn_create = false
local created_custom_data   = false

function se_on_before_register( e )
  local respawn = cur_se_respawn_create
  if respawn then
    local sobj = e.sobj
    table.insert( respawn.spawned_obj, sobj.id )
    all_spawned_obj[ sobj.id ] = respawn.id
    cur_se_respawn_create = false
  end
  if created_custom_data then
    local sobj = e.sobj
    sobj.custom_data = created_custom_data
    created_custom_data = false
  end
end


-- Создаем объект
function se_respawn:create( prob )
  if     tostring( prob ) == "true" then
    prob = 80
  elseif tostring( prob ) == "false" then
    prob =  0
  end
  if tonumber( prob ) == nil then
    print_table( self.conditions )
    abort( "RESPAWN[%s]spawn probability doesn't set", tostring( self:name() ) )
    prob = 0
    return false
  end

  if math.random( 100 ) <= tonumber( prob ) then
    local spawn_section = ""
    local sum = 0
    -- Производим рандомную взвешенную выборку
    -- с учетом уже заспавленного количества человек.
    for k, v in pairs( self.respawn_section ) do
      sum = sum + v.prob
    end
    sum = math.random( 0, sum )
    for _, v in ipairs( self.respawn_section ) do
      sum = sum - v.prob
      if sum <= 0 then
        spawn_section = v.section
        break
      end
    end

    if spawn_section == "" then
      return false
    end

    local parent_id
    if self.parent then
      local s_obj = alife():story_object( self.parent )
      if not s_obj then
        abort(
          "SPAWNING [%s], cant find parent with SID [%s]",
          self:name(), self.parent
        )
        return
      end
      parent_id = s_obj.id
    end

    if spawn_section ~= "m_crow" then
      local sini     = self:spawn_ini()
      local cfg_name = get_string(
        "respawn", "creature_binded_logic", nil, sini
      )
      if cfg_name then
        local cfg_path = "scripts\\amk\\" .. cfg_name .. ".ltx"
        local ini      = dsh.cached_ini_file( cfg_path )
        created_custom_data = ini:get_as_string()
      end
    end

    cur_se_respawn_create = self
    local pos, lvid, gvid = self.position, self.m_level_vertex_id, self.m_game_vertex_id
    if self.xyzlg then
      local x, y, z, lv, gv = unpack( self.xyzlg )
      pos, lvid, gvid = vector():set( x, y, z ), lv, gv
      end
    local obj
    if not parent_id then
      obj = alife():create( spawn_section, pos, lvid, gvid )
    else
      obj = alife():create( spawn_section, pos, lvid, gvid, parent_id )
    end
    if IsStalker( obj ) or IsMonster( obj ) then
      -- почему-то не выполнился se_on_before_register()
      ASSERT(
        cur_se_respawn_create == false,
        "[%s]: %s: %s: unexpected cur_se_respawn_create",
        script_name(), self:name(), obj:name()
      )
    end
    if cur_se_respawn_create then
      -- для предметов se_on_before_register() не вызывается, т.ч. в ручную
      -- это сделаем
      se_on_before_register({
        [ "sobj" ] = obj,
      })
    end
    ASSERT(
      created_custom_data == false,
      "[%s]: %s: found created_custom_data exists after %s",
      script_name(), self:name(), obj:name()
    )

    if not self.item_spawn then
      if IsStalker( obj ) or IsMonster( obj ) then
        obj:set_check_distance()
      end
    end
    news_main.on_spawn( obj )
    return true
  end
end


-- Попытка спаунить объекты. Анализируется сколько уже заспавнено и
-- выбирается один из механизмов - либо мы доспавниваем до
-- минимального количества, либо спавним с заданной вероятностью
function se_respawn:spawn()	
	if not self.spawn_once then
    local our_sections = {}
    for _, v in ipairs( self.respawn_section ) do
      our_sections[ v.section ] = true
    end
    -- Пробегаемся по списку уже заспавненных объектов и удаляем из
    -- них мертвые либо уничтоженные.
    local filtered = {}
    for _, v in ipairs( self.spawned_obj ) do
      local obj = alife():object( v )
      if obj and our_sections[ obj:section_name() ] then
        if IsStalker( obj ) or IsMonster( obj ) then
          if obj:alive() then
            table.insert( filtered, v )
            if
              self:is_waiting_register_npc( v )
              and obj:smart_terrain_id() ~= 65535
            then
              log2(
                "[%s]: %s: spawn: %s: unexpected smart_terrain_id = %s",
                script_name(), self:name(), obj:name(), obj:smart_terrain_id()
              )
              self.not_yet_registered_cnt = 0
              self.not_yet_registered_id  = 0
            end
          else
            all_spawned_obj[ v ] = nil
            obj.se_respawn       = nil
            if self:is_waiting_register_npc( v ) then
              log2(
                "[%s]: %s: spawn: %s: unexpected dead",
                script_name(), self:name(), obj:name()
              )
              self.not_yet_registered_cnt = 0
              self.not_yet_registered_id  = 0
            end
          end
        else
          ASSERT(
            ( not self:is_waiting_register_npc( v ) ),
            "can't be: %s, %s", self:name(), obj:name()
          )
          table.insert( filtered, v )
        end
      else
        all_spawned_obj[ v ] = nil
        if obj then obj.se_respawn = nil end
        if self:is_waiting_register_npc( v ) then
          log2(
            "[%s]: %s: spawn: id = %s: unexpected not found in alife()",
            script_name(), self:name(), v
          )
          self.not_yet_registered_cnt = 0
          self.not_yet_registered_id  = 0
        end
      end
    end
    self.spawned_obj = filtered
  end
  if
    xr_logic.pick_section_from_condlist(
      db.actor_proxy, self, self.conditions
    ) == "0"
  then
    return
  end

  if self.spawn_once and not self.already_once_spawned then
    self.already_once_spawned = true
  end

  if self.not_yet_registered_id == 0 then
    -- экстренный спаун минимального количества объектов
    if self:spawn_min_count() then return end
    -- делаем несколько попыток заспаунить объект.
    self:spawn_max_spawn()
  else
    -- log2(
    --   "[%s]: %s: spawn: still waiting for id = %s",
    --   script_name(), self:name(), self.not_yet_registered_id
    -- )
  end
end


function se_respawn:spawn_min_count()
  if table.getn( self.spawned_obj ) < self.min_count then
    -- log2(
    --   "[%s]: %s: spawn_min_count: %s < %s",
    --   script_name(), self:name(),
    --   table.getn( self.spawned_obj ), self.min_count
    -- )
    while table.getn( self.spawned_obj ) < self.min_count do
      if self:create( 100 ) == false then
        return true
      end
    end
    return true
  end
end


function se_respawn:spawn_max_spawn( max )
  if not max then max = self.max_spawn end
  self.not_yet_registered_cnt = max
  -- log2(
  --   "[%s]: %s: spawn_max_spawn: self.not_yet_registered_cnt = %s",
  --   script_name(), self:name(), self.not_yet_registered_cnt
  -- )
  for i = 1, max do
    if
      not (
        self.max_count ~= -1
        and table.getn( self.spawned_obj ) >= self.max_count
      )
    then
      if
        self:create(
          xr_logic.pick_section_from_condlist(
            db.actor_proxy, self, self.conditions
          )
        ) == false
      then
        return
      end
    end
  end
  self.not_yet_registered_cnt = 0
  -- log2(
  --   "[%s]: %s:   self.not_yet_registered_cnt = %s",
  --   script_name(), self:name(), self.not_yet_registered_cnt
  -- )
end


--' Удаляем уже заспавненный объект из списка заспавненных
--' Используется только  для ящиком со шмотками в смарттеррейнах
function se_respawn:remove_spawned( id )
  local filtered = {}
  for _, v in ipairs( self.spawned_obj ) do
    if id ~= v then table.insert( filtered, v ) end
  end
  self.spawned_obj      = filtered
  all_spawned_obj[ id ] = nil
  local sobj = alife():object( id )
  if sobj then
    sobj.se_respawn = nil
  end
  if self:is_waiting_register_npc( id ) then
    log2(
      "[%s]: %s: removed not yet registered id = %s",
      script_name(), self:name(), id
    )
    self:spawn_next_spawn( sobj )
  end
end


-- Обновление респавнера. В зависимости от настроек обновляется либо
-- только в офлайне, либо и там и там.
function se_respawn:execute()
  if self.already_once_spawned == true then return end
  -- Выходим, если у нас установлен событийный спавн или это респаунер
  -- для вещей. Генерировать вещи респаунером - это плохая идея, не
  -- нужно так делать.
  if self.item_spawn or self.idle_spawn_min == -1 then return end
  self:set_next_update()
  -- Производим попытку заспаунить объекты
  self:spawn()
  -- log2( "[%s]: %s: spawned", script_name(), self:name() )
end


function se_respawn:dsh_cleanup_spawned_obj()
  for _, k in ipairs( self.spawned_obj ) do
    sobj = alife():object( k )
    if sobj and ( IsMonster( sobj ) or IsStalker( sobj ) ) then
      alife():release( sobj )
    end
  end
end


function se_respawn:set_next_update()
  local idle_time = game.CTime()
  local now       = game.get_game_time()
  idle_time:setHMSms(
    math.random( 12, 48 ), math.random( 0, 59 ), math.random( 0, 59 ), 0
  )
  self:set_respawn_time( now + idle_time )
end


function se_respawn:set_respawn_time( t )
  self.respawn_time = t
  ogse_st_mgr.delayed_fun_start( "se_respawn." .. self:name() )
    :set_gtime( self.respawn_time )
    :init( "se_respawn.update_on_timer", self:name() )
    :start()
  -- log2( "[%s]: %s: set next update", script_name(), self:name() )
end


function se_respawn:on_smart_terrain_register_npc( sobj, strn )
  if self.not_yet_registered_id == 0 then return end
  if self:is_waiting_register_npc( sobj.id ) then
    -- log2(
    --   "[%s]: %s: registered by smart_terrain: %s (%s)",
    --   script_name(), self:name(), sobj:name(), strn:name()
    -- )
    sobj:set_check_distance()
    self:spawn_next_spawn( sobj )
  end
end


-- если мы ждем, когда какой-нибудь смарт примет нового моба и
-- получили уведомление, что прошел цикл по всем смартам и никто его
-- не принял, значит можно моба удалить и остановить цикл спауна.
function se_respawn:on_smart_terrain_reject_npc( sobj )
  if self.not_yet_registered_id == 0 then return end
  if self:is_waiting_register_npc( sobj.id ) then
    -- log2(
    --   "[%s]: %s: rejected by all smart_terrains: %s",
    --   script_name(), self:name(), sobj:name()
    -- )
    self.not_yet_registered_cnt = 0
    self.not_yet_registered_id  = 0
    self:remove_spawned( sobj.id )
    alife():release( sobj )
  end
end


function se_respawn:spawn_next_spawn( sobj )
  self.not_yet_registered_id = 0
  if self.not_yet_registered_cnt > 0 then
    local max = self.not_yet_registered_cnt - 1
    if max > 0 and not amk_offline_alife.is_actors_friend( sobj ) then
      -- log2(
      --   "[%s]: %s: spawn_next_spawn: try spawn next",
      --   script_name(), self:name()
      -- )
      self:spawn_max_spawn( max )
    else
      self.not_yet_registered_cnt = 0
      -- log2( "[%s]: %s: spawn_next_spawn: done", script_name(), self:name() )
    end
  else
    if self:spawn_min_count() then return end
    self:spawn_max_spawn()
  end
end


function se_respawn:is_waiting_register_npc( id )
  return self.not_yet_registered_id == id
end


function spawn( name )
  local spawner = respawners[ name ]
  if not spawner then
    return
  end
  for i = 1, spawner.max_spawn do
    if
      spawner.max_count ~= -1
      and
      table.getn( spawner.spawned_obj ) >= spawner.max_count
    then
      return
    end
    if
      spawner:create(
        xr_logic.pick_section_from_condlist(
          db.actor_proxy, spawner, spawner.conditions
        )
      ) == false
    then
      return
    end
  end
end


function get_respawner_by_parent( parent_id )
  return respawners_by_parent[ parent_id ]
end


function create_ammo( section, position, lvi, gvi, pid, num )
  local ini = system_ini()
  local num_in_box = ini:r_u32( section, "box_size" )
  local t = {}
  while num > num_in_box do
    local sobj = alife():create_ammo(
      section, position, lvi, gvi, pid, num_in_box
    )
    table.insert( t, sobj )
    num = num - num_in_box
  end
  local sobj = alife():create_ammo( section, position, lvi, gvi, pid, num )
  table.insert( t, sobj )
  return t
end


local amk_respawner_control       = {}
local amk_named_respawner_control = {}

function init_respawn_params( obj )
  amk_respawner_control[ obj:name() ] = obj
  -- Вычитываем настройки спауна
  local ini = obj:spawn_ini()
  if not ini:section_exist( section_name ) then
    return  
  end
  local sect = section_name

  obj.amk_name = get_string( sect, "amk_name", nil, ini )
  if obj.amk_name then
    amk_named_respawner_control[ obj.amk_name ] = obj
    local amk_sect = "amk_respawns." .. obj.amk_name
    if sys_ini:section_exist( amk_sect ) then
      ini  = sys_ini
      sect = amk_sect
    end
  end

  obj.spawned_goes_online = get_bool(
    sect, "spawned_goes_online", nil, ini
  )
  obj.spawn_once = get_bool( sect, "spawn_once", false, ini )
  obj.min_count  = get_u32( sect, "min_count", 0, ini )
  obj.max_count  = get_float( sect, "max_count", -1, ini )
  if obj.min_count > obj.max_count and obj.max_count ~= -1 then
    abort( "RESPAWN: [%s] min_count > max_count", obj:name() )
  end
  obj.max_spawn  = get_u32( sect, "max_spawn", 1, ini )
  obj.idle_spawn_min, obj.idle_spawn_max = r_2nums( ini, sect, "idle_spawn" )
  if not obj.idle_spawn_min then
    abort( "RESPAWN: [%s] field 'idle_spawn' doesn't exist.", obj:name() )
  end
  if not obj.idle_spawn_max then
    obj.idle_spawn_max = obj.idle_spawn_min
  end

  --' Вычитка пресетов
  if idle_spawn_preset[ obj.idle_spawn_min ] then
    obj.idle_spawn_min = idle_spawn_preset[ obj.idle_spawn_min ]
  else
    obj.idle_spawn_min = tonumber( obj.idle_spawn_min )
  end
  if idle_spawn_preset[ obj.idle_spawn_max ] then
    obj.idle_spawn_max = idle_spawn_preset[ obj.idle_spawn_max ]
  else
    obj.idle_spawn_max = tonumber( obj.idle_spawn_max )
  end

  obj.str_conditions = get_string( sect, "conditions", 100, ini )
  obj.conditions = xr_logic.parse_condlist(
    obj, sect, "conditions", obj.str_conditions
  )
  obj.respawn_radius = get_float( sect, "respawn_radius", -1, ini )
    --' Спешкейс, чтобы сохранить совместимость сейвов.
  if obj:name() == "mil_freedom_barier_respawn_1" then
    obj.respawn_radius = -1
  end
  obj.parent = get_u32( sect, "parent", nil, ini )
  obj.item_spawn = get_bool( sect, "item_spawn", false, ini )
  
  -- производим первичную инициализацию
  if obj.rt_read == false then
    obj.respawn_time = game.CTime()
  end

  -- Для сбора статистики сохраняем указатель на респавнер
  respawners[ obj:name() ] = obj
  if obj.parent then
    respawners_by_parent[ obj.parent ] = obj
  end
	
end


function reinit_spawner_params( name )
  if amk_respawner_control[ name ] then
    init_respawn_params( amk_respawner_control[ name ] )
  end
end


function get_respawner_by_name( name )
  if amk_named_respawner_control[ name ] then
    return alife():object( amk_named_respawner_control[ name ].id )
  end
  return nil
end


-- Удалить id моба как можно скорее, что бы не успел создасться какой-нибудь
-- объект с этим же id. А то после такого можно наблюдать, что в респаунере
-- с крысами, в подземке Агропрома, зарегестрирована Гроза. Как пример.
-- Потому, что ей был присвоен id убиенной крысы.
function on_release_npc( id )
  if all_spawned_obj[ id ] then
    local respawner = alife():object( all_spawned_obj[ id ] )
    if respawner then
      respawner:remove_spawned( id )
    end
  end
end


function release_respawner( sobj )
  amk_respawner_control[ sobj:name() ] = nil
  if sobj.amk_name then
    amk_named_respawner_control[ sobj.amk_name ] = nil
  end
  alife():release( sobj )
end


function iterate_respawners( f )
  for name, sobj in pairs( respawners ) do
    f( sobj )
  end
end


function get_respawner_by_npc_id( id )
  if all_spawned_obj[ id ] then
    local sobj = alife():object( all_spawned_obj[ id ] )
    ASSERT(
      sobj,
      "can't find se_respawn %s for %s in alife()", all_spawned_obj[ id ], id
    )
    return sobj
  end
end


function update_on_timer( name )
  local respawner = respawners[ name ]
  ASSERT( respawner, "[%s]: not found", tostring( name ) )
  -- log2( "[%s]: %s: execute", script_name(), respawner:name() )
  respawner:execute()
end


function startup_respawners()
  local cnt = 0
  iterate_respawners(
    function( respawner )
      cnt = cnt + 1
      if (
        respawner.already_once_spawned == true
        or respawner.item_spawn or respawner.idle_spawn_min == -1
      ) then
        log2( "[%s]: %s: skip startup", script_name(), respawner:name() )
        return
      end
      log2( "[%s]: %s: startup", script_name(), respawner:name() )
      if respawner.respawn_time <= game.get_game_time() then
        respawner:execute()
      else
        respawner:set_respawn_time( respawner.respawn_time )
      end
    end
  )
  log2( "[%s]: %s respawners started", script_name(), cnt )
end
