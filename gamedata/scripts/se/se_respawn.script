-- -*- mode: lua; coding: windows-1251-dos -*-
--[[----------------------------------------------------------------------------
Respawner. Схема обновления популяции всего всего всего в симуляции.
by Stohe (Диденко Руслан)
------------------------------------------------------------------------------]] local section_name = "respawn"

local idle_spawn_preset = {
    seldom = 60 * 60 * 96,
    medium = 60 * 60 * 48,
    often = 60 * 60 * 24,
    once = -100000
}

-- Список респавнеров, для сбора статистики
local respawners = {}
local respawners_by_parent = {}

-- Хэш id всех созданных объектов. В качестве значения будет id респаунера.
local all_spawned_obj = {}

function attach(sm)
    sm:subscribe({signal = "on_release_npc", fun = this.on_release_npc})
end

function init()
    event("se_monster:on_before_register"):register(this.se_on_before_register)
    event("se_stalker:on_before_register"):register(this.se_on_before_register)
end

--------------------------------------------------------------------------------
-- Разные полезные функции
--------------------------------------------------------------------------------

function r_2nums(spawn_ini, section, line, def1, def2)
    if spawn_ini:line_exist(section, line) then
        -- если default-ов больше, чем значений в ini, то забить
        -- недостающие последним значением из ini
        local t = parse_names(get_string(section, line, nil, spawn_ini))
        local n = table.getn(t)
        if n == 0 then
            return def1, def2
        elseif n == 1 then
            return t[1], def2
        else
            return t[1], t[2]
        end
    else
        return def1, def2
    end
end

function r_spawns(spawn_ini, section, line, sectSpawnProps)
    if spawn_ini:line_exist(section, line) then
        -- ' если default-ов больше, чем значений в ini, то забить
        -- недостающие последним значением из ini
        local t = parse_names(get_string(section, line, nil, spawn_ini))
        local n = table.getn(t)
        local ret_table = {}
        local k = 1
        while k <= n do
            local spawn = {}
            spawn.section = t[k]
            -- Проверяем что это не последняя запись
            if t[k + 1] ~= nil then
                local p = tonumber(t[k + 1])
                -- проверяем что вторым числом задана вероятность, а не другая
                -- секция спавну
                if p then
                    -- забиваем число
                    spawn.prob = p
                    k = k + 2
                else
                    -- забиваем дефолт 1
                    spawn.prob = 1
                    k = k + 1
                end
            else
                spawn.prob = 1
                k = k + 1
            end
            table.insert(ret_table, spawn)
            -- Вычитываем настройки секций респавна и кешируем их.
            if sectSpawnProps[spawn.section] == nil then
                local respawn_ini = system_ini()

                local community = get_string(spawn.section, "community", "nil", respawn_ini)
                local rank = get_string(spawn.section, "spec_rank", "nil", respawn_ini)
                local check = true
                local custom_data = get_string(spawn.section, "custom_data", "nil", respawn_ini)
                if custom_data ~= nil then
                    local custom_data_ltx = ini_file(custom_data)
                    if custom_data_ltx:section_exist("smart_terrains") then
                        if custom_data_ltx:line_exist("smart_terrains", "none") then
                            if get_string("smart_terrains", "none", "nil", custom_data_ltx) then
                                check = false
                            end
                        end
                        if custom_data_ltx:line_exist("smart_terrains", "respawn_check") then
                            if get_string("smart_terrains", "respawn_check", "nil", custom_data_ltx) then
                                check = false
                            end
                        end
                    end
                end

                sectSpawnProps[spawn.section] = {
                    community = community,
                    rank = rank,
                    check = check
                }
            end

        end
        return ret_table
    end
    return nil
end

--------------------------------------------------------------------------------
-- Серверный объект спавнера
--------------------------------------------------------------------------------

class "se_respawn"(cse_alife_smart_zone)
function se_respawn:__init(section)
    super(section)
    self.spawned_obj = {}
    -- Таблица для кеширования свойств секций респавна.
    self.sectSpawnProps = {}
    self.rt_read = false
    self.proxy_initialized = false
end
-- сохранение
function se_respawn:STATE_Write(packet)
    cse_alife_smart_zone.STATE_Write(self, packet)

    local table_size = table.getn(self.spawned_obj)
    packet:w_u8(table_size)
    for i, k in ipairs(self.spawned_obj) do
        packet:w_u16(k)
    end
    utils.w_CTime(packet, self.respawn_time)
    if not self.respawn_time then
        self.respawn_time = game.CTime()
    end
end

-- восстановление
function se_respawn:STATE_Read(packet, size)
    cse_alife_smart_zone.STATE_Read(self, packet, size)
    if editor() then
        return
    end
    local table_size = packet:r_u8()
    for i = 1, table_size do
        table.insert(self.spawned_obj, packet:r_u16())
    end

    if not packet:r_eof() then
        self.respawn_time = utils.r_CTime(packet)
        self.rt_read = true
    end
end

-- инициализация объекта.
-- вызывается симулятором.
function se_respawn:on_register()
    cse_alife_smart_zone.on_register(self)
    init_respawn_params(self)
end
-- Создаем объект
function se_respawn:create(prob)
    if tostring(prob) == "true" then
        prob = 80
    elseif tostring(prob) == "false" then
        prob = 0
    end
    if tonumber(prob) == nil then
        abort("RESPAWN[%s]spawn probability doesn't set", tostring(self:name()))
        prob = 0
        return false
    end

    if math.random(100) <= tonumber(prob) then
        local spawn_section = ""
        local sum = 0
        -- Производим рандомную взвешенную выборку
        -- с учетом уже заспавленного количества человек.
        for k, v in pairs(self.respawn_section) do
            sum = sum + v.prob
        end
        sum = math.random(0, sum)
        for _, v in ipairs(self.respawn_section) do
            sum = sum - v.prob
            if sum <= 0 then
                spawn_section = v.section
                break
            end
        end

        if spawn_section == "" then
            return false
        end

        local parent_id
        if self.parent then
            local s_obj = alife():story_object(self.parent)
            if not s_obj then
                abort("SPAWNING [%s], cant find parent with SID [%s]", self:name(), self.parent)
                return
            end
            parent_id = s_obj.id
        end

        local pos, lvid, gvid = self.position, self.m_level_vertex_id, self.m_game_vertex_id
        local obj
        if not parent_id then
            obj = alife():create(spawn_section, pos, lvid, gvid)
        else
            obj = alife():create(spawn_section, pos, lvid, gvid, parent_id)
        end

        local tt = self.sectSpawnProps[spawn_section]

        if self.item_spawn == false then
            if tt.check == true and not self.amk_name then
                obj:brain():update()
                local smart_terrain_id = obj:smart_terrain_id()

                if smart_terrain_id ~= 65535 then
                    table.insert(self.spawned_obj, obj.id)
                    local pos = obj.position
                    local sm_obj = alife():object(smart_terrain_id)
                    return true
                else
                    alife():release(obj, true)
                    return false
                end
            end
        end
        table.insert(self.spawned_obj, obj.id)
        return true
    end
end

-- Попытка спаунить объекты. Анализируется сколько уже заспавнено и выбирается один из механизмов - либо 
-- мы доспавниваем до минимального количества, либо спавним с заданной вероятностью
function se_respawn:spawn()
    if not self.spawn_once then
        -- Пробегаемся по списку уже заспавненных объектов и удаляем из них мертвые либо уничтоженные.
        for k, v in pairs(self.spawned_obj) do
            local obj = level.object_by_id(v)
            if obj == nil then
                obj = alife():object(v)
            end

            if obj ~= nil then
                if (IsStalker(obj) or IsMonster(obj)) and obj:alive() ~= true then
                    table.remove(self.spawned_obj, k)
                end
            else
                table.remove(self.spawned_obj, k)
            end
        end
    end
    if xr_logic.pick_section_from_condlist(db.actor_proxy, self, self.conditions) == "0" then
        return
    end

    if self.spawn_once and not self.already_once_spawned then
        self.already_once_spawned = true
    end
    -- экстренный спаун минимального количества объектов
    if table.getn(self.spawned_obj) < self.min_count then
        while table.getn(self.spawned_obj) < self.min_count do
            if self:create(100) == false then
                return
            end
        end
        return
    end

    -- делаем несколько попыток заспаунить объект.
    for i = 1, self.max_spawn do
        if self.max_count ~= -1 and table.getn(self.spawned_obj) >= self.max_count then
            return
        end
        if self:create(xr_logic.pick_section_from_condlist(db.actor_proxy, self, self.conditions)) == false then
            return
        end
    end
end

-- ' Удаляем уже заспавненный объект из списка заспавненных
-- ' Используется только  для ящиком со шмотками в смарттеррейнах
function se_respawn:remove_spawned(id)
    for k, v in pairs(self.spawned_obj) do
        if id == v then
            table.remove(self.spawned_obj, k)
        end
    end
end

-- Обновление респавнера. В зависимости от настроек обновляется либо только в офлайне, либо и там и там.
function se_respawn:execute()
    if self.already_once_spawned == true then
        return
    end
    -- ' Выходим, если у нас установлен событийный спавн.
    if self.idle_spawn_min == -1 then
        return
    end

    if self.respawn_time < game.get_game_time() then
        local idle_time = game.CTime()
        local now = game.get_game_time()

        idle_time:setHMSms(0, 0, 0, math.random(self.idle_spawn_min, self.idle_spawn_max) * 1000)
        self.respawn_time = now + idle_time

        -- Производим попытку заспаунить объекты    
        self:spawn()
    end
end

-- Обновление в офлайне
function se_respawn:update()
    cse_alife_smart_zone.update(self)
    self:execute()
end

-- Обновление в онлайне
function se_respawn:update_online()
    -- 'cse_alife_smart_zone.update( self )

    if self.respawn_radius == -1 then

        return
    end
    if db.actor:position():distance_to(self.position) >= self.respawn_radius then
        self:execute()
    else

    end
end

function spawn(name)
    local spawner = respawners[name]
    if not spawner then
        return
    end
    for i = 1, spawner.max_spawn do
        if spawner.max_count ~= -1 and table.getn(spawner.spawned_obj) >= spawner.max_count then
            return
        end
        if spawner:create(xr_logic.pick_section_from_condlist(db.actor_proxy, spawner, spawner.conditions)) == false then
            return
        end
    end
end

function get_respawner_by_parent(parent_id)
    return respawners_by_parent[parent_id]
end

function create_ammo(section, position, lvi, gvi, pid, num)
    local ini = system_ini()
    local num_in_box = ini:r_u32(section, "box_size")
    local t = {}
    while num > num_in_box do
        local sobj = alife():create_ammo(section, position, lvi, gvi, pid, num_in_box)
        table.insert(t, sobj)
        num = num - num_in_box
    end
    local sobj = alife():create_ammo(section, position, lvi, gvi, pid, num)
    table.insert(t, sobj)
    return t
end

local amk_respawner_control = {}
local amk_named_respawner_control = {}

function init_respawn_params(obj)
    amk_respawner_control[obj:name()] = obj
    -- Вычитываем настройки спауна
    local ini = obj:spawn_ini()
    if not ini:section_exist(section_name) then
        return
    end
    local sect = section_name

    obj.amk_name = get_string(sect, "amk_name", nil, ini)
    if obj.amk_name then
        amk_named_respawner_control[obj.amk_name] = obj
        local amk_sect = "amk_respawns." .. obj.amk_name
        if sys_ini:section_exist(amk_sect) then
            ini = sys_ini
            sect = amk_sect
        end
    end
    obj.respawn_section = r_spawns(ini, section_name, "respawn_section", obj.sectSpawnProps)
    if not obj.respawn_section then
        abort("RESPAWN: [%s] field 'respawn_section' doesn't exist.", obj:name())
    end

    obj.spawned_goes_online = get_bool(sect, "spawned_goes_online", nil, ini)
    obj.spawn_once = get_bool(sect, "spawn_once", false, ini)
    obj.min_count = get_u32(sect, "min_count", 0, ini)
    obj.max_count = get_float(sect, "max_count", -1, ini)
    if obj.min_count > obj.max_count and obj.max_count ~= -1 then
        abort("RESPAWN: [%s] min_count > max_count", obj:name())
    end
    obj.max_spawn = get_u32(sect, "max_spawn", 1, ini)
    obj.idle_spawn_min, obj.idle_spawn_max = r_2nums(ini, sect, "idle_spawn", 1, 1)
    if not obj.idle_spawn_min then
        abort("RESPAWN: [%s] field 'idle_spawn' doesn't exist.", obj:name())
    end
    if not obj.idle_spawn_max then
        obj.idle_spawn_max = obj.idle_spawn_min
    end

    -- ' Вычитка пресетов
    if idle_spawn_preset[obj.idle_spawn_min] then
        obj.idle_spawn_min = idle_spawn_preset[obj.idle_spawn_min]
    else
        obj.idle_spawn_min = tonumber(obj.idle_spawn_min)
    end
    if idle_spawn_preset[obj.idle_spawn_max] then
        obj.idle_spawn_max = idle_spawn_preset[obj.idle_spawn_max]
    else
        obj.idle_spawn_max = tonumber(obj.idle_spawn_max)
    end

    obj.str_conditions = get_string(sect, "conditions", 100, ini)
    obj.conditions = xr_logic.parse_condlist(obj, section_name, "conditions", obj.str_conditions)
    obj.respawn_radius = get_u32(sect, "respawn_radius", -1, ini)
    -- ' Спешкейс, чтобы сохранить совместимость сейвов.
    if obj:name() == "mil_freedom_barier_respawn_1" then
        obj.respawn_radius = -1
    end
    obj.parent = get_u32(sect, "parent", nil, ini)
    obj.item_spawn = get_bool(sect, "item_spawn", false, ini)

    -- производим первичную инициализацию
    if obj.rt_read == false then
        obj.respawn_time = game.CTime()
    end

    -- Для сбора статистики сохраняем указатель на респавнер
    respawners[obj:name()] = obj
    if obj.parent then
        respawners_by_parent[obj.parent] = obj
    end

end

function reinit_spawner_params(name)
    if amk_respawner_control[name] then
        init_respawn_params(amk_respawner_control[name])
    end
end

function get_respawner_by_name(name)
    if amk_named_respawner_control[name] then
        return alife():object(amk_named_respawner_control[name].id)
    end
end
