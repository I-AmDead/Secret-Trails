-- -*- mode: lua; coding: windows-1251-dos -*-
-- Space restrictor binder
-- Чугай Александр
--
-- Примечания:
--
--   - обновлений у рестрикторов нету, поэтому для тех, кому надо,
--   - актёр вызывает искусственно на своём обновлении
local release_early = {
    ["agr_u_bloodsucker_rest"] = true,
    ["bar_restrictor"] = true,
    ["gar_vagon_in_restrictor"] = true,
    ["rostok_sniper_killer_restrictor"] = true
}

function bind(obj)
    if release_early[obj:name()] then
        local sobj = alife():object(obj:id())
        if sobj then
            alife():release(sobj, true)
            return
        end
    end
    obj:bind_object(restrictor_binder(obj))
end

class "restrictor_binder"(object_binder)
function restrictor_binder:__init(obj, char_ini)
    super(obj)
    self.initialized = false
    self.loaded = false
    self.sm = ogsr_signals.get_mgr()
    self.subscribed = false
end

function restrictor_binder:reload(section)
    object_binder.reload(self, section)
end

function restrictor_binder:reinit()
    object_binder.reinit(self)
    db.storage[self.object:id()] = {}
    self.st = db.storage[self.object:id()]
end

function restrictor_binder:net_spawn(data)
    if not object_binder.net_spawn(self, data) then
        return false
    end
    ASSERT(not db.net_spawning_obj, "found net_spawning_obj = %s",
        tostring(db.net_spawning_obj and db.net_spawning_obj:name() or nil))
    db.net_spawning_obj = self.object
    self.radius = self.object:get_shape_radius()
    db.add_zone(self.object)
    -- Не регистрироваться на апдейты, если у объекта в customdata
    -- нет секции logic вообще.
    --
    -- ОП-2: Функция
    --
    -- xr_logic.get_customdata_or_ini_file(self.object, "<customdata>")
    --
    -- при отсутствии у рестриктора кастомдаты -- возвращает "пустую" логику:
    -- return ini_file([[scripts\dummy.ltx]]), в которой секция logic есть.
    -- Поэтому в updatable_binders в варианте от ПЫСов, несмотря на их
    -- коммент выше, регистрируются на апдейты АБСОЛЮТНО ВСЕ
    -- рестрикторы. Даже те, у которых нет кастомдаты вообще.  Поэтому
    -- условие проверки доработано на проверку строки active ~= nil и
    -- отсутствие строки cfg.
    local char_ini = xr_logic.get_customdata_or_ini_file(self.object, "<customdata>")
    if xr_logic.logic_not_empty(self.object, char_ini) then
        self.object:set_callback(callback.zone_enter, self.on_enter, self)
        self.object:set_callback(callback.zone_exit, self.on_exit, self)
        self.object:get_space_restrictor():schedule_register()
        -- log2(
        --   "[%s]: %s: subscribe %s to update",
        --   script_name(), self.object:name(), self.st.active_section
        -- )
        self.subscribed = self.sm:subscribe({
            ["signal"] = "on_update",
            ["fun"] = self.actor_update,
            ["self"] = self,
            ["script_name"] = "bind_restrictor.actor_update." .. self.object:name()
        })
    end
    db.net_spawning_obj = false
    return true
end

function restrictor_binder:net_destroy()
    local st = db.storage[self.object:id()]
    if st.active_scheme then
        xr_logic.issue_event(self.object, st[st.active_scheme], "net_destroy")
    end
    db.del_zone(self.object)
    if self.subscribed then
        self.object:get_space_restrictor():schedule_unregister()
        self.object:set_callback(callback.zone_enter, nil)
        self.object:set_callback(callback.zone_exit, nil)
        if type(self.subscribed) == "table" then
            -- log2(
            --   "[%s]: %s: unsubscribe from update",
            --   script_name(), self.object:name()
            -- )
            self.sm:unsubscribe(self.subscribed)
        end
        self.subscribed = false
    end
    db.storage[self.object:id()] = nil
    object_binder.net_destroy(self)
end

-- вызывается из обновления актёра!
function restrictor_binder:actor_update(...)
    if self:update_logic(...) then
        local dist = self.object:position():distance_to(db.actor:position()) - self.radius
        self.sm:reschedule((dist < 25 and 200) or (dist < 100 and 1000) or math.random(5000, 6000))
    end
end

function restrictor_binder:update_logic(delta)
    if not self.initialized and db.actor then
        self.initialized = true
        xr_logic.initialize_obj(self.object, self.st, self.loaded, db.actor, modules.stype_restrictor)
    end

    local active = xr_logic.has_active_logic(self.object)
    if active then
        xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
    end

    -- пустая логика могла быть пустой изначально, или могла переключиться
    -- активная секция после вызова xr_logic.issue_event(). Поэтому проверим
    -- лишний раз здесь.
    if not (active and xr_logic.has_active_logic(self.object)) then
        -- ОП-2: Рестрикторы, у которых логика вышла в nil, не удаляются
        -- еще от ПЫСов и болтаются в памяти всю игру. И этот апдейт для
        -- них постоянно вызывается.  Но теперь, согласно правке
        -- заполнения updatable_binders выше, в этой таблице есть только
        -- рестрикторы с логикой.  И их логика вышла в nil, поэтому их
        -- смело можно было бы удалить. Но некоторые из них используются
        -- дополнительно как рестрикторы зон для неписей.  Поэтому удаляем
        -- только обычные рестрикторы, заспавненные скриптом. У
        -- скриптового рестриктора name = секция+ид.  А алспауновские и с
        -- уникальными секциями не удаляем, а просто снимаем с апдейта.
        ASSERT(self.subscribed, "[%s]: not subscribed: %s", script_name(), self.object:name())
        self.object:get_space_restrictor():schedule_unregister()
        self.object:set_callback(callback.zone_enter, nil)
        self.object:set_callback(callback.zone_exit, nil)
        if type(self.subscribed) == "table" then
            self.sm:unsubscribe(self.subscribed)
        end
        self.subscribed = false
        if self.object:section() == "space_restrictor" and self.object:name() == self.object:section() ..
            self.object:id() then
            local sobj = alife():object(self.object:id())
            if sobj then
                alife():release(sobj)
            end
        end
        return false
    end

    -- Если у нас произошло переключение секции логики (на первом
    -- апдейте это произойдет всегда, т.к. last_active_section еще равен
    -- nil), то проверим, нужно-ли для новой логики висеть на апдейте
    -- или достаточно коллбеков. Ну и произвести соотв. действия:
    -- подписаться на апдейт или отписаться от него.
    if self.st.active_section ~= self.last_active_section then
        self.last_active_section = self.st.active_section
        if xr_logic.logic_needs_update(self.object) then
            if self.subscribed == true then
                log2("[%s]: %s: resubscribe %s to update", script_name(), self.object:name(), self.st.active_section)
                self.subscribed = self.sm:subscribe({
                    ["signal"] = "on_update",
                    ["fun"] = self.actor_update,
                    ["self"] = self,
                    ["script_name"] = "bind_restrictor.actor_update." .. self.object:name()
                })
                return false
            end
            return true
        else
            if type(self.subscribed) == "table" then
                self.sm:unsubscribe(self.subscribed)
                self.subscribed = true
            end
            return false
        end
    end

    return type(self.subscribed) == "table"
end

function restrictor_binder:net_save_relevant()
    return true
end

function restrictor_binder:save(packet)
    ASSERT(not db.saving_obj, "found saving_obj = %s", tostring(db.saving_obj and db.saving_obj:name() or nil))
    db.saving_obj = self.object
    object_binder.save(self, packet)
    xr_logic.save_obj(self.object, packet, not self.initialized)
    db.saving_obj = false
end

function restrictor_binder:load(reader)
    self.loaded = true
    object_binder.load(self, reader)
    xr_logic.load_obj(self.object, reader)
end

function restrictor_binder:on_enter(zone, obj)
    if self:update_logic(0) then
        self.sm:weakup(self.subscribed)
    end
end

function restrictor_binder:on_exit(zone, obj)
    if self:update_logic(0) then
        self.sm:weakup(self.subscribed)
    end
end
