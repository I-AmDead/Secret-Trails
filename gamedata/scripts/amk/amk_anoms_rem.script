-- -*- mode: lua; coding: windows-1251-dos -*-

local anoms_classes = {
  [ clsid.zone_bfuzz_s   ] = true,
  [ clsid.zone_electra_s ] = true,
  [ clsid.zone_galant_s  ] = true,
  [ clsid.zone_ice_s     ] = true,
  [ clsid.zone_mbald_s   ] = true,
  [ clsid.zone_mincer_s  ] = true,
  [ clsid.zone_zharka_s  ] = true,
}

local anoms_sections = {
  buzz      = {
    [ "zone"  ] = "buzz",
    [ "shape" ] = { shtype = 0, radius = 1.5, center = { 0, 0, 0 } },
  },
  electra   = {
    [ "zone"  ] = "witches_galantine",
    [ "shape" ] = { shtype = 0, radius = 4,   center = { 0, 0, 0 } },
  },
  fountain  = {
    [ "zone"  ] = "fountain",
    [ "shape" ] = { shtype = 0, radius = 2.5, center = { 0, 0, 0 } },
  },
  gravi     = {
    [ "zone"  ] = "gravi_zone",
    [ "shape" ] = { shtype = 0, radius = 3,   center = { 0, 0, 0 } },
  },
  ice         = {
    [ "zone"  ] = "ice",
    [ "shape" ] = { shtype = 0, radius = 4,   center = { 0, 0, 0 } },
  },
  mincer    = {
    [ "zone"  ] = "mincer",
    [ "shape" ] = { shtype = 0, radius = 3.5, center = { 0, 0, 0 } },
  },
  mosquito_bald = {
    [ "zone"  ] = "mosquito_bald",
    [ "shape" ] = { shtype = 0, radius = 3,   center = { 0, 0, 0 } },
  },
  psi_field = {
    [ "zone"  ] = "psi_field",
    [ "shape" ] = { shtype = 0, radius = 3,   center = { 0, 0, 0 } },
  },
  radioactive = {
    [ "zone"  ] = "radioactive",
    [ "shape" ] = { shtype = 0, radius = 5,   center = { 0, 0, 0 } },
  },
  sakbuzz   = {
    [ "zone"  ] = "sakbuzz",
    [ "shape" ] = { shtype = 0, radius = 4,   center = { 0, 0, 0 } },
  },
  sakbuzz_nlc = {
    [ "zone"  ] = "sakbuzz_nlc",
    [ "shape" ] = { shtype = 0, radius = 3,   center = { 0, 0, 0 } },
  },
  smallrain = {
    [ "zone"  ] = "smallrain",
    [ "shape" ] = { shtype = 0, radius = 4,   center = { 0, 0, 0 } },
  },
  sphere    = {
    [ "zone"  ] = "sphere",
    [ "shape" ] = { shtype = 0, radius = 2.8, center = { 0, 0, 0 } },
  },
  teleport_esc  = {
    [ "zone"  ] = "teleport_esc",
    [ "shape" ] = { shtype = 0, radius = 6,   center = { 0, 0, 0 } },
  },
  teleport_gar  = {
    [ "zone"  ] = "teleport_gar",
    [ "shape" ] = { shtype = 0, radius = 6,   center = { 0, 0, 0 } },
  },
  teleport_agr  = {
    [ "zone"  ] = "teleport_agr",
    [ "shape" ] = { shtype = 0, radius = 6,   center = { 0, 0, 0 } },
  },
  teleport_td   = {
    [ "zone"  ] = "teleport_td",
    [ "shape" ] = { shtype = 0, radius = 6,   center = { 0, 0, 0 } },
  },
  teleport_dt   = {
    [ "zone"  ] = "teleport_dt",
    [ "shape" ] = { shtype = 0, radius = 6,   center = { 0, 0, 0 } },
  },
  teleport_yan  = {
    [ "zone"  ] = "teleport_yan",
    [ "shape" ] = { shtype = 0, radius = 6,   center = { 0, 0, 0 } },
  },
  teleport_as   = {
    [ "zone"  ] = "teleport_as",
    [ "shape" ] = { shtype = 0, radius = 6,   center = { 0, 0, 0 } },
  },
  teleport_rad  = {
    [ "zone"  ] = "teleport_rad",
    [ "shape" ] = { shtype = 0, radius = 6,   center = { 0, 0, 0 } },
  },
  teleport_prip = {
    [ "zone"  ] = "teleport_prip",
    [ "shape" ] = { shtype = 0, radius = 6,   center = { 0, 0, 0 } },
  },
  teleport_gen  = {
    [ "zone"  ] = "teleport_gen",
    [ "shape" ] = { shtype = 0, radius = 6,   center = { 0, 0, 0 } },
  },
  teleport_zat  = {
    [ "zone"  ] = "teleport_zat",
    [ "shape" ] = { shtype = 0, radius = 6,   center = { 0, 0, 0 } },
  },
  zavesa    = {
    [ "zone"  ] = "zavesa",
    [ "shape" ] = { shtype = 0, radius = 3,   center = { 0, 0, 0 } },
  },
  zharka_static = {
    [ "zone"  ] = "zharka_static",
    [ "shape" ] = {
      shtype = 1,
      v1     = { 1, 0, 0 }, v2 ={ 0, 7, 0 }, v3 = { 0, 0, 1 },
      offset = { 0, 0, 0 },
    }
  },
}

local arts_sections = {
  [ "capsule" ] = {
    "af_capsule",
  },
  [ "modif_1" ] = {
    "af_armor_1",
    "af_babka_1",
    "af_cry_1",
    "af_dik_1",
    "af_eye_voron",
    "af_kol_1",
    "af_pudd_1",
    "af_spirit_1",
  },
  [ "modif_2" ] = {
    "af_armor_2",
    "af_babka_2",
    "af_cry_2",
    "af_dik_2",
    "af_kol_2",
    "af_pudd_2",
    "af_spirit_2",
  },
  [ "modif_3" ] = {
    "af_armor_3",
    "af_babka_3",
    "af_dik_3",
    "af_kol_3",
    "af_pudd_3",
    "af_spirit_3",
  },
  [ "simple" ] = {
    "af_ameba_mica",
    "af_ameba_slime",
    "af_ameba_slug",
    "af_blood",
    "af_buliz",
    "af_cristall",
    "af_cristall_flower",
    "af_drops",
    "af_dummy_battery",
    "af_dummy_dummy",
    "af_dummy_glassbeads",
    "af_dummy_pellicle",
    "af_dummy_spring",
    "af_electra_flash",
    "af_electra_moonlight",
    "af_electra_sparkler",
    "af_fireball",
    "af_fuzz_kolobok",
    "af_gold_fish",
    "af_gravi",
    "af_medusa",
    "af_mincer_meat",
    "af_night_star",
    "af_rusty_kristall",
    "af_rusty_sea-urchin",
    "af_rusty_thorn",
    "af_soul",
    "af_vyvert",
  },
}

-- «десь перечислены все интервалы game_vertex дл€ каждого
-- уровн€. ћожно не запуска€ игру смотреть, на каком уровне спавнитс€
-- объект
local game_vertexes = {
  l01_escape            = {    0, 251  },
  l02_garbage           = {  252, 415  },
  l03_agroprom          = {  416, 702  },
  l03u_agr_underground  = {  703, 810  },
  l04_darkvalley        = {  811, 1108 },
  l04u_labx18           = { 1109, 1167 },
  l05_bar               = { 1168, 1307 },
  l06_rostok            = { 1308, 1437 },
  l08_yantar            = { 1438, 1528 },
  l08u_brainlab         = { 1529, 1544 },
  l07_military          = { 1545, 1861 },
  l10_radar             = { 1862, 2116 },
  l11_pripyat           = { 2117, 2272 },
  l12_stancia           = { 2273, 2401 },
  l12u_sarcofag         = { 2402, 2466 },
  l12u_control_monolith = { 2467, 2516 },
  l12_stancia_2         = { 2517, 2660 },
  l10u_bunker           = { 2661, 2791 },
  atp_for_test22        = { 2792, 2861 },
  peshera               = { 2862, 2880 },
  puzir                 = { 2881, 2885 },
  aver                  = { 2886, 2908 },
  av_peshera            = { 2909, 2987 },
  limansk               = { 2988, 3027 },
  hospital              = { 3028, 3075 },
  generators            = { 3076, 3152 },
  warlab                = { 3153, 3223 },
  red_forest            = { 3224, 3323 },
  lost_village          = { 3324, 3336 },
  marsh                 = { 3337, 3581 },
  dead_city             = { 3582, 3659 },
  zaton                 = { 3660, 3699 },
  jupiter               = { 3700, 3747 },
  pripyat               = { 3748, 3770 },
  jupiter_underground   = { 3771, 3829 },
  labx8                 = { 3830, 3850 },
}

-- кол-во левел вертексов на локации
level_vertexes = {
  atp_for_test22        = 1049687,
  av_peshera            =  172637,
  aver                  = 1790762,
  dead_city             =  551769,
  generators            =  752337,
  hospital              =    7865,
  jupiter               = 1486320,
  jupiter_underground   =   41001,
  l01_escape            =  595499,
  l02_garbage           =  382663,
  l03_agroprom          =  437421,
  l03u_agr_underground  =    4932,
  l04_darkvalley        =  390125,
  l04u_labx18           =    7581,
  l05_bar               =   99539,
  l06_rostok            =   67713,
  l07_military          =  418268,
  l08_yantar            =  141471,
  l08u_brainlab         =    8008,
  l10_radar             =  227189,
  l10u_bunker           =    8821,
  l11_pripyat           =  261219,
  l12_stancia           =  477923,
  l12_stancia_2         =  264577,
  l12u_control_monolith =    3982,
  l12u_sarcofag         =   10672,
  labx8                 =    6781,
  limansk               =   61524,
  lost_village          =   49127,
  marsh                 =  528961,
  peshera               =   32341,
  pripyat               =  487255,
  puzir                 =  377572,
  red_forest            =  166431,
  warlab                =    7776,
  zaton                 = 1851251,
}

level_anoms = {
  l01_escape = {
    90, 120, 400,
    {
      mosquito_bald = 24,
      electra       = 20,
      mincer        = 17,
      sakbuzz_nlc   = 16,
      gravi         = 10,
      psi_field     =  3,
      buzz          =  2,
      teleport_esc  =  2,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      zavesa        =  1,
      radioactive   =  0,
    },
  },
  l02_garbage = {
    150, 220, 400,
    {
      sakbuzz_nlc   = 25,
      mincer        = 14,
      mosquito_bald = 14,
      gravi         = 11,
      radioactive   = 10,
      electra       = 10,
      psi_field     =  4,
      buzz          =  3,
      teleport_gar  =  3,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      zavesa        =  1,
    },
  },
  l03_agroprom = {
    150, 200, 100,
    {
      sakbuzz_nlc   = 25,
      radioactive   = 10,
      electra       = 13,
      mosquito_bald = 13,
      gravi         = 11,
      mincer        = 10,
      buzz          =  5,
      psi_field     =  4,
      teleport_agr  =  3,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      zavesa        =  1,
    },
  },
  l04_darkvalley = {
    150, 200, 100,
    {
      sakbuzz_nlc   = 23,
      electra       = 11,
      mosquito_bald = 11,
      radioactive   = 10,
      buzz          =  8,
      gravi         =  8,
      mincer        =  8,
      zharka_static =  8,
      psi_field     =  4,
      teleport_td   =  3,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      zavesa        =  1,
    }
  },
  l05_bar = {
    15, 30, 150,
    {
      electra       = 17,
      mincer        = 17,
      sakbuzz_nlc   = 15,
      mosquito_bald = 15,
      gravi         = 14,
      zharka_static =  7,
      psi_field     =  5,
      buzz          =  4,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      zavesa        =  1,
      radioactive   =  0,
    }
  },
  l06_rostok = {
    20, 30, 300,
    {
      sakbuzz_nlc   = 35,
      zharka_static = 21,
      radioactive   = 10,
      electra       =  8,
      gravi         =  6,
      mincer        =  6,
      mosquito_bald =  5,
      buzz          =  1,
      fountain      =  1,
      ice           =  1,
      psi_field     =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      teleport_dt   =  1,
      zavesa        =  1,
    }
  },
  l08_yantar = {
    30, 50, 400,
    {
      sakbuzz_nlc   = 25,
      electra       = 13,
      gravi         = 11,
      mincer        = 11,
      mosquito_bald = 11,
      radioactive   = 10,
      zharka_static =  6,
      psi_field     =  3,
      buzz          =  2,
      teleport_yan  =  2,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      zavesa        =  1,
    }
  },
  l07_military = {
    150, 200, 400,
    {
      sakbuzz_nlc   = 30,
      mosquito_bald = 12,
      electra       = 10,
      mincer        = 10,
      radioactive   = 10,
      gravi         =  8,
      zharka_static =  7,
      buzz          =  2,
      psi_field     =  2,
      teleport_as   =  2,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      zavesa        =  1,
    }
  },
  l10_radar = {
    200, 250, 100,
    {
      sakbuzz_nlc   = 30,
      electra       = 11,
      mincer        = 10,
      radioactive   = 10,
      zharka_static =  9,
      mosquito_bald =  8,
      gravi         =  8,
      buzz          =  3,
      psi_field     =  3,
      teleport_rad  =  2,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      zavesa        =  1,
    }
  },
  l11_pripyat = {
    100, 180, 90,
    {
      sakbuzz_nlc   = 20,
      electra       = 11,
      gravi         = 11,
      mincer        = 11,
      mosquito_bald = 11,
      radioactive   = 10,
      zharka_static =  9,
      buzz          =  7,
      psi_field     =  3,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      teleport_prip =  1,
      zavesa        =  1,
    }
  },
  l12_stancia = {
    120, 180, 700,
    {
      sakbuzz_nlc   = 25,
      mincer        = 13,
      electra       = 11,
      mosquito_bald = 11,
      gravi         =  9,
      psi_field     =  9,
      buzz          =  8,
      zharka_static =  8,
      sakbuzz       =  1,
      ice           =  1,
      smallrain     =  1,
      zavesa        =  1,
      fountain      =  1,
      sphere        =  1,
    }
  },
  puzir = {
    150, 220, 450,
    {
      electra       = 17,
      gravi         = 17,
      mincer        = 17,
      mosquito_bald = 17,
      buzz          = 14,
      zharka_static =  8,
      psi_field     =  4,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      zavesa        =  1,
      radioactive   =  0,
      sakbuzz_nlc   =  0,
    }
  },
  aver = {
    100, 150, 450,
    {
      sakbuzz_nlc   = 20,
      electra       = 13,
      gravi         = 13,
      mincer        = 10,
      mosquito_bald = 10,
      radioactive   = 10,
      buzz          =  8,
      psi_field     =  5,
      zharka_static =  5,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      zavesa        =  1,
    }
  },
  marsh = {
    120, 180, 100,
    {
      sakbuzz_nlc   = 17,
      mincer        = 14,
      zharka_static = 14,
      electra       = 13,
      mosquito_bald = 13,
      gravi         = 12,
      psi_field     =  6,
      buzz          =  5,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      zavesa        =  1,
      radioactive   =  0,
    }
  },
  limansk = {
    20, 30, 30,
    {
      sakbuzz_nlc   = 25,
      electra       = 15,
      gravi         = 10,
      mincer        = 10,
      mosquito_bald = 10,
      radioactive   = 10,
      zharka_static =  8,
      buzz          =  4,
      psi_field     =  2,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      zavesa        =  1,
    }
  },
  red_forest = {
    30, 50, 40,
    {
      sakbuzz_nlc   = 20,
      mincer        = 16,
      mosquito_bald = 11,
      zharka_static = 11,
      electra       = 10,
      gravi         = 10,
      buzz          =  7,
      psi_field     =  5,
      radioactive   =  4,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      zavesa        =  1,
    }
  },
  lost_village = {
    20, 30, 25,
    {
      sakbuzz_nlc   = 19,
      electra       = 18,
      mincer        = 14,
      mosquito_bald = 14,
      gravi         = 10,
      zharka_static = 10,
      psi_field     =  5,
      buzz          =  4,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      zavesa        =  1,
      radioactive   =  0,
    }
  },
  generators = {
    180, 280, 450,
    {
      sakbuzz_nlc   = 20,
      electra       = 14,
      mincer        = 14,
      mosquito_bald = 10,
      radioactive   = 10,
      gravi         =  9,
      psi_field     =  5,
      zharka_static =  5,
      buzz          =  4,
      teleport_gen  =  3,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      zavesa        =  1,
    }
  },
  atp_for_test22 = {
    180, 280, 450,
    {
      electra       = 16,
      sakbuzz_nlc   = 16,
      mincer        = 14,
      mosquito_bald = 12,
      zharka_static = 12,
      gravi         = 11,
      buzz          =  6,
      psi_field     =  5,
      fountain      =  1,
      ice           =  1,
      radioactive   =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      teleport_zat  =  1,
      zavesa        =  1,
    }
  },
  dead_city = {
    130, 180, 90,
    {
      sakbuzz_nlc   = 15,
      mosquito_bald = 13,
      electra       = 12,
      gravi         = 12,
      mincer        = 12,
      radioactive   = 11,
      zharka_static = 10,
      buzz          =  6,
      psi_field     =  3,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      zavesa        =  1,
    }
  },
  zaton = {
    180, 280, 450,
    {
      sakbuzz_nlc   = 15,
      electra       = 13,
      gravi         = 13,
      mosquito_bald = 13,
      mincer        = 12,
      radioactive   = 10,
      buzz          =  6,
      zharka_static =  5,
      psi_field     =  4,
      teleport_zat  =  3,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      zavesa        =  1,
    }
  },
  jupiter = {
    180, 280, 450,
    {
      sakbuzz_nlc   = 15,
      electra       = 13,
      gravi         = 13,
      mosquito_bald = 13,
      mincer        = 12,
      radioactive   = 11,
      buzz          =  6,
      zharka_static =  5,
      psi_field     =  3,
      teleport_zat  =  3,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      zavesa        =  1,
    }
  },
  pripyat = {
    120, 180, 100,
    {
      sakbuzz_nlc   = 20,
      electra       = 11,
      gravi         = 11,
      mincer        = 11,
      mosquito_bald = 11,
      radioactive   = 10,
      zharka_static =  9,
      buzz          =  8,
      psi_field     =  2,
      teleport_zat  =  2,
      fountain      =  1,
      ice           =  1,
      sakbuzz       =  1,
      smallrain     =  1,
      sphere        =  1,
      zavesa        =  1,
    }
  },
}

local anom_suffixes = {
  [ "atp_for_test22" ] ={ { "_weak", 10 }, { "_average", 40 }, { "_strong", 50 } },
  [ "aver"           ] ={ { "_weak", 30 }, { "_average", 50 }, { "_strong", 20 } },
  [ "dead_city"      ] ={ { "_weak", 10 }, { "_average", 50 }, { "_strong", 40 } },
  [ "generators"     ] ={ { "_weak", 10 }, { "_average", 40 }, { "_strong", 50 } },
  [ "hospital"       ] ={ { "_weak", 40 }, { "_average", 50 }, { "_strong", 10 } },
  [ "jupiter"        ] ={ { "_weak", 10 }, { "_average", 40 }, { "_strong", 50 } },
  [ "l01_escape"     ] ={ { "_weak", 20 }, { "_average", 50 }, { "_strong", 30 } },
  [ "l02_garbage"    ] ={ { "_weak", 20 }, { "_average", 50 }, { "_strong", 30 } },
  [ "l03_agroprom"   ] ={ { "_weak", 20 }, { "_average", 50 }, { "_strong", 30 } },
  [ "l04_darkvalley" ] ={ { "_weak", 20 }, { "_average", 50 }, { "_strong", 30 } },
  [ "l05_bar"        ] ={ { "_weak", 20 }, { "_average", 50 }, { "_strong", 30 } },
  [ "l06_rostok"     ] ={ { "_weak", 20 }, { "_average", 50 }, { "_strong", 30 } },
  [ "l07_military"   ] ={ { "_weak", 20 }, { "_average", 50 }, { "_strong", 30 } },
  [ "l08_yantar"     ] ={ { "_weak", 20 }, { "_average", 50 }, { "_strong", 30 } },
  [ "l10_radar"      ] ={                  { "_average", 60 }, { "_strong", 40 } },
  [ "l11_pripyat"    ] ={ { "_weak",  1 }, { "_average", 50 }, { "_strong", 49 } },
  [ "l12_stancia"    ] ={ { "_weak",  1 }, { "_average", 50 }, { "_strong", 49 } },
  [ "limansk"        ] ={ { "_weak", 20 }, { "_average", 50 }, { "_strong", 30 } },
  [ "lost_village"   ] ={ { "_weak", 40 }, { "_average", 50 }, { "_strong", 10 } },
  [ "marsh"          ] ={ { "_weak", 50 }, { "_average", 40 }, { "_strong", 10 } },
  [ "pripyat"        ] ={ { "_weak", 10 }, { "_average", 40 }, { "_strong", 50 } },
  [ "puzir"          ] ={ { "_weak", 20 }, { "_average", 50 }, { "_strong", 30 } },
  [ "red_forest"     ] ={ { "_weak", 20 }, { "_average", 50 }, { "_strong", 30 } },
  [ "zaton"          ] ={ { "_weak", 10 }, { "_average", 40 }, { "_strong", 50 } },
}

local level_arts = {
  atp_for_test22 = {
    3, 4,
    {
      [ "simple"  ] = 97,
      [ "modif_1" ] =  3,
    }
  },
  l01_escape = {
    3, 4,
    {
      [ "simple"  ] = 97,
      [ "modif_1" ] =  3,
    }
  },
  l02_garbage = {
    3, 4,
    {
      [ "simple"  ] = 97,
      [ "modif_1" ] =  3,
    }
  },
  l04_darkvalley = {
    3, 4,
    {
      [ "simple"  ] = 97,
      [ "modif_1" ] =  3,
    }
  },
  l05_bar = {
    0, 1,
    {
      [ "simple"  ] = 97,
      [ "modif_1" ] =  3,
    }
  },
  l07_military = {
    1, 2,
    {
      [ "simple"  ] = 97,
      [ "modif_1" ] =  3,
    }
  },
  puzir = {
    3, 4,
    {
      [ "simple"  ] = 97,
      [ "modif_1" ] =  3,
    }
  },
  aver = {
    3, 4,
    {
      [ "simple"  ] = 97,
      [ "modif_1" ] =  3,
    }
  },
  l03_agroprom = {
    3, 4,
    {
      [ "simple"  ] = 96,
      [ "modif_1" ] =  3,
      [ "modif_2" ] =  1,
    }
  },
  l06_rostok = {
    1, 2,
    {
      [ "simple"  ] = 94,
      [ "modif_1" ] =  3,
      [ "modif_2" ] =  2,
      [ "modif_3" ] =  1,
    }
  },
  l08_yantar = {
    1, 2,
    {
      [ "simple"  ] = 94,
      [ "modif_1" ] =  3,
      [ "modif_2" ] =  2,
      [ "modif_3" ] =  1,
    }
  },
  red_forest = {
    3, 4,
    {
      [ "simple"  ] = 83,
      [ "modif_2" ] =  8,
      [ "modif_3" ] =  7,
      [ "capsule" ] =  2,
    }
  },
  lost_village = {
    0, 1,
    {
      [ "simple"  ] = 83,
      [ "modif_2" ] =  8,
      [ "modif_3" ] =  7,
      [ "capsule" ] =  2,
    }
  },
  generators = {
    3, 4,
    {
      [ "simple"  ] = 83,
      [ "modif_2" ] =  8,
      [ "modif_3" ] =  7,
      [ "capsule" ] =  2,
    }
  },
  marsh = {
    4, 8,
    {
      [ "simple"  ] = 82,
      [ "modif_2" ] =  9,
      [ "modif_3" ] =  7,
      [ "capsule" ] =  2,
    }
  },
  l10_radar = {
    3, 4,
    {
      [ "simple"  ] = 76,
      [ "modif_2" ] =  8,
      [ "modif_3" ] =  8,
      [ "capsule" ] =  7,
      [ "modif_1" ] =  1,
    }
  },
  limansk = {
    3, 4,
    {
      [ "simple"  ] = 74,
      [ "modif_2" ] = 10,
      [ "modif_3" ] =  9,
      [ "capsule" ] =  7,
    }
  },
  l11_pripyat = {
    3, 4,
    {
      [ "simple"  ] = 73,
      [ "modif_2" ] =  9,
      [ "modif_3" ] =  9,
      [ "capsule" ] =  8,
      [ "modif_1" ] =  1,
    }
  },
  dead_city = {
    3, 4,
    {
      [ "simple"  ] = 73,
      [ "modif_2" ] = 10,
      [ "modif_3" ] =  9,
      [ "capsule" ] =  8,
    }
  },
  zaton = {
    3, 4,
    {
      [ "simple"  ] = 68,
      [ "modif_2" ] = 16,
      [ "modif_3" ] =  8,
      [ "capsule" ] =  8,
    }
  },
  jupiter = {
    3, 4,
    {
      [ "simple"  ] = 68,
      [ "modif_2" ] = 16,
      [ "modif_3" ] =  8,
      [ "capsule" ] =  8,
    }
  },
  pripyat = {
    3, 4,
    {
      [ "simple"  ] = 68,
      [ "modif_2" ] = 16,
      [ "modif_3" ] =  8,
      [ "capsule" ] =  8,
    }
  },
}


--[[-------------------------- variable and table ---------------------end--]]
--[[-------------------------- function for spawn --------------------------]]


local anti_spawn_zones = {}
function add_anti_spawn_zone( pos, radius )
  table.insert( anti_spawn_zones, { pos, radius } )
end


local restrictions

function init()
  local blow  = amk.load_variable( "blowout", 0 )
  local lname = level.name()
  ASSERT(
    level_vertexes[ lname ],
    "[%s]: level_vertexes.%s not found", script_name(), lname
  )
  ASSERT(
    level_vertexes[ lname ] == level.vertex_count(),
    "[%s]: wrong level_vertexes.%s: %s instead of %s",
    script_name(), lname, level_vertexes[ lname ], level.vertex_count()
  )
  if not level_anoms[ lname ] then return end
  local anoms_sect = "amk_anoms." .. lname
  if sys_ini:section_exist( anoms_sect ) then
    for a = 0, sys_ini:line_count( anoms_sect ) - 1 do
      local result, id, value = sys_ini:r_line( anoms_sect, a, "", "" )
      local x, y, z, r, until_info = unpack( parse_names( id ) )
      ASSERT(
        (
              x and tonumber( x )
          and y and tonumber( y )
          and z and tonumber( z )
          and r and tonumber( r )
        ),
        "[%s]: error while parsing safe zones for %s at section's line %d",
        script_name(), lname, a + 1
      )
      if ( not until_info ) or db.actor:dont_has_info( until_info ) then
        add_anti_spawn_zone(
          vector():set( tonumber( x ), tonumber( y ), tonumber( z ) ),
          tonumber( r )
        )
      end
    end
  end
  restrictions = restricted_areas()
  if blow > 0 and blow < 4 then return end
  -- Ќе мен€ть аномалии в √оспитале, пока не сварен  амень ”дачи и не оживлена
  -- ћуха. »наче удал€ютс€ те аномалии, которые нужны дл€ этого дела и все,
  -- тупик.
  if
    lname == "hospital"
    and db.actor:has_info( "spawnim_3otsek" )
    and not db.actor:has_info( "spawn_hospit_live" )
  then
    return
  end
  local keep  = db.actor:has_info( "testsak_" .. level.name() )
  local anoms = pre_blow_off( keep )
  randomize_arts()
  if keep then
    randomize_anoms( anoms )
  else
    generate_anoms()
  end
  generate_new_arts()
  restrictions = restricted_areas()
end


function generate_new_arts()
  if
    level_arts[ level.name() ]
    and not has_alife_info( "testsak_" .. level.name() )
  then
    local cnt = generate_arts()
    ogse.save_var(
      "amk_anoms.new_arts_count",
      ogse.load_var( "amk_anoms.new_arts_count", 0 ) + cnt,
      "u32"
    )
    db.actor:give_info_portion( "testsak_" .. level.name() )
  end
end


function get_new_arts_count()
  return ogse.load_var( "amk_anoms.new_arts_count", 0 )
end


function configure_restrictions( check_func )
  local lname  = level.name()
  restrictions = restricted_areas()
  restrictions:add_level_vertex_id( db.actor:level_vertex_id() )
  restrictions:add_position( db.actor:position(), db.actor:radius() )
  dsh_respawn.iterate_respawners(
    function( resp )
      local pos, lv, gv = unpack( resp.xyzlg )
      local lid = location_id_by_gvid( gv )
      if lid then
        local resp_lname = level_system_name_by_lid( lid )
        if resp_lname == lname then
          restrictions:add_level_vertex_id( lv )
          restrictions:add_position( pos, 5 )
        end
      end
    end
  )
  dsh_alife.iterate_items(
    function( sobj )
      if object_level_name( sobj ) == lname then
        if ( not check_func ) or check_func( sobj ) then
          local skip = false
          if sobj:clsid() == clsid.script_restr then
            local sr = sobj:get_space_restrictor()
            if
              sr.restrictor_type == global_flags.eDefaultRestrictorTypeNone
              or sr.restrictor_type == global_flags.eRestrictorTypeNone
            then
              skip = true
            end
          elseif
            sobj:clsid() == clsid.respawn
            or sobj:clsid() == clsid.smart_terrain
          then
            skip = true
          elseif sobj:clsid() == clsid.level_changer then
            local ini = sobj:spawn_ini()
            if ini:section_exist( "pt_move_if_reject" ) then
              local path = get_string( "pt_move_if_reject", "path", nil, ini )
              if path then
                ASSERT(
                  level.patrol_path_exists( path ),
                  "[%s]: patrol_path %s not found", script_name(), path
                )
                local pp = patrol( path )
                restrictions:add_level_vertex_id( pp:level_vertex_id( 0 ) )
                restrictions:add_position( pp:point( 0 ), 5 )
              end
            end
          end
          if not skip then
            restrictions:add_level_vertex_id( sobj.m_level_vertex_id )
            restrictions:add_position( sobj.position, 5 )
          end
        end
      else
        if sobj:clsid() == clsid.level_changer then
          local lc = sobj:get_level_changer()
          if level_system_name_by_gvid( lc.dest_game_vertex_id ) == level.name() then
            restrictions:add_level_vertex_id( lc.dest_level_vertex_id )
            restrictions:add_position( lc.dest_position, 5 )
          end
        end
      end
    end,
    65535 -- на земле
  )
end


function after_blow_on()
  sak.off_testobj()
  configure_restrictions()
  if level_anoms[ level.name() ] then
    generate_anoms()
    move_mgr.invalidate_pp_accessibility()
  end
  generate_new_arts()
  restrictions = restricted_areas()
end


function get_all_mobs( lname )
  local mobs = {}
  for id, sobj in pairs( se_stalker.stalkers ) do
    if
      ( not lname )
      or object_level_name( sobj ) == lname
    then
      table.insert( mobs, sobj )
    end
  end
  for id, sobj in pairs( se_monster.monsters ) do
    if
      ( not lname )
      or object_level_name( sobj ) == lname
    then
      table.insert( mobs, sobj )
    end
  end
  return mobs
end


function pre_blow_off( keep )
  local anoms = {}
  configure_restrictions(
    function( sobj )
      if is_generated_anomaly( sobj ) then
        if keep then
          table.insert( anoms, sobj )
        else
          dsh_alife.release( sobj )
        end
        return false
      end
      return true
    end
  )
  return anoms
end


function cleanup_arts()
  local known_arts  = {}
  local known_sects = {
    [ "af_buliz" ] = true,
  }
  for lname, alist in pairs( level_arts ) do
    if not known_arts[ lname ] then
      known_arts[ lname ] = {}
    end
    for k, v in pairs( alist[ 3 ] ) do
      local sect = arts_sections[ k ]
      if sect then
        for _, k in ipairs( sect ) do
          known_arts[ lname ][ k ] = true
          known_sects[ k ] = true
        end
      end
    end
  end
  dsh_alife.iterate_items(
    function( sobj )
      local sect = sobj:section_name()
      local prop = amk_utils.get_item_props( sect )
      if prop.af_base then sect = prop.af_base end
      if known_sects[ sect ] then
        local lname = object_level_name( sobj )
        if
          sect == "af_buliz" then
          dsh_alife.release( sobj )
        end
      end
    end,
    65535 -- на земле
  )
  for k, v in pairs( amk_offline_alife.off_npcs ) do
    v.artefacts = {}
  end
end


function generate_anoms()
  local lname = level.name()
  local v     = level_anoms[ lname ]
  if not v then return end
  local cnt   = 0
  local mxx   = math.random( v[ 1 ], v[ 2 ] )
  local pt    = profile_timer()
  pt:start()
  while cnt < mxx do
    local res = generate_anomaly()
    if res then
      cnt = cnt + 1
      add_anomaly( res.id, res.position, 5, res )
      dsh_alife.add_item( alife():object( res.id ) )
    elseif res == false then
      log2(
        "[%s]: I give up here: %s, %s / %s anomalies generated",
        script_name(), lname, cnt, mxx
      )
      break
    end
  end
  pt:stop()
  log2(
    "[%s]: %s anomalies generated, time spent = %s",
    script_name(), cnt, pt:time()
  )
end


function generate_arts( need_cnt )
  local cnt   = 0
  local lname = level.name()
  local v     = level_arts[ lname ]
  if v then
    local mxx
    if need_cnt then
      cnt, mxx = 0, need_cnt
    else
      local min_cnt, max_cnt = v[ 1 ], v[ 2 ]
      local new_arts_cnt     = get_new_arts_count()
      if new_arts_cnt > 100 then
        min_cnt = min_cnt - 2
      elseif new_arts_cnt > 50 then
        min_cnt = min_cnt - 1
      end
      if min_cnt < 0 then min_cnt = 0 end
      cnt = 0
      mxx = dsh.get_next_random(
        "amk_anoms.generate_arts." .. lname, min_cnt, max_cnt
      )
    end
    while cnt < mxx do
      local res = generate_art()
      if res then
        cnt = cnt + 1
        if not need_cnt then
          dsh_alife.add_item( alife():object( res.id ) )
        end
      elseif res == false then
        log2(
          "[%s]: I give up here: %s, %s / %s artefacts generated",
          script_name(), lname, cnt, mxx
        )
        break
      end
    end
  end
  return cnt
end


function calc_new_free_pos( pre_check_coords_func )
  local lvx    = level.vertex_count() - 1
  local new_lv = math.random( 0, lvx )
  if restrictions:check_level_vertex_id( new_lv ) then
    local found
    if new_lv < lvx then
      for i = new_lv + 1, lvx do
        if not restrictions:check_level_vertex_id( i ) then
          found = i
          break
        end
      end
    end
    if not found and new_lv > 0 then
      for i = new_lv - 1, 0, -1 do
        if not restrictions:check_level_vertex_id( i ) then
          found = i
          break
        end
      end
    end
    if not found then
      log2(
        "[%s]: can't find any free level vertex for %s",
        script_name(), level.name()
      )
      return false
    end
    new_lv = found
  end
  restrictions:add_level_vertex_id( new_lv )
  local pos = level.vertex_position( new_lv )
  if
    check_coordinates( pos )
    and (
      ( not pre_check_coords_func )
      or pre_check_coords_func( pos )
    )
  then
    local new_gv = cross_table():vertex( new_lv ):game_vertex_id()
    return pos, new_gv, new_lv
  end
end


function generate_anomaly()
  local pos, new_gv, new_lv = calc_new_free_pos()
  if pos then
    restrictions:add_position( pos, 5 )
    return spawn_rand_anom( pos, new_gv, new_lv )
  elseif pos == false then
    return false
  end
end


function randomize_arts()
  local pt, cnt = profile_timer(), 0
  pt:start()
  local known_arts = {}
  for lname, alist in pairs( level_arts ) do
    if not known_arts[ lname ] then
      known_arts[ lname ] = {}
    end
    for k, v in pairs( alist[ 3 ] ) do
      local sect = arts_sections[ k ]
      if sect then
        for _, k in ipairs( sect ) do
          known_arts[ lname ][ k ] = true
        end
      end
    end
  end
  local found_arts = {}
  dsh_alife.iterate_items(
    function( sobj )
      local sect  = sobj:section_name()
      local lname = object_level_name( sobj )
      if lname and lname == level.name() then
        local prop = amk_utils.get_item_props( sect )
        if prop.af_base then sect = prop.af_base end
        if
          known_arts[ lname ] and known_arts[ lname ][ sect ]
          and not dsh.is_handmade_artefact( sobj )
        then
          table.insert( found_arts, {
            [ "dist" ] = sobj.position:distance_to( db.actor:position() ),
            [ "sobj" ] = sobj,
          })
        end
      end
    end,
    65535 -- на земле
  )
  table.sort(
    found_arts, function( a, b ) return a.dist < b.dist end
  )
  if table.getn( found_arts ) > 0 then
    dsh_alife.release( table.remove( found_arts ).sobj )
    -- log2( "[%s]: keep %s artefact(s)", script_name(), table.getn( found_arts ) )
  end
  for _, t in ipairs( found_arts ) do
    local sobj = t.sobj
    for i = 1, 100 do
      local pos, new_gv, new_lv = calc_new_free_pos(
        function( np )
          return
            np:distance_to( db.actor:position() ) > t.dist
            and np:distance_to( sobj.position ) > 50
        end
      )
      if pos then
        alife():teleport_object( sobj.id, pos, new_lv, new_gv )
        restrictions:add_level_vertex_id( new_lv )
        restrictions:add_position( pos, 5 )
        cnt = cnt + 1
        break
      elseif pos == false then
        log2(
          "[%s]: stop relocation process here: %s/%s, current art is %s",
          script_name(), cnt, table.getn( found_arts ), sobj:name()
        )
        return false
      end
    end
  end
  pt:stop()
  log2(
    "[%s]: artefacts randomized, time spent = %s",
    script_name(), pt:time()
  )
end


function generate_art( section, pre_check_coords_func )
  local pos, new_gv, new_lv = calc_new_free_pos( pre_check_coords_func )
  if pos then
    local sobj
    if section then
      local prop = amk_utils.get_item_props( section )
      if prop.has_af_dyn then
        section = make_dyn_art_sect( section )
        prop    = amk_utils.get_item_props( section )
      end
      if prop.af_bio_sect then section = prop.af_bio_sect end
      sobj = spawn_art( section, pos, new_gv, new_lv )
    else
      sobj = spawn_rand_arts( pos, new_gv, new_lv )
    end
    restrictions:add_position( pos, 5 )
    return sobj
  elseif pos == false then
    return false
  end
end


function spawn_rand_anom( pos, gv, lv )
  local section, shape = get_random_anomaly_sect()
  ASSERT(
    section, "got nil from get_random_anomaly_sect() on %s", level.name()
  )
  return spawn_anomaly( section, pos, lv, gv, shape, "on" )
end


function get_anom_params( sect )
  return anoms_sections[ sect ]
end


function get_random_anomaly_sect( lname )
  if not lname then lname = level.name() end
  local rnd_max   = 0
  local anomalies = {}
  for k, w in pairs( level_anoms[ lname ][ 4 ] ) do
    rnd_max = rnd_max + w
    local t = {
      [ "sect"   ] = k,
      [ "weight" ] = w,
    }
    table.insert( anomalies, t )
  end
  table.sort(
    anomalies,
    function( a, b ) return a.weight > b.weight end
  )
  local rnd = math.random( 0, rnd_max )
  local params
  for _, v in ipairs( anomalies ) do
    rnd = rnd - v.weight
    if rnd <= 0 then
      params = get_anom_params( v.sect )
      local rnd = math.random( 100 )
      local suffix
      if anom_suffixes[ lname ] then
        for _, v in ipairs( anom_suffixes[ lname ] ) do
          local s, n = unpack( v )
          if rnd <= n then
            suffix = s
            break
          end
          rnd = rnd - n
        end
      else
        local suffixes = { "_weak", "_average", "_strong" }
        suffix = suffixes[ math.random( table.getn( suffixes ) ) ]
      end
      local section  = "amk_zone_" .. params.zone .. suffix
      return section, params.shape
    end
  end
end


function get_random_art_sect( lname )
  if not lname then lname = level.name() end
  if not level_arts[ lname ] then return end
  local rnd_max = 0
  local arts    = {}
  for k, w in pairs( level_arts[ lname ][ 3 ] ) do
    rnd_max = rnd_max + w
    local t = {
      [ "sect"   ] = k,
      [ "weight" ] = w,
    }
    table.insert( arts, t )
  end
  table.sort(
    arts,
    function( a, b ) return a.weight > b.weight end
  )
  local rnd = dsh.get_next_random(
    "amk_anoms.get_random_art_sect." .. lname, 0, rnd_max
  )
  for _, v in ipairs( arts ) do
    rnd = rnd - v.weight
    if rnd <= 0 then
      local items = arts_sections[ v.sect ]
      if table.getn( items ) > 1 then
        local rnd = dsh.get_next_random(
          "amk_anoms.get_random_art_sect." .. lname, table.getn( items )
        )
        return items[ rnd ]
      else
        return items[ 1   ]
      end
    end
  end
end


function spawn_rand_arts( pos, gv, lv )
  local sect = get_random_art_sect()
  local prop = amk_utils.get_item_props( sect )
  if prop.has_af_dyn then
    sect = make_dyn_art_sect( sect )
    prop = amk_utils.get_item_props( sect )
  end
  if prop.af_bio_sect then sect = prop.af_bio_sect end
  return spawn_art( sect, pos, gv, lv )
end


function spawn_anomaly( section, pos, lv, gv, shape, status )
  local sobj = alife():create( section, pos, lv, gv )
  local pk   = get_netpk( sobj, 1 )
  ASSERT( ( pk and pk:isOk() ), "can't read netpacket of %s", sobj:name() )
  local data = pk:get()
  if shape.shtype == 0 then
    data.shapes:addSphere(
      shape.radius, vector():set( unpack( shape.center ) )
    )
  else
    data.shapes:addBox(
      vector():set( unpack( shape.v1 ) ),
      vector():set( unpack( shape.v2 ) ),
      vector():set( unpack( shape.v3 ) ),
      vector():set( unpack( shape.offset ) )
    )
  end
  pk:set( data )
  return sobj
end


function spawn_art( section, pos, gv, lv )
  if section then
    return amk.spawn_item( section, pos, gv, lv )
  end
end


function is_generated_anomaly( sobj )
  if sobj.parent_id ~= 65535 then return false end
  local sect = sobj:section_name()
  return
    sect == "zone_ice"          -- оставлено дл€ совместимости сейвов
    or string.find( sect,        "amk_zone_", 1, true ) ~= nil
    or string.find( sobj:name(), "amk_zone_", 1, true ) ~= nil
end


-- аномалии, которые не исчезнут при Ќ», да и вообще
function check_exclusion( obj, map )
  if is_generated_anomaly( obj ) then return false end
  if not level_anoms[ map ]      then return true  end
  local obj_name = obj:name()
  return
    get_bool( obj:section_name(), "amk_anoms.check_exclusion", false )
    or string.find( obj_name, "zone_tuman" )       -- ќстрова туман 
    or string.find( obj_name, "zat_", 1, true )
    or string.find( obj_name, "zone_ozero" )
    or string.find( obj_name, "zone_fly_island" )  -- ќстрова парение
    or string.find( obj_name, "_snp" )             -- —найпер
    or string.find( obj_name, "anim_ph_" )         -- јномальные объекты
    or string.find( obj_name, "propeller" )        -- ѕропеллер
    or string.find( obj_name, "sky_anomaly" )      -- Sky_Anomaly
    -- перемещающа€с€ электра ( ордон)
    or string.find( obj_name, "esc_zone_witches" )
    -- электра на колесе обозрени€ (÷ѕ)
    or string.find( obj_name, "pri_zone_witches" )
    or string.find( obj_name, "zone_topolinypuh" ) -- пух (–адар)
    -- холодцы в шахте ( расный Ћес)
    or string.find( obj_name, "red_zone_acidic" )
    -- торнадо в подвале (Ћиманск)
    or string.find( obj_name, "podval_tornado_strong" )
    -- фонтан в фонтане (ћ√)
    or string.find( obj_name, "dcity_fontan_fountain_average" )
    -- электры везде (–осток)
    or string.find( obj_name, "rostok_zone_witches" )
    -- жарки в тоннеле (–осток)
    or string.find( obj_name, "rostok_zone_zharka_static" )
    -- эпична€ смерть псевдоплоти ( ордон)
    or string.find( obj_name, "tutorial" )
    or (
      -- почему именно там?
      string.find( obj_name, "_mincer" ) and map ~= "l11_pripyat"
    )
end


function check_anti_spawn_zones( pos )
  for _, v in ipairs( anti_spawn_zones ) do
    local p, r = unpack( v )
    if pos:distance_to( p ) <= r then return false end
  end
  return true
end


function check_hideouts( pos )
  local hides = amk_hideouts.hide[ level.name() ]
  if hides then
    for i, o in ipairs( hides ) do
      if o.zone then
        for j, v in ipairs( o.zone ) do
          local tmp
          if v.p3 then
            tmp = amk.check_npc_in_box(
              pos,
              vector():set( unpack( v.p1 ) ),
              vector():set( unpack( v.p2 ) ),
              vector():set( unpack( v.p3 ) )
            )
          else
            tmp = amk.check_npc_in_box(
              pos,
              vector():set( unpack( v.p1 ) ),
              vector():set( unpack( v.p2 ) )
            )
          end
          if tmp == true then return false end
        end
      end
    end
  end
  return true
end


function check_coordinates( pos )
  if not check_anti_spawn_zones( pos ) then return false end
  if restrictions:check_position( pos, 5 ) then return false end
  if not check_hideouts( pos ) then return false end
  return true
end


function is_anomaly( class_id, sobj )
  if sobj and is_generated_anomaly( sobj ) then return true end
  return ( class_id and anoms_classes[ class_id ] == true )
end


function bind( obj )
  obj:bind_object( anom_binder( obj ) )
end


class "anom_binder" ( object_binder )
function anom_binder:__init( obj ) super( obj )
  self.sm = ogse_signals.get_mgr()
end


function anom_binder:net_spawn( sobj )
  if not object_binder.net_spawn( self, sobj ) then
    return false
  end
  add_anomaly( sobj.id, sobj.position, self.object:get_shape_radius(), sobj )
  self.sm:call( "on_anomaly_spawn", self.object, self )
  return true
end


function anom_binder:net_destroy()
  remove_anomaly( self.object:id() )
  self.sm:call( "on_anomaly_net_destroy", self.object, self )
  object_binder.net_destroy( self )
end


function get_radius_for_section( section )
  return get_float( section, "effective_radius", 2 )
end


anom_list = {}
function add_anomaly( id, pos, radius, sobj )
  local lname = object_level_name( sobj )
  anom_list[ id ] = {
    pos      = pos,
    clsid    = sobj:clsid(),
    radius   = radius or 0,
    section  = sobj:section_name(),
    location = lname
  }
end


function remove_anomaly( id )
  anom_list[ id ] = nil
end


function get_nearest_anomaly( npc )
  return get_nearest_anomaly_for_pos( npc:position() )
end


function get_nearest_anomaly_for_pos( posn )
  local anomid, pos, radius, dist
  local mindist = 10000000
  for id, o in pairs( anom_list ) do
    dist = posn:distance_to( o.pos ) - o.radius
    if dist < mindist then
      mindist = dist
      anomid  = id
      pos     = o.pos
      radius  = o.radius
    end
  end
  return anomid, pos, radius, mindist
end


function get_anomaly_list( npc, radius )
  return get_anomaly_list_for_pos( npc:position(), radius )
end


function get_anomaly_list_for_pos( posn, radius )
  local ret = {}
  for id, o in pairs( anom_list ) do
    local sobj = alife():object( id )
    if sobj then
      local dist = posn:distance_to( o.pos ) - o.radius
      if dist < radius then
        table.insert(
          ret, { id = id, name = sobj:name(), pos = o.pos, radius = o.radius }
        )
      end
    end
  end
  return ret
end


function make_dyn_art_sect( sect, min, bio )
  if min and min > 1 then
    min = ( min == 2 and 4  )
      or  ( min == 3 and 10 )
      or  ( min == 4 and 17 ) or 21
  else
    min = 1
  end
  local suff
  local arts_dyn = dsh.get_next_random(
    "amk_anoms.make_dyn_art_sect." .. level.name(), min, 21
  )
  if arts_dyn     >=  1 and arts_dyn <=  3 then
    suff = "_dyn1d"
  elseif arts_dyn >=  4 and arts_dyn <=  9 then
    suff = "_dyn2d"
  elseif arts_dyn >= 10 and arts_dyn <= 16 then
    suff = "_dyn3d"
  elseif arts_dyn >= 17 and arts_dyn <= 20 then
    suff = "_dyn4d"
  else
    suff = "_dyn5d"
  end
  local dyn_sect = sect .. suff
  if sys_ini:section_exist( dyn_sect ) then
    sect = dyn_sect
  end
  if bio then
    local prop = amk_utils.get_item_props( sect )
    if prop.af_bio_sect then sect = prop.af_bio_sect end
  end
  return sect
end


function randomize_anoms( anoms )
  local paused_tname = "amk_anoms.randomize_anoms.paused"
  if ogse_st_mgr.timer_exists( paused_tname ) then
    local t = ogse_st_mgr.get_timer( paused_tname )
    log2(
      "[%s]: randomize_anoms() paused: %s",
      script_name(), t:get_end_time():diffSec( game.get_game_time() )
    )
    return
  end
  local pt, cnt = profile_timer(), 0
  pt:start()
  for _, sobj in ipairs( anoms ) do
    for i = 1, 100 do
      local pos, new_gv, new_lv = calc_new_free_pos()
      if pos then
        alife():teleport_object( sobj.id, pos, new_lv, new_gv )
        restrictions:add_level_vertex_id( new_lv )
        restrictions:add_position( pos, 5 )
        cnt = cnt + 1
        break
      elseif pos == false then
        log2(
          "[%s]: stop relocation process here: %s/%s, current anomaly is %s",
          script_name(), cnt, table.getn( anoms ), sobj:name()
        )
        return false
      end
    end
  end
  pt:stop()
  log2(
    "[%s]: %s anomalies randomized, time spent = %s",
    script_name(), cnt, pt:time()
  )
  local t = ogse_st_mgr.start_gtimer(
    paused_tname, math.random( 10 ) * 3600,
    "amk_anoms.randomize_anoms_unpaused"
  )
  log2(
    "[%s]: start randomize_anoms() pause: %s",
    script_name(), t:get_end_time():diffSec( game.get_game_time() )
  )
end

function randomize_anoms_unpaused() end


class "restricted_areas"
function restricted_areas:__init()
  self.vertexes  = {}
  self.positions = {}
end


function restricted_areas:add_level_vertex_id( lvid )
  self.vertexes[ lvid ] = true
end


function restricted_areas:add_position( pos, radius )
  table.insert( self.positions, { pos, radius } )
end


function restricted_areas:check_level_vertex_id( lvid )
  return self.vertexes[ lvid ]
end


function restricted_areas:check_position( pos, radius )
  for _, t in ipairs( self.positions ) do
    local p, r = unpack( t )
    if pos:distance_to( p ) <= r + radius then return true end
  end
  return false
end
