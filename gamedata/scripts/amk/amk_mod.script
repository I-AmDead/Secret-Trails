

function attach(sm)
    sm:subscribe({signal = "on_use",       fun = this.treasure_create})
    sm:subscribe({signal = "on_spawn",     fun = this.first_run})
    sm:subscribe({signal = "on_spawn",     fun = this.check_spawn})
    sm:subscribe({signal = "on_npc_use",   fun = this.check_usable_item})
    sm:subscribe({signal = "on_npc_spawn", fun = this.build_btrs_table})
    sm:subscribe({signal = "on_ph_spawn",  fun = this.build_btrs_table})
end

function treasure_create(obj)
    local section = obj:section()
    if section == "treasure_item" then
        local sobj = alife():create("m_inventory_box", db.actor:position(), db.actor:level_vertex_id(),
            db.actor:game_vertex_id())
        sobj = alife():object(sobj.id)
        sobj.custom_data = "[logic]\ncfg = scripts\\treasure_inventory_box.ltx\n"
        sobj:used_ai_locations(false)
    end
end

-- '*******************************************************************************
-- '   **   **   **   **   **    **   **   **        FIRST_RUN          **   **   **   **   **    **   **   **   ** 
-- '*******************************************************************************
function first_run()
    -- На момент вызова этой функции актор уже доступен - переделано на поршень.
    if has_alife_info("x_first_run") then
        return
    end

    ogse.spawn_item_in_inv("matras")

    alife():create("x18_zapiska_ruk", vector():set(21.6, -5.64, -18.28), 5991, 1140)
    alife():create("x16_zapiska_ruk", vector():set(-128.0, 22.5, -30.0), 35, 1529)

    spawn_military_btr()
    spawn_fuel()

    dsh_alife.invalidate_items()

    db.actor:give_info_portion("x_first_run")
end

-- '****************************************************************************
-- '   **   **   **   **   **    **   **   **        CHECK_SPAWN          **   *
-- '****************************************************************************

function check_spawn()
    if ogse.var_exists("START_GAME") then return end

    spawn_unspawned_respawners()

    local obj = alife():story_object(6001)
    if obj then
        level.map_add_object_spot_ser(obj.id, "level_changer", "to_pripyat")
    end

    local obj = alife():story_object(6002)
    if obj then
        level.map_add_object_spot_ser(obj.id, "level_changer", "to_darkvalley")
    end

    local obj = alife():story_object(6000)
    if not obj then
        alife():create(6520)
        obj = alife():story_object(6000)
    end

    braad_test.delete_new_lc(833, "info_way_pripyat")
    braad_test.delete_new_lc(1007, "info_way_radar")

    ogse.save_var("START_GAME", true)
end

-- '*******************************************************************************
-- '   **   **   **   **   **    **   **   **      AF_TRANSFORM         **   **   **   **   **    **   **   **
-- '*******************************************************************************

-- проверка на артефакт вошедший в зону
function af_on_enter_zone(obj)
    local is_komponent = get_bool(obj:section(), "is_komponent", false)

    -- проверка не один ли это из компонентов
    if not is_komponent then
        return
    end

    local hasanom, anom_id, anom_pos, cls, dist, anom_radius, sect_anom =
        ogse_anomaly.get_nearest_anomaly_by_point(obj:position())

    if not (anom_id and dist < 5) then
        return
    end

    local lv = level.object_by_id(anom_id):level_vertex_id()
    local gv = level.object_by_id(anom_id):game_vertex_id()

    if gv == 65535 then
        gv = obj:game_vertex_id()
    end

    if gv == 65535 then
        gv = db.actor:game_vertex_id()
    end

    if gv == 65535 then
        return
    end -- похоже, что рядом нету вертекса

    -- предмет подходит - отправляем его на экспертизу
    -- узнаем не съели ли его или вvложили в нvчку
    local tbl = {
        anom_id = anom_id,
        obj_id = obj:id(),
        lv = lv,
        gv = gv
    }
    dsh.start_timer("timer_drop_obj_varka", 0.2, "amk_mod.timer_drop_varka", tbl)
end

-- проверка: является ли компонентом для варки
-- параметр - название секции
function timer_drop_varka(tbl)
    local sobj = alife():object(tbl.obj_id)
    if sobj and sobj.parent_id == 65535 then
        local obj = level.object_by_id(tbl.obj_id)
        local anom = level.object_by_id(tbl.anom_id)
        if obj and anom then
            check_af_transform(obj, anom, tbl.lv, tbl.gv)
        end
    end
end

-- проверяет рецептv и компонетv
-- если всї в порядке - запускает варку/мутациі
function check_af_transform(obj, anom, lv, gv)
    -- поиск по аномалиям
    local is_anomaly = get_bool(anom:section(), "is_anomaly", false)
    log3("anom:section() %s is_anomaly %s", anom:section(), is_anomaly)
    if not is_anomaly then
        return
    end
    local recipe_fits = false
    -- собираем рецептv, в которvх участвует даннvй компонент
    local component_sect_string, lucky_sect_string, bad_sect_string
    local lucky_percent, bad_percent, time_vector, anomaly_remove_bool

    for info, recipe in pairs(split_comma_separated_list(get_string(anom:section(), "anomaly_recipes"))) do
        component_sect_string = get_string("transform_" .. recipe, "components")
        if db.actor:has_info(recipe) and component_sect_string == obj:section() then -- есть рецепт и этот компонент в нём участвует
            lucky_sect_string = get_string("transform_" .. recipe, "lucky_sect")
            lucky_percent = get_u32("transform_" .. recipe, "lucky_percent")
            bad_percent = get_u32("transform_" .. recipe, "bad_percent")
            bad_sect_string = get_string("transform_" .. recipe, "bad_sect")
            time_vector = get_vector("transform_" .. recipe, "time")
            anomaly_remove_bool = get_bool("transform_" .. recipe, "remove_anomaly")
            if has_alife_info("acv_art") then
                lucky_percent = lucky_percent + 10
                bad_percent = bad_percent - 10
            end
            recipe_fits = true
            break
        end
    end

    if not recipe_fits then
        return
    end

    if obj and not obj:parent() then
        -- если компонент есть в рецепте
        if component_sect_string == obj:section() then
            -- устанавливаем все параметры для рецепта, возможно из умолчаний
            local result_sect, luck = af_select_result(lucky_percent, bad_percent, bad_sect_string, lucky_sect_string,
                component_sect_string)

            if not lucky_sect_string or not lucky_percent or not bad_percent or not bad_sect_string or not time_vector or
                anomaly_remove_bool == nil or (not lucky_sect_string and not anomaly_remove_bool) or lucky_percent +
                bad_percent > 100 then
                -- кривой рецепт  - выходим
                return
            end
            log3("stage 7")
            -- неудача
            if not luck then
                anomaly_remove_bool = false
            end

            -- запускаем варку/мутацию
            local t = { -- сохраняемые данные
                comp = component_sect_string,
                result = result_sect,
                pos_x = obj:position().x,
                pos_y = obj:position().y,
                pos_z = obj:position().z,
                gv = gv,
                lv = lv,
                remove_anomaly = anomaly_remove_bool,
                remove_anomaly_id = anom:id()
            }

            if dsh.is_actor_looking_to_pos(obj:position(), obj:radius() * 2) or
                db.actor:position():distance_to(anom:position()) < 5 then
                t.actor_signal = db.actor:position():distance_to(anom:position()) < 30
                if db.actor:position():distance_to(anom:position()) < 5 then
                    level.add_pp_effector("teleport.ppe", 1524, false)
                end
            end
            dsh.start_gtimerDHMS("af_transform", time_vector.x, time_vector.y, time_vector.z, 0,
                "amk_mod.af_transform_universal_end", t)

            -- удаляем из игры компоненты рецепта
            alife():release(alife():object(obj:id()))
        end
    end
end

-- случайно выбирает результат, возвращает таблицу с секциями результатов
function af_select_result(v_udachi, v_virogd, virogd, cel, komp)
    local rnd = math.random(0, 100)
    local success = rnd <= v_udachi

    if not success then
        return rnd > v_virogd + v_udachi and komp or virogd, false
    end

    return cel, true
end

-- завершаем варку/мутации
-- может быть много результатов
function af_transform_universal_end(params)

    local comp = split_comma_separated_list(params.comp)
    local result = split_comma_separated_list(params.result)
    local count = #result

    if count > 0 then
        local anom_pos
        if type(params.pos) == "table" then
            params.pos = vector():set(unpack(params.pos))
            anom_pos = vector():set(params.pos.x, params.pos.y, params.pos.z)
        else
            anom_pos = vector():set(params.pos_x, params.pos_y, params.pos_z)
        end

        if anom_pos and db.actor:position():distance_to(anom_pos) < 5 and dsh.is_actor_looking_to_pos(anom_pos, 0.5) then
            level.add_pp_effector("teleport.ppe", 1524, false)
        end

        -- формируем строку с названиями компонентов
        local from_comp = ""
        for k, v in pairs(comp) do
            from_comp = from_comp .. game.translate_string(news_manager.get_inv_name(v))
        end

        -- спавним результат(ы)
        for k, v in pairs(result) do
            local sobj = alife():create(v, vector():set(anom_pos.x, anom_pos.y + 1, anom_pos.z), params.lv, params.gv)
            alife():use_ai_locations(sobj, false)
            if params.actor_signal then
                level.map_add_object_spot_ser(sobj.id, "red_location", game.translate_string("trans_finished_title") .. "%c[red]" .. from_comp)
                news_manager.send_tip(db.actor, game.translate_string("trans_finished_title") .. "%c[255,255,0,0]" .. from_comp)
            end
            archievements.acv_count_event("acv_art", 100, game.translate_string("acv_art"))
        end
    end

    -- удаляем аномалии, если нужно и она не в исключениях
    if params.remove_anomaly then
        local sobj = alife():object(params.remove_anomaly_id)
        if sobj and game_graph():valid_vertex_id(sobj.m_game_vertex_id) and is_generated_anomaly(sobj) then
            dsh_anomaly_detector.remove_restriction(sobj.id)
        end
    end

    return af_sobj
end

-- '****************************************************************************
-- '   **   **   **   **   **    **   **   **   **      BLOWOUT        **   **
-- '***************************************************************************

function on_blowout_hit(npc, hide)
    if amk_hideouts.blowout_type() > 0 or not has_alife_info("surge_process_stage_7") then
        return false
    end

    local lname = level.name()
    local need_hit = true
    local khit = 1

    if hide and hide.zone then
        need_hit = not check_npc_in_hideout(npc, hide)
        if not need_hit then
            if hide.defence then
                khit = hide.defence
            else
                khit = 0
            end
        end
    else
        local hides = amk_hideouts.hide[lname]
        local tmp
        if hides then
            for i, o in ipairs(hides) do
                if o.zone then
                    for j, v in ipairs(o.zone) do
                        if v.p3 then
                            tmp = ogse.check_npc_in_box_amk(npc, vector():set(unpack(v.p1)), vector():set(unpack(v.p2)),
                                vector():set(unpack(v.p3)))
                        else
                            tmp = ogse.check_npc_in_box_amk(npc, vector():set(unpack(v.p1)), vector():set(unpack(v.p2)))
                        end

                        need_hit = need_hit and not tmp

                        if tmp then
                            if o.defence then
                                khit = o.defence
                            else
                                khit = 0
                            end
                        end
                    end
                end
            end
        end
    end

    if (need_hit or khit > 0) and has_alife_info("surge_process_stage_7") and not (hide and hide.hidden) then
        local h = hit()
        h.power = (amk_hideouts.blowout_damages[lname] or 0.01) * khit
        h.impulse = 0
        h.draftsman = npc
        h.direction = vector():set(0, 0, 0)
        h:bone("bip01_spine") -- чтобv учитvвалась броня
        h.type = hit.strike
        npc:hit(h)
        h.type = hit.telepatic
        npc:hit(h)
        h.type = hit.radiation
        npc:hit(h)
    end
    return need_hit or khit > 0
end

function outfit_hideout()
    local outfits = {
        ["nano_outfit"] = true
    }
    return db.actor:item_in_slot(6) and outfits[db.actor:item_in_slot(6):section()]
end

function check_npc_in_hideout(npc, hide)
    local not_in_zone = true
    if hide and hide.zone then
        for k, v in pairs(hide.zone) do
            if v.p3 then
                not_in_zone = not_in_zone and
                                  not ogse.check_npc_in_box_amk(npc, vector():set(unpack(v.p1)),
                        vector():set(unpack(v.p2)), vector():set(unpack(v.p3)))
            else
                not_in_zone = not_in_zone and
                                  not ogse.check_npc_in_box_amk(npc, vector():set(unpack(v.p1)),
                        vector():set(unpack(v.p2)))
            end
        end
    end
    return not not_in_zone
end

-- '*******************************************************************************
-- '   **   **   **   **   **    **   **   **    **      recipeS       **   **   **   **   **    **   **   **   ** 
-- '*******************************************************************************
function check_usable_item(obj)
    if obj:name() == "mil_stalker0012" then
        db.actor:give_info_portion("info_amk_recipt_stone_dikoobraz")
    elseif obj:section() == "amk_zapiska" then
        if level.name() == "l01_escape" then
            db.actor:give_info_portion("info_amk_recipt_shkura")
            ogse.remove_inv_items_by_section(obj:section())
        elseif level.name() == "l04u_labx18" then
            db.actor:give_info_portion("info_amk_recipt_simbion")
            ogse.remove_inv_items_by_section(obj:section())
        elseif level.name() == "l08u_brainlab" then
            db.actor:give_info_portion("info_amk_recipt_dummy")
            ogse.remove_inv_items_by_section(obj:section())
        end
    elseif obj:section() == "amk_zapiska_tears_electra" then
        db.actor:give_info_portion("info_amk_recipt_tears_electra")
        ogse.remove_inv_items_by_section(obj:section())
    elseif obj:section() == "amk_zapiska_tears_chimaera" then
        db.actor:give_info_portion("info_amk_recipt_tears_chimaera")
        ogse.remove_inv_items_by_section(obj:section())
    end
    level.map_remove_object_spot(obj:id(), "red_location")
end

-- '*******************************************************************************
-- '   **   **   **   **   **    **   **   **     SPAWN_OBJ        **   **   **   **   **    **   **   **   **   
-- '*******************************************************************************
function spawn_fuel()
    local ballons = {{108.16, -6.30, -18.17, 412158, 115}, {370.12, 15.06, -39.48, 594401, 0},
                     {58.30, 19.36, 156.50, 345136, 97}, {-92.21, -1.18, -212.66, 115177, 268},
                     {-74.17, 1.80, 8.45, 127766, 329}, {3.18, 1.24, 42.48, 243919, 490},
                     {15.35, -1.90, 2.40, 255433, 479}, {77.54, 0.30, -108.47, 312366, 427},
                     {-145.54, -0.00, -199.61, 92520, 650}, {-130.08, 10.00, -196.67, 109214, 629},
                     {-140.13, 10.00, -197.94, 98647, 629}, {37.28, 1.02, -49.90, 220638, 1084},
                     {476.68, -46.94, -0.23, 155714, 1919}, {76.80, -2.54, -23.93, 36304, 1970},
                     {94.78, 0.03, -6.88, 88986, 1514}, {-3.24, -11.75, -263.07, 33794, 1448}}

    local kanisters = {{-293.80, -14.18, -15.36, 15703, 67}, {-16.57, 2.48, 58.82, 260308, 88},
                       {-74.81, -1.30, 160.52, 196218, 163}, {-69.94, 0.97, 6.51, 131411, 329},
                       {64.01, 0.60, 148.46, 235341, 364}, {63.29, -0.20, 5.10, 299326, 461},
                       {-28.52, -1.04, -181.84, 211644, 676}, {2.93, -1.88, -13.30, 176553, 1047},
                       {41.71, 4.54, -86.36, 227110, 1100}, {7.90, 1.41, -71.93, 183138, 1041},
                       {158.71, -0.76, -259.73, 358950, 962}, {-342.92, -13.60, 390.01, 11235, 1847},
                       {305.22, -36.99, -24.40, 68330, 1930}, {55.02, 1.17, 40.35, 68094, 1511},
                       {-114.14, -0.00, 121.75, 43453, 1315}, {31.33, 5.60, -13.51, 4683, 1538}}

    for k, v in pairs(ballons) do
        if #v == 5 then
            local obj = alife():create("amk_ballon", vector():set(v[1], v[2], v[3]), v[4], v[5])
        end
    end

    for k, v in pairs(kanisters) do
        if #v == 5 then
            local obj = alife():create("amk_kanistra", vector():set(v[1], v[2], v[3]), v[4], v[5])
        end
    end
end

-- БТР на блокпосту
function spawn_military_btr()
    spawn_military_tech_pack(alife():create("vehicle_btr", vector():set(-168.11, -29.71, -303.21), 81808, 38),
        "vehicle_btr", "scripts\\esc\\esc_blockpost_btr.ltx")
    spawn_military_tech_pack(alife():create("vehicle_btr", vector():set(-237.85, -26.23, -378.81), 17147, 14),
        "vehicle_btr", "scripts\\esc\\esc_blockpost_btr.ltx")
    spawn_military_tech_pack(alife():create("helicopter", vector():set(-150.0, -40.0, -620.0), 128298, 11),
        "helicopter", "scripts\\esc\\esc_blockpost_heli.ltx")
end

function spawn_military_tech_pack(obj, spawn_item, spawn_item_logic)
    local pk = get_netpk(obj, 1)
    ASSERT((pk and pk:isOk()), "can't read netpacket of %s", obj:name())
    local data = pk:get()
    data.custom_data:setString("[logic]\ncfg = " .. spawn_item_logic)
    if spawn_item == "helicopter" then
        data.engine_sound = "alexmx\\helicopter"
    elseif spawn_item == "vehicle_btr" then
        data.health = 1
    end
    pk:set(data)
    return obj
end

-- '*******************************************************************************
-- '   **   **   **   **   **    **   **   **       AMK_RESPAWNS     **   **   **   **   **    **   **   **   
-- '*******************************************************************************
function switch_monster_online(obj)
    se_monster.need_be_online[obj.id] = true
end

function switch_monster_offline(obj)
    se_monster.need_be_online[obj.id] = false
end

function respawned(obj, respawner)
    if IsMonster(obj) or IsStalker(obj) then
        local sini = respawner:spawn_ini()
        if sini:line_exist("respawn", "creature_binded_logic") then
            local cfg_name = string_concat(get_string("respawn", "creature_binded_logic", "", sini), false)
            obj.custom_data = "[logic]\ncfg = scripts\\amk\\" .. cfg_name .. ".ltx"
        end
    end
end

local respawners = {}
local sini = ini_file("scripts\\amk\\amk_respawns.ltx")

function spawn_unspawned_respawners()
    for a = 1, 65534 do
        local obj = alife():object(a)
        if obj then
            local oini = obj:spawn_ini()
            if oini:line_exist("respawn", "amk_name") then
                local amk_name = string_concat(get_string("respawn", "amk_name", false, oini), false)
                if amk_name then
                    respawners[amk_name] = true
                end
            end
        end
    end

    local dv = {}

    if sini:section_exist("default_values") then
        for a = 0, sini:line_count("default_values") - 1 do
            local result, id, value = sini:r_line("default_values", a, "", "")
            if id and id ~= "" then
                dv[string.trim(id)] = string.trim(value)
            end
        end
    end

    if sini:section_exist("amk_respawns") then
        local tmp = {}

        for a = 0, sini:line_count("amk_respawns") - 1 do
            local result, id, value = sini:r_line("amk_respawns", a, "", "")
            if id and id ~= "" then
                table.insert(tmp, string.trim(id))
            end
        end

        for _, v in ipairs(tmp) do
            local flag = get_bool("amk_respawns", v, false, sini)
            log3("amk respawns %s %s", v, flag)
            if not respawners[v] and flag then
                local t = get_section_keys_and_values(v, sini)
                local xyzlg = string.explode(",", t.xyzlg, true)
                local pos = vector():set(tonumber(xyzlg[1]), tonumber(xyzlg[2]), tonumber(xyzlg[3]))
                local respawner = alife():create("respawn", pos, tonumber(xyzlg[4]), tonumber(xyzlg[5]))

                t.xyzlg = nil
                t.amk_name = v

                local pk = get_netpk(respawner, 1)
                ASSERT((pk and pk:isOk()), "can't read netpacket of %s", respawner:name())
                local data = pk:get()
                data.custom_data:setTable({respawn = t})
                pk:set(data)

                se_respawn.reinit_spawner_params(respawner:name())
            end
        end
    end
end

-- '*******************************************************************************
-- '   **   **   **   **   **    **   **   **   **          OTHER        **   **   **   **   **    **   **   **   **   
-- '*******************************************************************************

btrs_friends = {}

function build_btrs_table(obj)
    if obj and (obj:is_stalker() and obj:character_community() == "military" and obj:alive()) or obj:section() ==
        "vehicle_btr" then
        btrs_friends[obj:id()] = obj:section()
    end
end
