
--' Ключем является группировка персонажа. Значением является таблица, содержашая имена секций предметов.
local item_by_community = {}

--' Зависимости в спауне предметов. Предмет спауниться только если есть хотя бы один из зависимых.
local item_dependence = {}

--' Множители и минимаксы для выпадения вещей в зависимости от уровня
local mul_by_level = {}
local count_by_level = {}

--' Предметы, которые нельзя удалять (квестовые например)
local always_keep_item = {}
local always_offs_items = {
"device_torch",
"device_pda",
"hand_radio",
"guitar_a",
"harmonica_a",
"binocular_a",
"wpn_knife",
"wpn_binoc",
"bolt",
"grenade_f1",
"grenade_rgd5",
"ammo_9x19_pbp",
"ammo_9x39_pab9",
"ammo_9x39_ap",
"ammo_9x18_fmj",
"ammo_9x18_pmm",
"ammo_11.43x23_fmj",
"ammo_5.45x39_fmj",
"ammo_5.45x39_ap",
"ammo_9x19_fmj",
"ammo_5.56x45_ss190",
"ammo_5.56x45_ap",
"ammo_12x70_buck",
"ammo_12x76_zhekan",
"ammo_12x76_dart",
"ammo_og-7b",
"ammo_m209",
"ammo_vog-25p",
"bandage",
"medkit",
"medkit_army",
"medkit_scientic",
"antirad",
"bread",
"kolbasa",
"conserva",
"vodka",
"energy_drink"}

--' Предметы, относящиеся к патронам. Их надо спаунить другим методом.
local ammo_sections = {}

local death_ini = ini_file("misc\\death_generic.ltx")


function init_drop_settings()
	local community_list = { "stalker", "dolg", "freedom", "bandit", "military", "zombied", "ecolog", "killer", "monolith", "arena_enemy", "actor_dolg","bratok","nebo" }	

    for k,v in pairs(community_list) do
        --' Необходимо заполнить таблицу
        item_by_community[v] = {}
        if death_ini:section_exist(v) then
		    local n = death_ini:line_count(v)
		    local id, value = "", ""
		    for i=0,n-1 do
			    result, id, value	= death_ini:r_line(v,i,"","")
                --item_by_community[v][id] = 1000 * tonumber(value)
				if tonumber(value) >= 0.4 then value = 0.2 end
				item_by_community[v][id] = 1000 * tonumber(value)
		    end
        end
    end

    --' Заполняем таблицу зависимостей
	local n = death_ini:line_count("item_dependence")
	local id, value = "", ""
	for i=0,n-1 do
		result, id, value	= death_ini:r_line("item_dependence",i,"","")
		item_dependence[id] = {}
		local vvv = parse_names(value)
		for k,v in pairs(vvv) do
			item_dependence[id][v] = true
		end
	end

	--' Множители и минимаксы для выпадения вещей в зависимости от уровня
    local level_name = level.name()
	
	if not death_ini:section_exist(level_name) then
		level_name = "default"
	end

    local n = death_ini:line_count(level_name)
	local id, value = "", ""
	for i=0,n-1 do
		result, id, value	= death_ini:r_line(level_name,i,"","")
        mul_by_level[id] = tonumber(value)
	end        

    local item_count_section = "item_count_" .. level.get_game_difficulty()
    local n = death_ini:line_count(item_count_section)
	for i=0,n-1 do
		result, id, value	= death_ini:r_line(item_count_section,i,"","")
        --' Нужно распарсить value в два значения
        local t = parse_nums(value)
		if t[1] == nil then
            abort("Error on [death_ini] declaration. Section [%s], line [%s]", item_count_section, tostring(id))
        end
        local min = t[1]
        local max = t[2]
        if max == nil then
            max = min
        end
        
        if mul_by_level[id] == nil then
            mul_by_level[id] = 0
        end

        min = tonumber(min) * mul_by_level[id]
        max = tonumber(max) * mul_by_level[id]

        count_by_level[id] = {min = min, max = max}
	end        

 	--' Предметы, которые нельзя удалять (квестовые например)
    local n = death_ini:line_count("keep_items")
	for i=0,n-1 do
		result, id, value	= death_ini:r_line("keep_items",i,"","")
        if value == "true" then
            always_keep_item[id] = true
        end
    end

	--' Предметы, относящиеся к патронам. Их надо спаунить другим методом.
    ammo_sections = {}
    local n = death_ini:line_count("ammo_sections")
	local id, value = "", ""
	for i=0,n-1 do
		result, id, value	= death_ini:r_line("ammo_sections",i,"","")
        ammo_sections[id] = true
	end        
end



class "drop_manager"
function drop_manager:__init(npc)
	self.npc = npc
end
function drop_manager:create_release_item()
	if self.npc == nil then return end
	--' Спрашиваем у серверного объекта генерились ли предметы
	local se_obj = alife():object(self.npc:id())
	if (se_obj == nil) then return end
	if se_obj.death_droped == true then
		return
	end
	se_obj.death_droped = true

    --' Запускаем итератор на удаление предметов
    self.npc:iterate_inventory(keep_item, self.npc)

    --' Проверка на отсутствие спауна лута
    local ini = self.npc:spawn_ini()

    if ini and ini:section_exist("dont_spawn_loot") then
        return
    end

    --' Доспавниваем необходимое количество итемов:
    --' Необходимо составить список объектов которые могут быть заспавнены для персонажа
    local spawn_items = item_by_community[self.npc:character_community()]    
    if spawn_items then
      for k,v in pairs(spawn_items) do
          --' По каждому объекту необходимо получить зависимости		
          if check_item_dependence(self.npc, k) == true then
              --' По каждому объекту необходимо получить количество
              local number = math.ceil(math.random(count_by_level[k].min, count_by_level[k].max))
              --' Необходимо заспавнить нужное количество.
				create_items(self.npc, k, number, v) 
		  end
      end
    end
	
	if not string.find(self.npc:section(),"arena") and 
		self.npc:character_community()~="arena_enemy" and 
		self.npc:name()~="yan_specnaz_dead" and
		self.npc:name()~="x16_stalker_ghost" then 

		local otf_1
		local otf_2
		local otf_3
		local otf_4
		local otf_5
		local sect	
		local t = amk.read_stalker_params(se_obj)
		if t ~= nil then
			local vis = t.visual
			vis = amk.str_explode("\\",vis)
			vis = vis[3]
			--skunk.dbglog("vis = '%s'", vis)
		  if vis then
	-- bandit
			if string.find(vis,"stalker_bandit") then sect = "bandit_outfit" end
			if vis == "stalker_bandit_4" or vis == "stalker_bandit_2" then sect = "bandit_outfit_red" end
			if vis == "stalker_bandit_5" or vis == "stalker_bandit_9" then sect = "bandit_outfit_blue" end
			if vis == "stalker_bandit_1" then sect = "bandit_outfit_red1" end
			if vis == "stalker_bandit_drunk" then sect = "outfit_bandit_m1" end
			if vis == "stalker_bandit_8" then sect = "bandit_gaz_outfit_m1" end
			if vis == "stalker_bandit_veteran" then sect = "bandit_veteran_outfit" end
			if vis == "stalker_bandit_borov" or vis == "stalker_bandit_master" then sect = "bandit_master_outfit" end
			if vis == "stalker_bandit_exoskeleton" then sect = "exo_bandit_outfit" end
	-- dolg
			if string.find(vis,"stalker_do") then sect = "dolg_outfit" end
			if vis == "stalker_do_antigas" then sect = "dolg_gaz_outfit_m1" end
			if vis == "stalker_do_komandir" then sect = "outfit_dolg_m1" end
			if vis == "stalker_do_nauchniy" then sect = "dolg_scientific_outfit" end
			if vis == "stalker_do_exoskeleton" then sect = "dolg_black_exoskeleton" end
	-- nebo
			if vis == "stalker_nebo_balon_1" then sect = "nebo_heavy_outfit" end
			if vis == "stalker_nebo_rukzak" then sect = "nebo_light_outfit" end
			if vis == "stalker_nebo_nauchniy" then sect = "nebo_scientific_outfit" end
			if vis == "stalker_nebo_exoskeleton" then sect = "nebo_exo_outfit" end		
	-- ecolog
			if vis == "stalker_ecolog" or vis == "nauchniy_1" or vis == "protect_suit2" then sect = "ecolog_outfit" end
			if vis == "stalker_ecolog_military" or vis == "stalker_chemical" or vis == "nauchniy_0" or vis == "protect_suit1" then sect = "protection_outfit" end
	-- izgoy
			if vis == "izgoy" then sect = "bandit_veteran_outfit" end
	-- killer
			if string.find(vis,"stalker_ki") then sect = "killer_outfit" end
			if vis == "stalker_ki_head_1" then sect = "outfit_killer_m1" end
			if vis == "stalker_ki_antigas" then sect = "killer_gaz_outfit_m1" end
			if vis == "stalker_ki_nauchniy" then sect = "merc_scientific_outfit" end
			if vis == "stalker_ki_exoskeleton" then sect = "killer_blue_exoskeleton" end
	-- militari
			if vis == "stalker_militari_1" or vis == "stalker_militari_antigas_1" or vis == "stalker_military" or vis == "stalker_military_green" then sect = "military_outfit" end
			if vis == "stalker_militari_2" or vis == "stalker_militari_antigas_2" or vis == "stalker_commander" or vis == "stalker_military_black" then sect = "militaryspec_outfit" end
	-- monolit
			if string.find(vis,"stalker_mo") or vis == "stalker_monolit" then sect = "monolit_outfit" end
			if vis == "stalker_mo_hood_9" then sect = "monolit_gaz_outfit_m1" end
			if vis == "stalker_mo_nauchniy" then sect = "monolit_scientific_outfit" end
			if vis == "stalker_mo_exo" then sect = "monolit_exoskeleton" end
			if vis == "stalker_mo_elite" then sect = "monolit_black_outfit" end
	-- nauchniy (see ecolog)
	-- neytral		
			if string.find(vis,"stalker_neytral") or vis == "stalker_hood" or vis == "stalker_neytral_rukzak" then sect = "stalker_outfit" end 
			if vis == "stalker_bar_security" then sect = "stalker_guard_outfit" end
			if vis == "stalker_neytral_hood_92" then sect = "neytral_gaz_outfit_m1" end 
			if vis == "stalker_neytral_hood_9" then sect = "neytral_gaz_outfit_m2" end
			if string.find(vis,"neytral") and (self.npc:name()=="esc_wolf" or self.npc:name()=="esc_stalker_fanat" or self.npc:name()=="esc_fox" or self.npc:name()=="esc_provodnik" or self.npc:name()=="agr_krot") then sect = "outfit_stalker_m2" end  		
			if vis == "stalker_2_gas" then sect = "neytral_gaz_outfit_v1" end
			if vis == "stalker_3_gas" then sect = "neytral_gaz_outfit_v2" end
			if vis == "stalker_4_gas" then sect = "neytral_gaz_outfit_v3" end
			if vis == "stalker_2_mask" or vis == "lisiy" or vis == "stalker_2_mask" or vis == "stalker_2_ochki" or vis == "stalker_2_rozh1" or vis == "stalker_2_usi" then sect = "stalker_outfit_v1" end
			if vis == "stalker_3_mask" or vis == "hellcar" or vis == "stalker_3_mask" or vis == "stalker_3_rozh2" or vis == "stalker_3_usi" then sect = "stalker_outfit_v2" end
			if vis == "stalker_4_rozh3" or vis == "serega" or vis == "stalker_4_ochki" then sect = "stalker_outfit_v3" end
			if vis == "stalker_prizrak" then sect = "outfit_stalker_m1" end
			if vis == "stalker_neytral_nauchniy" or vis == "stalker_scien" then sect = "scientific_outfit" end
			if vis == "stalker_neytral_exoskeleton" or vis == "stalker_exoskeleton" then sect = "exo_outfit" end
	-- novice
			if vis == "green_stalker_1" then sect = "neytral_novice_outfit_m1" end
			if vis == "green_stalker_2" then sect = "novice_outfit" end
			if vis == "stalker_novice" then sect = "outfit_novice_m1" end
			if vis == "green_stalker_3" then sect = "novice_outfit_rain_1" end
			if vis == "green_stalker_4" then sect = "neytral_novice_outfit_cam" end
			if vis == "green_stalker_5" then sect = "novice_outfit_new_2" end
			if vis == "green_stalker_6" then sect = "novice_outfit_rain_2" end
			if vis == "green_stalker_7" then sect = "neytral_novice_outfit_cam_2" end
			if vis == "green_stalker_8" then sect = "neytral_novice_outfit_cam_3" end
			if vis == "green_stalker_9" then sect = "novice_outfit_new_1" end
			if vis == "green_stalker_10" then sect = "neytral_novice_outfit_cam_1" end
			if vis == "green_stalker_11" then sect = "neytral_novice_outfit_new" end
			if vis == "green_stalker_antigas" then sect = "neytral_novice_gaz_outfit_m1" end
	-- protect (see ecolog)
	-- soldier
			if string.find(vis,"soldier_bandana") or string.find(vis,"soldier_beret") or vis == "soldier_mask" or vis == "soldier_obichniy" or vis == "stalker_soldier" then sect = "outfit_soldier_m1" end 
			if vis == "soldier_spetsnaz" or vis == "stalker_specops" then sect = "specops_outfit" end
			if vis == "soldier_antigas" then sect = "outfit_specnaz_m1" end
	-- stalker_zombi
			if vis == "stalker_zombie1" then sect = "bandit_outfit" end
			if vis == "stalker_zombie2" or vis == "zombie_fresh_1" then sect = "dolg_outfit" end
			if vis == "stalker_zombie3" or vis == "stalker_zombie6" or vis == "zombie_fresh_2" then sect = "stalker_outfit" end 
			if vis == "stalker_zombie4" then sect = "killer_outfit" end
			if vis == "stalker_zombie5" then sect = "stalker_guard_outfit" end
			if vis == "stalker_zombie7" then sect = "novice_outfit" end
			if vis == "stalker_zombie8" then sect = "neytral_novice_outfit_m1" end
			if vis == "stalker_zombie_specnaz" then sect = "specops_outfit" end
			if vis == "zombie_fresh_0" then sect = "svoboda_heavy_outfit" end
			if vis == "zombie_exoskeleton" then sect = "broken_exoskeleton" end
	-- svoboda
			if vis == "stalker_sv_rukzak_1_1" or vis == "stalker_sv_rukzak_3" or vis == "stalker_svoboda_light" then sect = "svoboda_light_outfit" end
			if string.find(vis,"stalker_sv_balon_1") or vis == "stalker_sv_rukzak_1" or vis == "stalker_sv_rukzak_2" or vis == "stalker_sv_rukzak_3_1" or vis == "stalker_sv_cook" or vis == "stalker_sv_max" or vis == "stalker_svoboda_heavy" then sect = "svoboda_heavy_outfit" end
			if vis == "stalker_sv_hood_91" then sect = "svoboda_gaz_outfit_m1" end
			if vis == "stalker_sv_hood_9" then sect = "svoboda_heavy_gaz_outfit_m1" end
			if vis == "stalker_sv_nauchniy" then sect = "freedom_scientific_outfit" end
			if vis == "stalker_sv_exoskeleton" then sect = "svoboda_exoskeleton" end
			if vis == "stalker_sv_leader" then sect = "outfit_svoboda_m1" end
	-- nano
			if vis == "stalker_nano_suit" then sect = "nano_outfit" end
		  end
			if sect~=nil then 
				if sect == "bandit_outfit" or sect == "outfit_bandit_m1" or sect == "bandit_outfit_blue" or sect == "bandit_outfit_red1" or sect == "bandit_outfit_red" or sect == "bandit_gaz_outfit_m1" or sect == "bandit_veteran_outfit" or sect == "bandit_master_outfit" or sect == "novice_outfit" or sect == "novice_outfit_rain_1" or sect == "novice_outfit_rain_2" or sect == "neytral_novice_outfit_m1" or sect == "neytral_novice_gaz_outfit_m1" or sect == "outfit_novice_m1" or sect == "neytral_novice_outfit_cam" or sect == "novice_outfit_new_1" or sect == "novice_outfit_new_2" or sect == "neytral_novice_outfit_cam_1" or sect == "neytral_novice_outfit_cam_2" or sect == "neytral_novice_outfit_cam_3" or sect == "neytral_novice_outfit_new" then
				otf_1 = create_items(self.npc, sect, 1, 650)
					if otf_1~= nil then
					amk.start_timer("outfit_cond_1",1,otf_1.id) end	
					
				elseif sect == "stalker_outfit" or string.find(sect,"_outfit_v") or sect == "nebo_light_outfit" or sect == "killer_outfit" or sect == "outfit_soldier_m1" or sect == "svoboda_light_outfit" or sect == "svoboda_gaz_outfit_m1" then
				otf_2 = create_items(self.npc, sect, 1, 550)
					if otf_2~= nil then
					amk.start_timer("outfit_cond_2",1,otf_2.id) end		
					
				elseif sect == "dolg_outfit" or sect == "dolg_gaz_outfit_m1" or sect == "ecolog_outfit" or sect == "outfit_dolg_m1" or sect == "outfit_killer_m1" or sect == "killer_gaz_outfit_m1" or sect == "specops_outfit" or sect == "outfit_specnaz_m1" or sect == "monolit_outfit" or sect == "monolit_gaz_outfit_m1" or sect == "stalker_guard_outfit" or sect == "outfit_stalker_m1" or sect == "nebo_heavy_outfit" or sect == "outfit_stalker_m2" or sect == "neytral_gaz_outfit_m1" or sect == "neytral_gaz_outfit_m2" or sect == "svoboda_heavy_outfit" or sect == "svoboda_heavy_gaz_outfit_m1" or sect == "outfit_svoboda_m1" then
				otf_3 = create_items(self.npc, sect, 1, 450)
					if otf_3~= nil then
					amk.start_timer("outfit_cond_3",1,otf_3.id) end		
					
				elseif sect == "dolg_scientific_outfit" or sect == "ecolog_outfit" or sect == "protection_outfit" or sect == "merc_scientific_outfit" or sect == "military_outfit" or sect == "militaryspec_outfit" or sect == "monolit_scientific_outfit" or sect == "scientific_outfit" or sect == "monolit_black_outfit" or sect == "nebo_scientific_outfit" or sect == "freedom_scientific_outfit" then
				otf_4 = create_items(self.npc, sect, 1, 350)
					if otf_4~= nil then
					amk.start_timer("outfit_cond_4",1,otf_4.id) end		
					
				else
				otf_5 = create_items(self.npc, sect, 1, 250)
					if otf_5~= nil then
					amk.start_timer("outfit_cond_5",1,otf_5.id) end
				end	
			end
		end
	end
if string.find(self.npc:name(),"solomon") then
  db.actor:give_info_portion("haron_need_stalker_fail")
end  
--if string.find(self.npc:name(),"dyak") then
--  db.actor:give_info_portion("dyak_dead")
--end  
if string.find(self.npc:name(),"mathon") then
  db.actor:give_info_portion("haron_naem_fail")  
end
if string.find(self.npc:name(),"new_prizrak") then
  db.actor:give_info_portion("prizrak_help_fail")  
end
if string.find(self.npc:name(),"mil_lucash") then
  db.actor:give_info_portion("mil_lucash_dead")  
end
if string.find(self.npc:name(),"mil_blockpost_leader") then
  db.actor:give_info_portion("mil_blockpost_leader_dead")  
end
if string.find(self.npc:name(),"mil_soldat_one") then
  db.actor:give_info_portion("mil_voen_one")  
end
if string.find(self.npc:name(),"mil_soldat_two") then
  db.actor:give_info_portion("mil_voen_two")  
end
if string.find(self.npc:name(),"mil_soldat_tri") then
  db.actor:give_info_portion("mil_voen_tri")  
end
if string.find(self.npc:name(),"mil_soldat_four") then
  db.actor:give_info_portion("mil_voen_four")  
end
if string.find(self.npc:name(),"mil_soldat_five") then
  db.actor:give_info_portion("mil_voen_five")  
end
if string.find(self.npc:name(),"dark_komandir_belchuk") then
  db.actor:give_info_portion("mil_voen_six")  
end
if string.find(self.npc:name(),"mil_barier_one") then
  db.actor:give_info_portion("mil_barier_one")  
end
if string.find(self.npc:name(),"mil_barier_two") then
  db.actor:give_info_portion("mil_barier_two")  
end
if string.find(self.npc:name(),"mil_barier_tri") then
  db.actor:give_info_portion("mil_barier_tri")  
end
if string.find(self.npc:name(),"mil_barier_four") then
  db.actor:give_info_portion("mil_barier_four")  
end
if string.find(self.npc:name(),"mil_komandir_sidorchuk") then
  db.actor:give_info_portion("mil_barier_five")  
end
if string.find(self.npc:name(),"mil_stukach") then
  db.actor:give_info_portion("mil_stukach_dead")  
end
if string.find(self.npc:name(),"mil_engineer") then
  db.actor:give_info_portion("mil_engineer_dead")  
end
if string.find(self.npc:name(),"mil_cook") then
  db.actor:give_info_portion("mil_cook_new_dead")  
end
if string.find(self.npc:name(),"bes") then
  db.actor:give_info_portion("bes_dead")  
end
if string.find(self.npc:name(),"garbage_stalker_wound") then
  db.actor:give_info_portion("garbage_stalker_wound_dead")  
end
if string.find(self.npc:name(),"mil_osvedomitel") then
  db.actor:give_info_portion("mil_osvedomitel_dead")  
end
if string.find(self.npc:name(),"esc_krest_bratok") then
  db.actor:give_info_portion("krest_dead")  
end
if string.find(self.npc:name(),"atp_barman") then
  db.actor:give_info_portion("band_kill_have")  
end
end
--' Функция вызывается для каждого предмета, если вернет false то предмет удалится.
function keep_item(npc, item)
	local npc_community = npc:character_community()

    if item==nil or alife():object(item:id())==nil then return end
	
	if npc == nil then return end
    local section = item:section()

    if section == "bolt" then
        return false
    end

    if always_keep_item[section] == true then
        return true
    end

    local item_id = item:id()
	local kond=75
	if 		npc_community == "military" then kond=75
	elseif 	npc_community == "killer" then kond=75
	elseif 	npc_community == "monolith" then kond=20
	elseif 	npc_community == "zombied" then kond=5
	elseif 	npc_community == "bandit" then kond=40
	else kond=60
	end
    local item_in_slot = npc:item_in_slot(1)
    if item_in_slot ~= nil and item_in_slot:id() == item_id then
        item:unload_magazine()
                --' Тут надо уменьшить кондишн оружия
                item:set_condition((math.random(90-kond)+kond)/100)
        return true
    end
    item_in_slot = npc:item_in_slot(2)
    if item_in_slot ~= nil and item_in_slot:id() == item_id then
        item:unload_magazine()
                --' Тут надо уменьшить кондишн оружия
                item:set_condition((math.random(95-kond)+kond)/100)
        return true
    end

	-- удалять ПДА, гитару\гармошку, фонарики и приборы ночного видения, рацию, бинокль.
	for a=1,table.getn(always_offs_items),1 do
		if always_offs_items[a]==section then
		--if (npc.mark_item_dropped) then
--    npc:mark_item_dropped(item)
		--end
    alife():release(alife():object(item:id()), true)
	end
	end
end

--' Функция спавнит необходимое число предметов
function create_items(npc, section, number, rnd)
	if npc == nil then return end
    --'printf("create %s of %s", tostring(number), tostring(section))
    if ammo_sections[section] == true then
        if number > 0 then
            se_respawn.create_ammo(section,	
				    npc:position(),
				    npc:level_vertex_id(),	
				    npc:game_vertex_id(),
				    npc:id(),
                    number)
        end
    else
        for i=1,number do
			--' Проверяем вероятность появить каждый объект в отдельности
            if math.random(1000) <=  rnd then
				return alife():create(section,	
					    npc:position(),
						npc:level_vertex_id(),	
						npc:game_vertex_id(),
						npc:id())
			end
        end
    end    
end


--' Функция проверяет есть ли хоть один из зависимых объектов у персонажа
function check_item_dependence(npc, section)
	if npc == nil then return end
	if item_dependence[section] == nil then
		return true
	end

    local d_flag = true
    for k,v in pairs(item_dependence[section]) do
        local obj = npc:object(k)
        if obj ~= nil and npc:marked_dropped(obj) ~= true then
            return true
        end
        d_flag = false
    end

    return d_flag
end