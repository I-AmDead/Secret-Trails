-- -*- mode: lua; coding: windows-1251-dos -*-

local excluded_npc = {
  [ 29 ] = true,                -- учебная плоть блин
  [ "peshera_plennyi" ] = true, -- Фима
  [ "stalk_semetskiy" ] = true, -- Семецкий в Лиманске
}

-- какие зоны можно не обходить именным персонажам
local ignore_zones = {
  -- что бы Дезертир мог до своего вагончика добраться
  [ "agr_ratcatcher" ] = "zone_radioactive",
}

local invisible_for_anoms = {
  -- у этого трупика документ, с которого начинаются поиски пропавшей
  -- эспедиции
  [ "dead_military_esc" ] = true,
  -- На этот трупик ставится метка в задании
  -- find_railroad_passage. Если его уничтожит какая-нибудь аномалия,
  -- то будет вылет.
  [ "esc_tutorial_dead_novice" ] = true,
  -- этого гиганта нужно пометить на Агропроме для Холода
  [ "gigant_red_strong1" ] = true,
  [ "peshera_plennyi"   ] = true,
  [ "sim_stalker_fraer" ] = true,
  [ "tamaz_garbage"     ] = true, -- Тамаз на Свалке
}

local excluded_comms = {        -- запретные коммунити
  [ "zombied" ] = true,
}

local excluded_locations = {
}

local monster_excluded_locations = {
  [ "av_peshera" ] = true,
  [ "jupiter"    ] = true,
  [ "jupiter_underground" ] = true,
  [ "labx8"      ] = true,
  [ "peshera"    ] = true,
  [ "pripyat"    ] = true,
  [ "zaton"      ] = true,
}


function attach( sm )
  sm:subscribe({ signal = "on_after_blowout",       fun = this.on_after_blowout })
  sm:subscribe({ signal = "on_monster_death",       fun = this.on_death     })
  sm:subscribe({ signal = "on_monster_net_destroy", fun = this.on_death     })
  sm:subscribe({ signal = "on_monster_spawn",       fun = this.on_monster_spawn  })
  sm:subscribe({ signal = "on_npc_death",           fun = this.on_death     })
  sm:subscribe({ signal = "on_npc_net_destroy",     fun = this.on_death     })
  sm:subscribe({ signal = "on_npc_spawn",           fun = this.on_npc_spawn })
end


local mobs = {}

function on_monster_spawn( obj, binder )
  if
    get_bool( obj:section(), "ogse_anomaly_evader.disable", false )
    or not obj:is_custom_monster()
  then
    return
  end
  local all_anoms = false
  if
    invisible_for_anoms[ obj:name() ]
    or get_bool( obj:section(), "ogse_anomaly_evader.all_anoms", false )
  then
    all_anoms = true
    set_anomaly_invisibility( obj, true )
  end
  if not obj:alive() then return end
  local anomaly_detector = obj:get_custom_monster():anomaly_detector()
  if all_anoms then
    anomaly_detector.Anomaly_Detect_Probability = 1
  elseif
    excluded_npc[ obj:story_id() ]
    or get_bool( obj:section(), "ogse_anomaly_evader.exclude", false )
  then
    anomaly_detector:deactivate( true )
    return
  elseif
    excluded_locations[ level.name() ]
    or monster_excluded_locations[ level.name() ]
    or battle.is_battle_spawned( obj )
  then
    return
  else
    anomaly_detector.Anomaly_Detect_Probability = 0.9
  end
  anomaly_detector:activate( true )
  mobs[ obj:id() ] = true
end


function on_npc_spawn( obj, binder )
  local all_anoms = false
  if
    invisible_for_anoms[ obj:name() ]
    or get_bool( obj:section(), "ogse_anomaly_evader.all_anoms", false )
  then
    all_anoms = true
  end
  if not obj:alive() then
    if all_anoms then
      set_anomaly_invisibility( obj, true )
    end
    return
  end
  local anomaly_detector = obj:get_custom_monster():anomaly_detector()
  if not all_anoms then
    if
      excluded_npc[ obj:profile_name() ]
      or excluded_npc[ obj:name() ]
      or excluded_npc[ obj:story_id() ]
    then
      anomaly_detector:deactivate( true )
      return
    elseif
      excluded_comms[ obj:character_community() ]
      or excluded_locations[ level.name() ]
    then
      return
    end
  end
  if all_anoms or obj:relation( db.actor ) ~= game_object.enemy then
    set_anomaly_invisibility( obj, true )
  end
  local ignore = ignore_zones[ obj:name() ]
  if ignore then
    anomaly_detector:set_ignore_zones( ignore )
  end
  anomaly_detector:activate( true )
  mobs[ obj:id() ] = true
end


function on_death( obj )
  if mobs[ obj:id() ] then
    local anomaly_detector = obj:get_custom_monster():anomaly_detector()
    anomaly_detector:deactivate( true )
    if alife():object( obj:id() ) then
      anomaly_detector:remove_all_restrictions()
    end
    mobs[ obj:id() ] = nil
  end
end


function remove_restriction( npc, anomid )
  for id, _ in pairs( mobs ) do
    local obj = level.object_by_id( id )
    if obj then
      local anomaly_detector = obj:get_custom_monster():anomaly_detector()
      anomaly_detector:remove_restriction( anomid )
    end
  end
  local sobj = alife():object( anomid )
  if sobj then
    amk_anoms.remove_anomaly( sobj.id )
    alife():release( sobj )
  end
end


function pre_blow_off()
  for id, _ in pairs( mobs ) do
    local obj = level.object_by_id( id )
    if obj then
      local anomaly_detector = obj:get_custom_monster():anomaly_detector()
      anomaly_detector:deactivate( true )
      anomaly_detector:remove_all_restrictions()
    end
  end
end


function on_after_blowout()
  for id, _ in pairs( mobs ) do
    local obj = level.object_by_id( id )
    if obj then
      local anomaly_detector = obj:get_custom_monster():anomaly_detector()
      anomaly_detector:activate( true )
    end
  end
end


function get_freq() return 1000 end
