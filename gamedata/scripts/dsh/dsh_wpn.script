-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  sm:subscribe({ signal = "on_actor_weapon_fire",         fun = this.on_actor_weapon_fire         })
  sm:subscribe({ signal = "on_actor_weapon_start_firing", fun = this.on_actor_weapon_start_firing })
  sm:subscribe({ signal = "on_actor_weapon_zoom_in",      fun = this.on_actor_weapon_zoom_in      })
  sm:subscribe({ signal = "on_actor_weapon_zoom_out",     fun = this.on_actor_weapon_zoom_out     })
  sm:subscribe({ signal = "on_key_down",                  fun = this.on_key_down                  })
  sm:subscribe({ signal = "on_throw_grenade",             fun = this.on_throw_grenade             })
end

local stand_power = get_float( "actor_condition", "stand_power" )
local time_factor = get_float( "alife", "time_factor" )

local cur_wpn = {}
function get_wpn_info( wpn )
  local t = cur_wpn
  if ( not t.name ) or t.name ~= wpn:name() then
    t.const_dev_t      = 0
    t.dispersion_start = get_u32( wpn:section(), "dispersion_start" )
    t.fire_power_loss  = get_fire_power_loss( wpn )
    t.hit_power        = get_float( wpn:section(), "hit_power"   )
    t.hit_power_2      = get_float( wpn:section(), "hit_power_2" )
    t.id               = wpn:id()
    t.inv_weight       = get_float( wpn:section(), "inv_weight", 0 )
    t.is_knife         = wpn:is_knife()
    t.name             = wpn:name()
    t.zoom_body_state  = "unknown"
    t.zoom_enabled     = get_bool( wpn:section(), "zoom_enabled", true )
  end
  t.wpn = wpn
  return cur_wpn
end

function get_fire_power_loss( wpn )
  local sect = wpn:section()
  local fire_power_loss_k = get_float( sect, "dsh_wpn.fire_power_loss_k", 1 )
  return stand_power * time_factor * fire_power_loss_k
end

function get_zoom_body_state()
  local aobj = get_actor_obj()
  return zoom_mode()
    and (
      aobj:is_actor_crouch()
        and "zoom_crouch"
        or (
          aobj:is_actor_creep() and "zoom_creep"
        )
        or "zoom_normal"
    )
    or "no_zoom"
end

function on_actor_weapon_start_firing( wpn )
  local cur_wpn = get_wpn_info( wpn )
end

local knife_anim_length = {}
local knife_fire_t

function on_actor_weapon_fire( wpn )
  local t = get_wpn_info( wpn )
  local fire_power_loss = t.fire_power_loss
  if fire_power_loss >= 0 then return end
  if t.is_knife then
    local sect = wpn:section()
    if not knife_anim_length[ sect ] then
      knife_anim_length[ sect ] = {}
    end
    local power_loss_weight = fire_power_loss * (
      t.inv_weight > 1 and inv_weight or 1
    )
    local max_power_loss = 0
    local state          = wpn:get_hud_item_state()
    if state == weapon_states.fire2 then
      max_power_loss = fire_power_loss * ( t.hit_power_2 / t.hit_power )
    end
    if knife_fire_t then knife_fire_t:stop() end
    local anim_len = knife_anim_length[ sect ][ state ]
    if anim_len then
      knife_fire_t = dsh.rt_timeout( anim_len / 2, function()
        db.actor.power = power_loss_weight + max_power_loss
        knife_fire_t   = nil
      end )
    else
      db.actor.power = power_loss_weight + max_power_loss
      local name   = t.name
      local fire_t = time_global()
      knife_fire_t = dsh.rt_wait_condition(
        function()
          local item = db.actor:active_item()
          return not (
            item and item:name() == name
            and item:get_hud_item_state() == state
          )
        end,
        function()
          local item = db.actor:active_item()
          if item and item:name() == name then
            knife_anim_length[ sect ][ state ] = time_global() - fire_t
          end
          knife_fire_t = nil
        end
      )
    end
  else
    local zoom_bs = t.zoom_body_state
    local k       = ( zoom_bs == "zoom_crouch" and 0.75  )
      or ( zoom_bs == "zoom_creep" and 0.5 ) or 1
    db.actor.power = fire_power_loss * k
  end
end

local grenade_throwing_t

function on_key_down( key, bind )
  if
    bind ~= key_bindings.kWPN_ZOOM
    or db.actor:active_slot() ~= 3
  then
    return
  end
  local item = db.actor:active_item()
  if item and item:is_grenade() then
    grenade_throwing_t = time_global()
  end
end

function on_throw_grenade( obj )
  local fire_power_loss = get_fire_power_loss( obj )
  local max_power_loss  = 0
  if grenade_throwing_t then
    local sect        = obj:section()
    local force_max   = get_float( sect, "force_max" )
    local force_min   = get_float( sect, "force_min" )
    local force_speed = get_float( sect, "force_grow_speed" )
    local max_t = ( force_max - force_min ) / force_speed * 1000
    local t     = time_global() - grenade_throwing_t
    if t > max_t then t = max_t end
    max_power_loss     = fire_power_loss * 3 * ( t / max_t )
    grenade_throwing_t = nil
  end
  db.actor.power = fire_power_loss + max_power_loss
end

function calc_const_dev()
  local  max = 0.15
  -- от -max до max
  return max * math.random() * 2 - max
end

local apply_const_dev = true
function configure_const_dev( t )
  if
    not (
      apply_const_dev and t.zoom_enabled and t.wpn:is_weapon_magazined()
    )
  then
    return
  end
  if t.const_dev_t < time_global() then
    local wpn = t.wpn:get_weapon()
    wpn.const_deviation.pitch = calc_const_dev()
    wpn.const_deviation.yaw   = calc_const_dev()
    t.const_dev_t = time_global() + math.random( 1000, 10000 )
  end
end


function on_actor_weapon_zoom_in( obj )
  apply_const_dev = false
  if not obj:is_weapon_magazined() then return end
  local wpn = obj:get_weapon()
  wpn.const_deviation.pitch = 0
  wpn.const_deviation.yaw   = 0
  local t = get_wpn_info( obj )
  t.const_dev_t = time_global()
  ezi_startup( t )
end


local snd_breathout = sound_object( "actor\\breathout" )
local ezi_t         = false

function ezi_startup( t )
  if ezi_t then ezi_t:stop() end
  local aobj, wpn = get_actor_obj(), t.wpn
  local breathout, breathout_t = false
  local ezi, disp_min
  ezi_t = dsh.rt_wait_condition(
    function( timer )
      if not db.actor:zoom_mode() then return true end
      timer:reschedule( 500 )
      if wpn_IsRotatingToZoom( wpn ) then
        return
      elseif not ezi then
        ezi = find_effector_zi()
        if not ezi then return true end
        disp_min = ezi.disp_min
        if disp_min == 0 and ezi.zoom_aim_disp_k == 0 then return true end
      end
      if not breathout_t then
        breathout_t = time_global() + 10000
      end
      local need_breathout = false
      if aobj:is_actor_creep() then
        ezi.disp_min = 0
      elseif aobj:is_actor_crouch() then
        if breathout_t > time_global() then
          ezi.disp_min   = 0
        else
          ezi.disp_min   = disp_min / 2
          need_breathout = true
        end
      else
        local health_k = 1 - db.actor.health / 0.9
        local power_k  = 1 - db.actor.power  / 0.8
        local cond_k   = math.max( health_k, power_k )
        if cond_k <= 0 then
          if breathout_t > time_global() then
            ezi.disp_min   = 0
          else
            ezi.disp_min   = disp_min
            need_breathout = true
          end
        else
          need_breathout = ( ezi.disp_min == 0 )
          ezi.disp_min   = disp_min + disp_min * cond_k
        end
      end
      if need_breathout and not breathout then
        breathout = true
        snd_breathout:play( db.actor, 0, sound_object.s2d )
        snd_breathout.volume = 0.25
      end
    end,
    function() ezi_t = false end
  )
  ezi_t:set_script_name( "dsh_wpn.ezi_startup" )
end


function on_actor_weapon_zoom_out( obj )
  apply_const_dev = true
  if ezi_t then
    ezi_t:stop()
    ezi_t = false
  end
end