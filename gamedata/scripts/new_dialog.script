local nagrad = {
  
    level_1 = {
    "ammo_9x39_sp5",
    "ammo_7.62x39_ap",
    "ammo_7.62x39_fmj",
    "ammo_5.45x39_ap",
    "ammo_5.45x39_fmj",
    "ammo_5.56x45_ap",
    "ammo_7.62x25_p",
    "ammo_7.62x25_ps",
    "ammo_5.56x45_ss190"
   },
    level_2 = {
    "af_electra_flash",
    "af_electra_moonlight",
    "af_ameba_mica",
    "af_dummy_spring",
    "af_dummy_dummy",
    "af_dummy_battery",
    "af_cristall",
    "gold_art",
    "af_soul",
    "af_dummy_pellicle",
    "af_rusty_kristall",
    "af_night_star",
    "af_gold_fish",
    "af_fuzz_kolobok",
    "af_rusty_sea-urchin",
    "af_dummy_glassbeads"
   },
    level_3 = {
    "wpn_sig552_isg_siber",
    "wpn_l85_m2",
    "wpn_abakan_n_m2",
    "wpn_desert_eagle",
    "wpn_mp153_m1",
    "wpn_groza",
    "wpn_scar_siber_m1_black",
    "wpn_kiparis_s",
    "wpn_glock17_m1",
    "wpn_remington700_bas",
   },
    level_4 = {
    "wpn_fn57_bas",
    "wpn_scar_siber",
    "wpn_m4_butcher",
    "wpn_scar_siber_m2",
    "wpn_svd_m1",
    "wpn_gauss_bas"
   },
    level_5 = {
    "ammo_9x39_ap",
    "ammo_7.62x51_fmj",
    "ammo_7.62x51_ap",
    "ammo_7.62x54_7h14",
    "ammo_7.62x54_7h1",
    "ammo_7.62x54_ap",
    "ammo_gauss",
    "ammo_9x39_pab9"
   },
   level_6 = {
    "ammo_9x39_ap",
    "ammo_7.62x51_fmj",
    "ammo_7.62x51_ap",
    "ammo_7.62x54_7h14",
    "ammo_7.62x54_7h1",
    "ammo_7.62x54_ap",
    "ammo_7.62x39_ap",
    "ammo_7.62x39_fmj",
    "ammo_9x39_pab9",
    "ammo_7.62x25_p",
    "ammo_7.62x25_ps",
    "antirad",
    "medkit",
    "medkit_army",
    "medkit_scientic",
    "ammo_9x19_pbp",
    "ammo_9x19_fmj",
    "ammo_5.45x39_ap",
    "ammo_5.45x39_fmj",
    "ammo_5.56x45_ap",
    "ammo_5.56x45_ss190",
    "ammo_11.43x23_fmj",
    "ammo_11.43x23_hydro",
    "wpn_addon_silencer",
    "mutant_flesh_eye",
    "mutant_boar_leg",
    "mutant_dog_tail",
    "mutant_psevdodog_tail",
    "af_medusa",
    "af_blood",
    "af_drops",
    "grenade_f1",
    "grenade_rgd5",
    "grenade_rgo",
    "grenade_rgn",
    "ammo_og-7b",
    "ammo_vog-25p",
    "ammo_vog-25",
    "ammo_m209"
   }
}

-- Получение количества предметов в инвентаре ГГ
function count_item(section, number)
    local count = 0
    db.actor:iterate_inventory(function(dummy, item)
        if item:section() == section then
            count = count + 1
        end
    end)
    if count >= number then
        return true
    else
        return false
    end
end

function af_cristall_flower_have()
    return count_item("af_cristall_flower", 1)
end

function af_blood_have()
    return count_item("af_blood", 1)
end

function af_night_star_have()
    return count_item("af_night_star", 1)
end

function af_soul_have()
    return count_item("af_soul", 1)
end

function af_dummy_spring_have()
    return count_item("af_dummy_spring", 1)
end

function af_cristall_have()
    return count_item("af_cristall", 1)
end

function af_gold_fish_have()
    return count_item("af_gold_fish", 1)
end

function af_mincer_meat_have()
    return count_item("af_mincer_meat", 1)
end

function af_gravi_have()
    return count_item("af_gravi", 1)
end

function af_cristall_flower_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_fmj", "in", 3)
    dialogs.relocate_item_section(first_speaker, "medkit", "in", 1)
    dialogs.relocate_item_section(first_speaker, "antirad", "in", 1)
    dialogs.relocate_item_section(second_speaker, "af_cristall_flower", "out", 1)
end

function af_blood_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "medkit", "in", 2)
    dialogs.relocate_item_section(second_speaker, "af_blood", "out", 1)
end

function af_night_star_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_9x39_ap", "in", 5)
    dialogs.relocate_item_section(first_speaker, "medkit_scientic", "in", 2)
    dialogs.relocate_item_section(first_speaker, "antirad", "in", 2)
    dialogs.relocate_item_section(second_speaker, "af_night_star", "out", 1)
end

function af_soul_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_5.56x45_ap", "in", 5)
    dialogs.relocate_item_section(first_speaker, "medkit_scientic", "in", 3)
    dialogs.relocate_item_section(first_speaker, "af_soul", "out", 1)
end

function af_dummy_spring_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_7.62x54_7h14", "in", 5)
    dialogs.relocate_item_section(first_speaker, "antirad", "in", 2)
    dialogs.relocate_item_section(first_speaker, "af_dummy_spring", "out", 1)
end

function af_cristall_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_9x39_pab9", "in", 5)
    dialogs.relocate_item_section(first_speaker, "medkit_army", "in", 2)
    dialogs.relocate_item_section(first_speaker, "af_cristall", "out", 1)
end

function af_gold_fish_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_ap", "in", 5)
    dialogs.relocate_item_section(first_speaker, "medkit_army", "in", 2)
    dialogs.relocate_item_section(first_speaker, "conserva", "in", 4)
    dialogs.relocate_item_section(first_speaker, "af_gold_fish", "out", 1)
end

function af_mincer_meat_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_fmj", "in", 3)
    dialogs.relocate_item_section(first_speaker, "medkit", "in", 2)
    dialogs.relocate_item_section(first_speaker, "kolbasa", "in", 4)
    dialogs.relocate_item_section(first_speaker, "af_mincer_meat", "out", 1)
end

function af_gravi_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_5.56x45_ss190", "in", 3)
    dialogs.relocate_item_section(first_speaker, "medkit", "in", 2)
    dialogs.relocate_item_section(first_speaker, "kolbasa", "in", 4)
    dialogs.relocate_item_section(first_speaker, "af_gravi", "out", 1)
end

function start_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "monolit_outfit", "in", 1)
    dialogs.relocate_item_section(first_speaker, "wpn_ak74u", "in", 1)
    dialogs.relocate_item_section(first_speaker, "medkit", "in", 2)
    dialogs.relocate_item_section(first_speaker, "bandage", "in", 2)
    dialogs.relocate_item_section(first_speaker, "grenade_rgd5", "in", 1)
    db.actor:set_character_community("monolith", 0, 0)
end

function haron_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_fmj", "in", 5)
end

function haron_burer_have(task, info)
    if db.actor and db.actor:has_info("burer1_dead") and db.actor:has_info("burer2_dead") 
    and db.actor:has_info("burer3_dead") and db.actor:has_info("burer4_dead") 
    and db.actor:has_info("burer5_dead") and db.actor:has_info("burer6_dead") then
        return db.actor:give_info_portion("haron_burer_have")
    end
    return false
end

function pribor_haron_have(task, objective)
    return count_item("pribor_haron", 1)
end

function haron_burer_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "pribor_haron", "out", 1)
end

function actor_5vodka_have()
    return count_item("vodka", 5)
end

function actor_5vodka_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "vodka", "out", 5)
    dialogs.relocate_item_section(first_speaker, "wpn_glock17_m1", "in", 1)
end

function actor_10conserva_have()
    return count_item("conserva", 5)
end

function actor_10conserva_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "conserva", "out", 5)
end

function actor_10device_pda_npc_have()
    return count_item("device_pda_npc", 5)
end

function actor_10device_pda_npc_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "device_pda_npc", "out", 5)
    dialogs.relocate_item_section(first_speaker, "wpn_addon_grenade_launcher", "in", 1)
    dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_fmj", "in", 3)
end

function haron_need_stalker_have(task, info)
    if db.actor and db.actor:has_info("stalker_aes1_dead") and db.actor:has_info("stalker_aes2_dead")
    and db.actor:has_info("stalker_aes3_dead") and db.actor:has_info("stalker_aes4_dead") 
    and db.actor:has_info("stalker_aes5_dead") and db.actor:has_info("stalker_aes6_dead") then
        return db.actor:give_info_portion("haron_need_stalker_have")
    end
    return false
end

function haron_dal2(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_fmj", "in", 3)
    dialogs.relocate_item_section(first_speaker, "medkit", "in", 2)
    dialogs.relocate_item_section(first_speaker, "antirad", "in", 2)
end

function tri_case_aes_have()
    return count_item("aes_case1", 1) and count_item("aes_case2", 1) and count_item("aes_case3", 1)
end

function tri_case_aes_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "aes_case1", "out", 1)
    dialogs.relocate_item_section(first_speaker, "aes_case2", "out", 1)
    dialogs.relocate_item_section(first_speaker, "aes_case3", "out", 1)
    dialogs.relocate_item_section(first_speaker, "grenade_f1", "in", 5)
end

function tri_snork_leg_have()
    return count_item("mutant_snork_leg", 8)
end

function tri_snork_leg_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_snork_leg", "out", 8)
    dialogs.relocate_item_section(first_speaker, "ammo_12x70_buck", "in", 6)
end

function haron_dal3(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_fmj", "in", 3)
    dialogs.relocate_item_section(first_speaker, "medkit_army", "in", 2)
    dialogs.relocate_item_section(first_speaker, "antirad", "in", 2)
    dialogs.relocate_item_section(first_speaker, "wpn_mp133_bas", "in", 1)
    dialogs.relocate_item_section(first_speaker, "ammo_12x70_buck", "in", 1)
end

function control_monolit_have(task, info)
    if (db.actor:has_info("one_kontr_dead") and db.actor:has_info("two_kontr_dead")) then
        return db.actor:give_info_portion("control_monolit_have")
    end
    return false
end

function haron_naem_have(task, info)
    if (db.actor:has_info("har_naem1_dead") and db.actor:has_info("har_naem2_dead")
    and db.actor:has_info("har_naem3_dead") and db.actor:has_info("har_naem4_dead")
    and db.actor:has_info("har_naem5_dead") and db.actor:has_info("har_naem6_dead")
    and db.actor:has_info("har_naem7_dead") and db.actor:has_info("har_naem8_dead")
    and db.actor:has_info("har_naem9_dead") and db.actor:has_info("har_naem10_dead")
    and db.actor:has_info("har_naem11_dead") and db.actor:has_info("har_naem12_dead")
    and db.actor:has_info("har_naem13_dead") and db.actor:has_info("har_naem14_dead")
    and db.actor:has_info("har_naem15_dead") and db.actor:has_info("har_naem16_dead")
    and db.actor:has_info("har_naem17_dead") and db.actor:has_info("har_naem18_dead")
    and db.actor:has_info("har_naem19_dead") and db.actor:has_info("har_naem20_dead")) then
        return db.actor:give_info_portion("haron_naem_have")
    end
    return false
end

function mathon_naem_have(task, info)
    if (db.actor:has_info("math_naem1_dead") and db.actor:has_info("math_naem2_dead")
    and db.actor:has_info("math_naem3_dead") and db.actor:has_info("math_naem4_dead")
    and db.actor:has_info("math_naem5_dead") and db.actor:has_info("math_naem6_dead")
    and db.actor:has_info("math_naem7_dead") and db.actor:has_info("math_naem8_dead")
    and db.actor:has_info("math_naem9_dead") and db.actor:has_info("math_naem10_dead")) then
        return db.actor:give_info_portion("mathon_naem_have")
    end
    return false
end

function dyak_have(task, info)
    if (db.actor:has_info("military1_dead") and db.actor:has_info("military2_dead")
    and db.actor:has_info("military3_dead") and db.actor:has_info("military4_dead")
    and db.actor:has_info("military5_dead") and db.actor:has_info("military6_dead")) then
        return db.actor:give_info_portion("dyak_have")
    end
    return false
end

function seven_mutant_chimera_kogot_have()
    return count_item("mutant_dog_tail", 10)
end

function two_af_night_star_have()
    return count_item("af_night_star", 2)
end

function haron_doktor_have()
    return count_item("doctor_box", 1)
end

function chimera_kogot_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_dog_tail", "out", 10)
    dialogs.relocate_item_section(first_speaker, "doctor_box", "in", 1)
end

function two_night_star_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_night_star", "out", 2)
    dialogs.relocate_item_section(first_speaker, "doctor_box", "in", 1)
end

function dyak_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_kiparis_s", "in", 1)
    dialogs.relocate_item_section(first_speaker, "kobra", "in", 1)
    dialogs.relocate_item_section(second_speaker, "ammo_9x18_fmj", "in", 4)
end

function haron_doktor_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "doctor_box", "out", 1)
end

function mathon_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "detector_advances", "in", 1)
end

function tenflesh_eye_have()
    return count_item("mutant_flesh_eye", 10)
end

function tenboar_leg_have()
    return count_item("mutant_boar_leg", 10)
end

function tendog_tail_have()
    return count_item("mutant_dog_tail", 10)
end

function tenpsevdodog_tail_have()
    return count_item("mutant_psevdodog_tail", 10)
end

function tenkrovosos_jaw_have()
    return count_item("mutant_krovosos_jaw", 10)
end

function tenburer_hand_have()
    return count_item("mutant_burer_hand", 10)
end

function tenzombie_hand_have()
    return count_item("mutant_zombie_hand", 10)
end

function tensnork_leg_have()
    return count_item("mutant_snork_leg", 10)
end

function tenface_tushkano_have()
    return count_item("mutant_face_tushkano", 10)
end

function tenhand_kontroler_have()
    return count_item("mutant_hand_kontroler", 10)
end

function tenpsevdogigant_hand_have()
    return count_item("mutant_psevdogigant_hand", 10)
end

function tenchimera_kogot_have()
    return count_item("mutant_chimera_kogot", 10)
end

function tenflesh_eye_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_flesh_eye", "out", 10)
    dialogs.relocate_item_section(first_speaker, "medkit_scientic", "in", 4)
end

function tenboar_leg_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_boar_leg", "out", 10)
    dialogs.relocate_item_section(first_speaker, "medkit_army", "in", 4)
end

function tendog_tail_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_dog_tail", "out", 10)
    dialogs.relocate_item_section(first_speaker, "ammo_12x70_buck", "in", 4)
end

function tenpsevdodog_tail_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_psevdodog_tail", "out", 10)
    dialogs.relocate_item_section(first_speaker, "grenade_f1", "in", 4)
end

function tenkrovosos_jaw_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_krovosos_jaw", "out", 10)
    dialogs.relocate_item_section(first_speaker, "ammo_9x39_ap", "in", 4)
end

function tenburer_hand_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_burer_hand", "out", 10)
    dialogs.relocate_item_section(first_speaker, "ammo_5.56x45_ap", "in", 4)
end

function tenzombie_hand_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_zombie_hand", "out", 10)
    dialogs.relocate_item_section(first_speaker, "ammo_12x70_buck", "in", 5)
end

function tensnork_leg_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_snork_leg", "out", 10)
    dialogs.relocate_item_section(first_speaker, "medkit", "in", 4)
end

function tenface_tushkano_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_face_tushkano", "out", 10)
    dialogs.relocate_item_section(first_speaker, "ammo_9x18_pmm", "in", 5)
end

function tenhand_kontroler_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_hand_kontroler", "out", 10)
    dialogs.relocate_item_section(first_speaker, "antirad", "in", 5)
end

function tenpsevdogigant_hand_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_psevdogigant_hand", "out", 10)
    dialogs.relocate_item_section(first_speaker, "ammo_5.56x45_ss190", "in", 7)
end

function tenchimera_kogot_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_chimera_kogot", "out", 10)
    dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_ap", "in", 5)
end

function solomon_food_have()
    return count_item("box_food", 1)
end

function solomon_medik_have()
    return count_item("box_remont", 1)
end

function solomon1_give(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "box_food", "out", 1)
    dialogs.relocate_item_section(first_speaker, "box_remont", "out", 1)
    dialogs.relocate_item_section(first_speaker, "eot", "in", 1)
end

function solomon2_give(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "box_food", "out", 1)
    dialogs.relocate_item_section(first_speaker, "box_remont", "out", 1)
    dialogs.relocate_item_section(first_speaker, "pso2", "in", 1)
end

function solomon3_give(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "box_food", "out", 1)
    dialogs.relocate_item_section(first_speaker, "box_remont", "out", 1)
    dialogs.relocate_item_section(first_speaker, "wpn_vz61_scorpion_m1", "in", 1)
end

function prizrak_zachita_have(task, info)
    if (db.actor:has_info("prizrak1_mo_dead") and db.actor:has_info("prizrak2_mo_dead")
    and db.actor:has_info("prizrak3_mo_dead") and db.actor:has_info("prizrak4_mo_dead") 
    and db.actor:has_info("prizrak5_mo_dead") and db.actor:has_info("prizrak6_mo_dead")) then
        return db.actor:give_info_portion("prizrak_zachita_have")
    end
    return false
end

function monolit_bunker_doc_have()
    return count_item("shceme_document", 1)
end

function monolit_bunker_doc_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "shceme_document", "out", 1)
end

function kliyk_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "medkit_army", "in", 3)
    dialogs.relocate_item_section(first_speaker, "wpn_svd_m1", "in", 1)
end

function aes_solomon_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_mp153_bas", "in", 1)
    dialogs.relocate_item_section(first_speaker, "antirad", "in", 2)
    dialogs.relocate_item_section(first_speaker, "medkit_army", "in", 2)
    dialogs.relocate_item_section(first_speaker, "ammo_12x70_buck", "in", 12)
end

function aes_solomon_posylka(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "solomon_box", "in", 1)
end

function solomon_box_have()
    return count_item("solomon_box", 1)
end

function solomon_af_cristall_have()
    return count_item("af_cristall", 2)
end

function solomon_af_dummy_pellicle_have()
    return count_item("af_dummy_pellicle", 2)
end

function solomon_box_kri_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "solomon_box", "out", 1)
    dialogs.relocate_item_section(first_speaker, "af_cristall", "out", 3)
end

function solomon_box_plen_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "solomon_box", "out", 1)
    dialogs.relocate_item_section(first_speaker, "af_dummy_pellicle", "out", 2)
end

function atp_zahar_help_have(task, info)
    if (db.actor:has_info("atp_psevdo1_dead") and db.actor:has_info("atp_psevdo2_dead")
    and db.actor:has_info("atp_psevdo3_dead") and db.actor:has_info("atp_psevdo4_dead")
    and db.actor:has_info("atp_psevdo5_dead") and db.actor:has_info("atp_psevdo6_dead")) then
        return db.actor:give_info_portion("atp_zahar_help_have")
    end
    return false
end

function atp_zahar_help_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "antirad", "in", 1)
    dialogs.relocate_item_section(first_speaker, "medkit", "in", 3)
    dialogs.relocate_item_section(first_speaker, "ammo_12x70_buck", "in", 6)
end

function friend_krovosos_have(task, info)
    if (db.actor:has_info("atp_boar1_dead") and db.actor:has_info("atp_boar2_dead")
    and db.actor:has_info("atp_boar3_dead") and db.actor:has_info("atp_boar4_dead")
    and db.actor:has_info("atp_boar5_dead") and db.actor:has_info("atp_boar6_dead")) then
        return db.actor:give_info_portion("friend_krovosos_have")
    end
    return false
end

function atp_bandit_zahar_have(task, info)
    if (db.actor:has_info("atp_bandit1_dead") and db.actor:has_info("atp_bandit2_dead")
    and db.actor:has_info("atp_bandit3_dead") and db.actor:has_info("atp_bandit4_dead")
    and db.actor:has_info("atp_bandit5_dead") and db.actor:has_info("atp_bandit6_dead")
    and db.actor:has_info("atp_bandit7_dead")) then
        return db.actor:give_info_portion("atp_bandit_zahar_have")
    end
    return false
end

function atp_bandit_zahar_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "antirad", "in", 3)
end

function zahar_vosem_dog_tail_have()
    return count_item("mutant_dog_tail", 8)
end

function zahar_vosem_dog_tail_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_dog_tail", "out", 8)
    dialogs.relocate_item_section(first_speaker, "ammo_12x70_buck", "in", 5)
end

function zahar_six_boar_leg_have()
    return count_item("mutant_boar_leg", 6)
end

function zahar_six_boar_leg_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_boar_leg", "out", 6)
    dialogs.relocate_item_section(first_speaker, "ammo_12x70_buck", "in", 5)
end

function zahar_six_chimera_kogot_have()
    return count_item("mutant_chimera_kogot", 6)
end

function zahar_six_chimera_kogot_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_chimera_kogot", "out", 6)
    dialogs.relocate_item_section(first_speaker, "ammo_12x70_buck", "in", 5)
end

function zahar_two_af_vyvert_have()
    return count_item("af_vyvert", 2)
end

function zahar_two_af_vyvert_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_vyvert", "out", 2)
    dialogs.relocate_item_section(first_speaker, "ammo_12x70_buck", "in", 5)
end

function zahar_vosem_psevdodog_tail_have()
    return count_item("mutant_psevdodog_tail", 8)
end

function zahar_vosem_psevdodog_tail_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_psevdodog_tail", "out", 8)
    dialogs.relocate_item_section(first_speaker, "medkit", "in", 3)
end

function zahar_af_ameba_slug_have()
    return count_item("af_ameba_slug", 1)
end

function zahar_af_ameba_slug_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_ameba_slug", "out", 1)
    dialogs.relocate_item_section(first_speaker, "medkit", "in", 3)
end

function zahar_af_cristall_flower_have()
    return count_item("af_cristall_flower", 1)
end

function zahar_af_cristall_flower_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_cristall_flower", "out", 1)
    dialogs.relocate_item_section(first_speaker, "medkit", "in", 3)
end

function zahar_af_gravi_have()
    return count_item("af_gravi", 1)
end

function zahar_af_gravi_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_gravi", "out", 1)
    dialogs.relocate_item_section(first_speaker, "medkit", "in", 3)
end

function zahar_six_krovosos_jaw_have()
    return count_item("mutant_krovosos_jaw", 6)
end

function zahar_six_krovosos_jaw_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_krovosos_jaw", "out", 6)
    dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_fmj", "in", 5)
end

function zahar_af_mincer_meat_have()
    return count_item("af_mincer_meat", 1)
end

function zahar_af_mincer_meat_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_mincer_meat", "out", 1)
    dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_fmj", "in", 5)
end

function zahar_two_af_ameba_slime_have()
    return count_item("af_ameba_slime", 2)
end

function zahar_two_af_ameba_slime_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_ameba_slime", "out", 2)
    dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_fmj", "in", 5)
end

function zahar_two_af_medusa_have()
    return count_item("af_medusa", 2)
end

function zahar_two_af_medusa_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_medusa", "out", 2)
    dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_fmj", "in", 5)
end

function zahar_pismo_have()
    return count_item("zahar_pismo", 1)
end

function zahar_pismo_vzal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "zahar_pismo", "in", 1)
end

function zahar_pismo_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "zahar_pismo", "out", 1)
end

function mil_lucash_help_have(task, info)
    if db.actor:has_info("lucash_na_meste") then
        return db.actor:give_info_portion("mil_lucash_help_have")
    end
    return false
end

function mil_lucash_barier_have(task, info)
    if (db.actor:has_info("mil_barier_one") and db.actor:has_info("mil_barier_two")
    and db.actor:has_info("mil_barier_tri") and db.actor:has_info("mil_barier_four")
    and db.actor:has_info("mil_barier_five") and db.actor:has_info("keb_na_meste")) then
        return db.actor:give_info_portion("mil_lucash_barier_have")
    end
    return false
end

function mil_lucash_barier_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_m4_ru556", "in", 1)
    dialogs.relocate_item_section(first_speaker, "ammo_5.56x45_ap", "in", 5)
    dialogs.relocate_item_section(first_speaker, "medkit_army", "in", 2)
end

function inform_20_pda_have()
    return count_item("device_pda_npc", 10)
end

function inform_40_pda_have()
    return count_item("device_pda_npc", 20)
end

function inform_20_pda(first_speaker, second_speaker)
    item = nagrad.level_6[math.random(table.getn(nagrad.level_6))]
    dialogs.relocate_item_section(first_speaker, "device_pda_npc", "out", 10)
    dialogs.relocate_item_section(first_speaker, item, "in", count)
end

function inform_40_pda(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "device_pda_npc", "out", 20)
end

function trader_bratok_saiga(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "af_mincer_meat", "out", 2)
    dialogs.relocate_item_section(first_speaker, "wpn_saiga12s_isg", "in", 1)
end

function trader_bratok_ak_47(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "af_ameba_mica", "out", 2)
    dialogs.relocate_item_section(first_speaker, "wpn_akms_bas", "in", 1)
end

function trader_bratok_762x39_fmj(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "conserva", "out", 5)
    dialogs.relocate_item_section(first_speaker, "ammo_7.62x39_fmj", "in", 3)
end

function trader_bratok_762x39_ap(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "vodka", "out", 4)
    dialogs.relocate_item_section(first_speaker, "ammo_7.62x39_ap", "in", 3)
end

function trader_bratok_545x39_fmj(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "bread", "out", 5)
    dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_fmj", "in", 3)
end

function trader_bratok_545x39_ap(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "vodka", "out", 4)
    dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_ap", "in", 3)
end

function trader_bratok_556x45_ss190(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "kolbasa", "out", 5)
    dialogs.relocate_item_section(first_speaker, "ammo_5.56x45_ss190", "in", 3)
end

function trader_bratok_556x45_ap(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "vodka", "out", 4)
    dialogs.relocate_item_section(first_speaker, "ammo_5.56x45_ap", "in", 3)
end

function trader_bratok_762x54_7h1(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "af_cristall_flower", "out", 1)
    dialogs.relocate_item_section(first_speaker, "ammo_7.62x54_7h1", "in", 3)
end

function trader_bratok_9x39_pab9(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "af_ameba_slug", "out", 1)
    dialogs.relocate_item_section(first_speaker, "ammo_9x39_pab9", "in", 3)
end

function five_vodka_have()
    return count_item("vodka", 5)
end

function four_vodka_have()
    return count_item("vodka", 4)
end

function tri_vodka_have()
    return count_item("vodka", 3)
end

function five_bread_have()
    return count_item("bread", 5)
end

function five_kolbasa_have()
    return count_item("kolbasa", 5)
end

function five_conserva_have()
    return count_item("conserva", 5)
end

function one_af_cristall_flower_have()
    return count_item("af_cristall_flower", 1)
end

function one_af_ameba_slug_have()
    return count_item("af_ameba_slug", 1)
end

function two_af_mincer_meat_have()
    return count_item("af_mincer_meat", 2)
end

function two_af_ameba_mica_have()
    return count_item("af_ameba_mica", 2)
end

function mil_osvedomitel_have()
    return count_item("informator_doc", 1)
end

function mil_osvedomitel_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "informator_doc", "out", 1)
end

function osvedomitel_help(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "medkit", "in", 5)
    dialogs.relocate_item_section(first_speaker, "kolbasa", "in", 5)
    dialogs.relocate_item_section(first_speaker, "vodka", "in", 5)
    dialogs.relocate_item_section(first_speaker, "conserva", "in", 5)
end

function osvedomitel_help_have()
    return count_item("medkit", 5) and count_item("kolbasa", 5) and count_item("vodka", 5) and count_item("conserva", 5)
end

function radar_help_russia(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_fmj", "in", 5)
    dialogs.relocate_item_section(first_speaker, "medkit", "out", 5)
    dialogs.relocate_item_section(first_speaker, "vodka", "out", 5)
    dialogs.relocate_item_section(first_speaker, "kolbasa", "out", 5)
    dialogs.relocate_item_section(first_speaker, "conserva", "out", 5)
end

function radar_help_nato(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_5.56x45_ss190", "in", 5)
    dialogs.relocate_item_section(first_speaker, "medkit", "out", 5)
    dialogs.relocate_item_section(first_speaker, "vodka", "out", 5)
    dialogs.relocate_item_section(first_speaker, "kolbasa", "out", 5)
    dialogs.relocate_item_section(first_speaker, "conserva", "out", 5)
end

function sveeblov_krovosos_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "medkit_army", "in", 5)
end

function sveeblov_predatel_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_k98_mod", "in", 1)
    dialogs.relocate_item_section(first_speaker, "ammo_7.92x33_fmj", "in", 1)
end

function sveeblov_lab_have()
    return count_item("labx10_doc", 1) and count_item("labx10_computer", 1)
end

function sveeblov_lab_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "labx10_doc", "out", 1)
    dialogs.relocate_item_section(first_speaker, "labx10_computer", "out", 1)
end

function bes_help_levsha_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_fmj", "in", 5)
end

function levsha_need_outfit_have(task, objective)
    if db.actor then
        if db.actor:object("merc_scientific_outfit") and db.actor:object("merc_scientific_outfit"):condition()
        and db.actor:object("merc_scientific_outfit"):condition() > 0.95 then
            return true
        end
    end
    return false
end

function levsha_need_groza_have(task, objective)
    if db.actor and db.actor:object("wpn_groza") and db.actor:object("wpn_groza"):condition() > 0.95 then
        return true
    end
    return false
end

function levsha_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "wpn_groza", "out", 1)
    dialogs.relocate_item_section(second_speaker, "merc_scientific_outfit", "out", 1)
end

function lucash_need_levsha_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "kobra", "in", 1)
    dialogs.relocate_item_section(first_speaker, "wpn_ak74u_tac", "in", 1)
    dialogs.relocate_item_section(first_speaker, "antirad", "in", 2)
end

function knyaz_zadan_have()
    return count_item("wpn_winchester_knyaz", 1)
end

function knyaz_zadan_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "wpn_winchester_knyaz", "out", 1)
end

function dolg_leader_help_have(task, info)
    if db.actor and db.actor:has_info("val_atak_bandit1_dead") and db.actor:has_info("val_atak_bandit2_dead")
    and db.actor:has_info("val_atak_bandit3_dead") and db.actor:has_info("val_atak_bandit4_dead")
    and db.actor:has_info("val_atak_bandit5_dead") and db.actor:has_info("val_atak_bandit6_dead")
    and db.actor:has_info("val_atak_bandit7_dead") and db.actor:has_info("val_atak_bandit8_dead")
    and db.actor:has_info("val_atak_bandit9_dead") and db.actor:has_info("val_atak_bandit10_dead")
    and db.actor:has_info("val_atak_bandit11_dead") and db.actor:has_info("val_atak_bandit12_dead")
    and db.actor:has_info("val_atak_bandit13_dead") and db.actor:has_info("val_atak_bandit14_dead")
    and db.actor:has_info("val_atak_bandit15_dead") then
        return db.actor:give_info_portion("dolg_leader_help_have")
    end
    return false
end

function dolg_leader_help_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_abakan_n_m2", "in", 1)
    dialogs.relocate_item_section(first_speaker, "medkit_army", "in", 2)
end

function petr_af_medusa_have()
    return count_item("af_medusa", 1)
end

function petr_af_medusa_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_medusa", "out", 1)
    dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_ap", "in", 3)
end

function petr_af_mincer_meat_have()
    return count_item("af_mincer_meat", 1)
end

function petr_af_mincer_meat_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_mincer_meat", "out", 1)
    dialogs.relocate_item_section(first_speaker, "ammo_7.62x54_ap", "in", 3)
end

function petr_af_electra_flash_have()
    return count_item("af_electra_flash", 1)
end

function petr_af_electra_flash_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_electra_flash", "out", 1)
    dialogs.relocate_item_section(first_speaker, "ammo_7.62x54_7h14", "in", 3)
end

function petr_af_gravi_have()
    return count_item("af_gravi", 1)
end

function petr_af_gravi_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_gravi", "out", 1)
    dialogs.relocate_item_section(first_speaker, "ammo_9x39_sp5", "in", 3)
end

function petr_two_af_electra_sparkler_have()
    return count_item("af_electra_sparkler", 2)
end

function petr_two_af_electra_sparkler_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_electra_sparkler", "out", 2)
    dialogs.relocate_item_section(first_speaker, "ammo_9x39_ap", "in", 3)
end

function petr_two_af_gravi_have()
    return count_item("af_gravi", 2)
end

function petr_two_af_gravi_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_gravi", "out", 2)
    dialogs.relocate_item_section(first_speaker, "wpn_abakan_n_m1", "in", 1)
end

function petr_two_af_rusty_sea_urchin_have()
    return count_item("af_rusty_sea-urchin", 2)
end

function petr_two_af_rusty_sea_urchin_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_rusty_sea-urchin", "out", 2)
    dialogs.relocate_item_section(first_speaker, "wpn_abakan_n_m2", "in", 1)
end

function petr_tri_af_dummy_battery_have()
    return count_item("af_dummy_spring_red", 2)
end

function petr_tri_af_dummy_battery_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_dummy_spring_red", "out", 2)
    dialogs.relocate_item_section(first_speaker, "wpn_pk_siber", "in", 1)
end

function petr_tri_af_cristall_have()
    return count_item("af_dummy_battery_red", 2)
end

function petr_tri_af_cristall_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_dummy_battery_red", "out", 2)
    dialogs.relocate_item_section(first_speaker, "wpn_vintorez_isg", "in", 1)
end

function petr_two_af_cristall_flower_have()
    return count_item("af_cristall_flower", 2)
end

function petr_two_af_cristall_flower_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_cristall_flower", "out", 2)
    dialogs.relocate_item_section(first_speaker, "wpn_rpg7", "in", 1)
end

function petr_af_ameba_slug_have()
    return count_item("af_ameba_slug", 1)
end

function petr_af_ameba_slug_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_ameba_slug", "out", 1)
    dialogs.relocate_item_section(first_speaker, "medkit_army", "in", 3)
end

function semeckii_treasure_est(task, info)
    if db.actor and db.actor:has_info("semeckii_treasure_part2") and db.actor:has_info("semeckii_treasure_part3")
    and db.actor:has_info("semeckii_treasure_part4") and db.actor:has_info("semeckii_treasure_part5")
    and db.actor:has_info("semeckii_treasure_part6") and db.actor:has_info("semeckii_treasure_part7")
    and db.actor:has_info("semeckii_treasure_part8") then
        return db.actor:give_info_portion("semeckii_treasure_est")
    end
    return false
end

function knyaz_kill_dolg_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_medusa", "in", 1)
end

function knyaz_not_kill_dolg_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_dummy_glassbeads", "in", 1)
end

function af_fireball_two_have()
    return count_item("af_fireball", 2)
end

function af_fireball_two_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_fireball", "out", 2)
end

function knyaz_plan_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "new_plan", "out", 1)
    dialogs.relocate_item_section(first_speaker, "wpn_saiga12s_m1", "in", 1)
end

function knyaz_plan_have()
    return count_item("new_plan", 1)
end

function varayg_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "medkit_army", "in", 1)
    dialogs.relocate_item_section(first_speaker, "bandage", "in", 1)
end

function varayg_priz(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_m4_tac", "in", 1)
    dialogs.relocate_item_section(first_speaker, "wpn_sil_m42k", "in", 1)
end

function bes_patron_start(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_l85_m3", "in", 2)
end

function bes_patron_begin(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_l85_m3", "out", 2)
    dialogs.relocate_item_section(first_speaker, "box_patron", "in", 1)
end

function bes_patron_have()
    return count_item("box_patron", 1)
end

function actor_wpn_have()
    return count_item("wpn_l85_m3", 2)
end

function bes_patron_done(first_speaker, second_speaker)
    item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
    dialogs.relocate_item_section(first_speaker, item, "in", count)
    dialogs.relocate_item_section(first_speaker, "box_patron", "out", 1)
end

function sahar_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_sks_b_ucen", "in", 1)
    dialogs.relocate_item_section(first_speaker, "ammo_7.62x54_ucen", "in", 3)
end

function sahar_have()
    return count_item("wpn_sks_b_ucen", 1)
end

function sahar_vzal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_sks_b_ucen", "out", 1)
end

function ucen_need_metka_have(task, info)
    if db.actor and db.actor:has_info("ucen_need_metka_chimera_have")
    and db.actor:has_info("ucen_need_metka_gigant_have") and db.actor:has_info("ucen_need_metka_bloodsucker_have") then
        return db.actor:give_info_portion("ucen_need_metka_have")
    end
    return false
end

function doronin_help_have(task, info)
    if db.actor and db.actor:has_info("doronin_dead") then
        return db.actor:give_info_portion("doronin_help_have")
    end
    return false
end

function voronin_snork_have(task, info)
    if db.actor and db.actor:has_info("snork_voronin1_dead") and db.actor:has_info("snork_voronin2_dead")
    and db.actor:has_info("snork_voronin3_dead") and db.actor:has_info("snork_voronin4_dead")
    and db.actor:has_info("snork_voronin5_dead") and db.actor:has_info("snork_voronin6_dead")
    and db.actor:has_info("snork_voronin7_dead") and db.actor:has_info("snork_voronin8_dead")
    and db.actor:has_info("snork_voronin9_dead") and db.actor:has_info("snork_voronin10_dead")
    and db.actor:has_info("snork_voronin11_dead") and db.actor:has_info("snork_voronin12_dead") then
        return db.actor:give_info_portion("voronin_snork_have")
    end
    return false
end

function voronin_snork_done(first_speaker, second_speaker)
    item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
    dialogs.relocate_item_section(first_speaker, item, "in", count)
end

function dan_zombi_have(task, info)
    if db.actor and db.actor:has_info("dan_zombied1_dead") and db.actor:has_info("dan_zombied2_dead")
    and db.actor:has_info("dan_zombied3_dead") and db.actor:has_info("dan_zombied4_dead")
    and db.actor:has_info("dan_zombied5_dead") then
        return db.actor:give_info_portion("dan_zombi_have")
    end
    return false
end

function dan_zombi_done(first_speaker, second_speaker)
    local count = math.random(3, 4)
    item = nagrad.level_1[math.random(table.getn(nagrad.level_1))]
    dialogs.relocate_item_section(first_speaker, item, "in", count)
end

function dan_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_rg-6", "in", 1)
    dialogs.relocate_item_section(first_speaker, "ammo_vog-25", "in", 30)
end

function voronin_nychka_have()
    return count_item("wpn_abakan_n", 10) and count_item("ammo_5.45x39_ap", 15) and count_item("ammo_vog-25", 15)
end

function voronin_nychka_done(first_speaker, second_speaker)
    local count = math.random(1, 2)
    item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
    dialogs.relocate_item_section(first_speaker, item, "in", count)
    dialogs.relocate_item_section(first_speaker, "wpn_abakan_n", "out", 10)
    dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_ap", "out", 15)
    dialogs.relocate_item_section(first_speaker, "ammo_vog-25", "out", 15)
end

function dan_mosin_have()
    return count_item("af_fireball", 4)
end

function dan_mosin_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_remington700_bas_mod_x_gen3", "in", 1)
    dialogs.relocate_item_section(first_speaker, "ammo_7.62x51_ap", "in", 3)
    dialogs.relocate_item_section(first_speaker, "af_fireball", "out", 4)
end

function sahar_tri_af_drops_have()
    return count_item("af_drops", 3)
end

function sahar_tri_af_drops_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_7.62x51_fmj", "in", 2)
    dialogs.relocate_item_section(first_speaker, "af_drops", "out", 3)
end

function sahar_two_af_fireball_have()
    return count_item("af_fireball", 2)
end

function sahar_two_af_fireball_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_7.62x51_ap", "in", 2)
    dialogs.relocate_item_section(first_speaker, "af_fireball", "out", 2)
end

function sahar_af_dummy_pellicle_have()
    return count_item("af_dummy_pellicle", 1)
end

function sahar_af_dummy_pellicle_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_7.62x54_ap", "in", 2)
    dialogs.relocate_item_section(first_speaker, "af_dummy_pellicle", "out", 1)
end

function sahar_tri_af_soul_have()
    return count_item("af_soul", 1)
end

function sahar_tri_af_soul_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_howa20", "in", 1)
    dialogs.relocate_item_section(first_speaker, "af_soul", "out", 1)
end

function sahar_tri_af_cristall_have()
    return count_item("af_cristall", 1)
end

function sahar_tri_af_cristall_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_g28", "in", 1)
    dialogs.relocate_item_section(first_speaker, "af_cristall", "out", 1)
end

function sahar_sorok_mutant_poltergeist_glas_have()
    return count_item("mutant_poltergeist_glas", 10)
end

function sahar_sorok_mutant_poltergeist_glas_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_rem700_mcmillan", "in", 1)
    dialogs.relocate_item_section(first_speaker, "mutant_poltergeist_glas", "out", 10)
end

function sahar_ten_mutant_tail_cat_have()
    return count_item("mutant_tail_cat", 10)
end

function sahar_ten_mutant_tail_cat_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "medkit_scientic", "in", 3)
    dialogs.relocate_item_section(first_speaker, "mutant_tail_cat", "out", 10)
end

function sahar_ten_mutant_burer_hand_have()
    return count_item("mutant_burer_hand", 10)
end

function sahar_ten_mutant_burer_hand_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "medkit_scientic", "in", 2)
    dialogs.relocate_item_section(first_speaker, "mutant_burer_hand", "out", 10)
end

function dan_racia_start(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "resiver", "in", 1)
end

function dan_racia_have()
    return count_item("resiver", 1)
end

function dan_racia_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_12x70_buck", "in", 5)
    dialogs.relocate_item_section(first_speaker, "resiver", "out", 1)
end

function esc_tolik_help_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "medkit", "in", 2)
    dialogs.relocate_item_section(first_speaker, "grenade_f1", "in", 1)
end

function volk_tainik_have()
    return count_item("volk_pda", 1) and count_item("ammo_5.45x39_fmj", 12) and count_item("wpn_ak74u_isg", 6)
end

function volk_tainik_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "volk_pda", "out", 1)
end

function novice_weapon_have()
    return count_item("wpn_ak74u", 1) and count_item("ammo_5.45x39_fmj", 2)
end

function novice_weapon_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "ammo_5.45x39_fmj", "out", 2)
    dialogs.relocate_item_section(second_speaker, "wpn_ak74u", "out", 1)
end

function derevna_stalker_have(task, info)
    if db.actor and db.actor:has_info("volk_na_mest") and db.actor:has_info("volk_ban1_dead") and
        db.actor:has_info("volk_ban2_dead") and db.actor:has_info("volk_ban3_dead") and
        db.actor:has_info("volk_ban4_dead") then
        return db.actor:give_info_portion("derevna_stalker_have")
    end
    return false
end

function krest_razborka_have(task, info)
    if db.actor and db.actor:has_info("razbor_ban1_dead") and db.actor:has_info("razbor_ban2_dead")
    and db.actor:has_info("razbor_ban3_dead") and db.actor:has_info("razbor_ban4_dead") 
    and db.actor:has_info("razbor_ban5_dead") then
        return db.actor:give_info_portion("krest_razborka_have")
    end
    return false
end

function krest_razborka_done(first_speaker, second_speaker)
    local count = math.random(3, 4)
    item = nagrad.level_5[math.random(table.getn(nagrad.level_5))]
    dialogs.relocate_item_section(first_speaker, item, "in", count)
end

function kruglov_art_start(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "detector_kruglov", "in", 1)
end

function kruglov_art_have()
    return count_item("af_caterpillar", 1)
end

function kruglov_art_otdal(first_speaker, second_speaker)
    local count = math.random(2, 3)
    item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
    dialogs.relocate_item_section(first_speaker, item, "in", count)
    dialogs.relocate_item_section(first_speaker, "af_caterpillar", "out", 1)
    dialogs.relocate_item_section(first_speaker, "detector_kruglov", "out", 1)
end

function kruglov_art_ostsvil(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_caterpillar", "out", 1)
end

function actor_bbb_have()
    return count_item("af_babka_3", 1)
end

function actor_bbb_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "detector_kruglov", "in", 1)
    dialogs.relocate_item_section(first_speaker, "af_babka_3", "out", 1)
end

function actor_af_caterpillar_have()
    return count_item("af_caterpillar", 1)
end

function actor_af_caterpillar_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "detector_elite", "in", 1)
    dialogs.relocate_item_section(first_speaker, "af_caterpillar", "out", 1)
end

function kruglov_change(first_speaker, second_speaker)
    item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
    dialogs.relocate_item_section(first_speaker, item, "in", count)
    dialogs.relocate_item_section(first_speaker, "af_caterpillar", "out", 1)
end

function informator_trade_semeckii_have()
    return count_item("af_spirit_4", 1)
end

function informator_trade_semeckii_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_spirit_4", "out", 1)
end

function informator_af_cry_have()
    return count_item("af_cry_3", 2)
end

function informator_af_cry_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "af_cry_3", "out", 2)
end

function sidr_forty_mutant_dog_tail_have()
    return count_item("mutant_dog_tail", 40)
end

function sidr_forty_mutant_dog_tail_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_kiparis_s", "in", 1)
    dialogs.relocate_item_section(first_speaker, "mutant_dog_tail", "out", 40)
end

function sidr_thihty_mutant_psevdodog_tail_have()
    return count_item("mutant_psevdodog_tail", 30)
end

function sidr_thihty_mutant_psevdodog_tail_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_mp153_m1", "in", 1)
    dialogs.relocate_item_section(first_speaker, "mutant_psevdodog_tail", "out", 30)
end

function sidr_twentyfife_mutant_krovosos_jaw_have()
    return count_item("mutant_krovosos_jaw", 25)
end

function sidr_twentyfife_mutant_krovosos_jaw_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_vz61_scorpion_m2", "in", 1)
    dialogs.relocate_item_section(first_speaker, "mutant_krovosos_jaw", "out", 25)
end

function sidr_six_mutant_chimera_kogot_have()
    return count_item("mutant_chimera_kogot", 6)
end

function sidr_six_mutant_chimera_kogot_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_fmj", "in", 3)
    dialogs.relocate_item_section(first_speaker, "mutant_chimera_kogot", "out", 6)
end

function sidr_six_mutant_boar_leg_have()
    return count_item("mutant_boar_leg", 6)
end

function sidr_six_mutant_boar_leg_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_12x70_buck", "in", 3)
    dialogs.relocate_item_section(first_speaker, "mutant_boar_leg", "out", 6)
end

function sidr_six_mutant_flesh_eye_have()
    return count_item("mutant_flesh_eye", 6)
end

function sidr_six_mutant_flesh_eye_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "medkit", "in", 2)
    dialogs.relocate_item_section(first_speaker, "mutant_flesh_eye", "out", 6)
end

function freeman_ten_mutant_face_tushkano_have()
    return count_item("mutant_face_tushkano", 10)
end

function freeman_ten_mutant_face_tushkano_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_5.56x45_ss190", "in", 3)
    dialogs.relocate_item_section(first_speaker, "mutant_face_tushkano", "out", 10)
end

function freeman_ten_mutant_zombie_hand_have()
    return count_item("mutant_zombie_hand", 10)
end

function freeman_ten_mutant_zombie_hand_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_5.56x45_ap", "in", 3)
    dialogs.relocate_item_section(first_speaker, "mutant_zombie_hand", "out", 10)
end

function freeman_ten_mutant_psevdogigant_hand_have()
    return count_item("mutant_psevdogigant_hand", 5)
end

function freeman_ten_mutant_psevdogigant_hand_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_7.62x54_ap", "in", 3)
    dialogs.relocate_item_section(first_speaker, "mutant_psevdogigant_hand", "out", 5)
end

function freeman_ten_mutant_hand_kontroler_have()
    return count_item("mutant_hand_kontroler", 5)
end

function freeman_ten_mutant_hand_kontroler_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "medkit_army", "in", 5)
    dialogs.relocate_item_section(first_speaker, "antirad", "in", 5)
    dialogs.relocate_item_section(first_speaker, "mutant_hand_kontroler", "out", 5)
end

function svoboda_af_buliz_have()
    return count_item("af_buliz", 1)
end

function svoboda_af_buliz_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_sig552_siber", "in", 1)
    dialogs.relocate_item_section(first_speaker, "af_buliz", "out", 1)
end

function svoboda_af_cry_2_have()
    return count_item("af_cry_2", 1)
end

function svoboda_af_cry_2_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_sig550_siber", "in", 1)
    dialogs.relocate_item_section(first_speaker, "af_cry_2", "out", 1)
end

function svoboda_af_simbion_have()
    return count_item("af_simbion", 1)
end

function svoboda_af_simbion_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_pk_siber", "in", 1)
    dialogs.relocate_item_section(first_speaker, "af_simbion", "out", 1)
end

function svoboda_gold_art_have()
    return count_item("af_dummy_spring_red", 1)
end

function svoboda_gold_art_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_m4_tac", "in", 1)
    dialogs.relocate_item_section(first_speaker, "af_dummy_spring_red", "out", 1)
end

function svoboda_gold_art_famas_have()
    return count_item("gold_art", 1)
end

function svoboda_gold_art_famas_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_aug_a1_custom_bas", "in", 1)
    dialogs.relocate_item_section(first_speaker, "gold_art", "out", 1)
end

function svoboda_af_spirit_1_have()
    return count_item("af_spirit_1", 1)
end

function svoboda_af_spirit_1_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_sig552_tac_siber", "in", 1)
    dialogs.relocate_item_section(first_speaker, "af_spirit_1", "out", 1)
end

function svoboda_two_af_drops_have()
    return count_item("af_drops", 2)
end

function svoboda_two_af_drops_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_5.56x45_ap", "in", 3)
    dialogs.relocate_item_section(first_speaker, "af_drops", "out", 2)
end

function svoboda_two_af_blood_have()
    return count_item("af_blood", 2)
end

function svoboda_two_af_blood_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "ammo_5.56x45_ss190", "in", 3)
    dialogs.relocate_item_section(first_speaker, "af_blood", "out", 2)
end

function svoboda_two_af_electra_sparkler_have()
    return count_item("af_electra_sparkler", 2)
end

function svoboda_two_af_electra_sparkler_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "grenade_f1", "in", 3)
    dialogs.relocate_item_section(first_speaker, "af_electra_sparkler", "out", 2)
end

function svoboda_tri_af_ameba_slime_have()
    return count_item("af_ameba_slime", 3)
end

function svoboda_tri_af_ameba_slime_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "medkit_army", "in", 2)
    dialogs.relocate_item_section(first_speaker, "af_ameba_slime", "out", 3)
end

function kruglov_case_start(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "kruglov_case", "in", 1)
end

function kruglov_case_have()
    return count_item("kruglov_case", 1)
end

function voronin_case_vzal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "kruglov_case", "out", 1)
end

function knyaz_abakan_have()
    return count_item("wpn_abakan_n_m2", 1)
end

function knyaz_abakan_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "wpn_abakan_n_m2", "out", 1)
    dialogs.relocate_item_section(first_speaker, "wpn_saiga12s_m2", "in", 1)
    dialogs.relocate_item_section(first_speaker, "check", "in", 1)
end

function ohranik_trava_have()
    return count_item("check", 1)
end

function ohranik_trava_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "check", "out", 1)
end

function petrenko_weapon_have()
    return count_item("wpn_rg6_m1", 1)
end

function petrenko_weapon_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "wpn_rg6_m1", "out", 1)
    dialogs.relocate_item_section(first_speaker, "wpn_akm_alfa", "in", 1)
end

function kruglov_case_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_colt_ucen", "in", 1)
    dialogs.relocate_item_section(first_speaker, "ammo_9x19_ucen", "in", 1)
end

function zombi_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "book_zombi", "in", 1)
end

function sahar_shlem_have()
    return count_item("book_zombi", 1)
end

function sahar_shlem_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "book_zombi", "out", 1)
end

function sidr_lab_have()
    return count_item("notebook_x16", 1)
end

function sidr_lab_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "notebook_x16", "out", 1)
end

function mil_klyak_lab_have()
    return count_item("labx18_flash", 1)
end

function mil_klyak_sidr_start(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "notebook_x16", "in", 1)
end

function mil_klyak_sidr_have()
    return count_item("notebook_x16", 1) and count_item("labx18_flash", 1)
end

function mil_klyak_sidr_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "notebook_x16", "out", 1)
    dialogs.relocate_item_section(first_speaker, "labx18_flash", "out", 1)
end

function freeman_turist_done(first_speaker, second_speaker)
    item = nagrad.level_5[math.random(table.getn(nagrad.level_5))]
    dialogs.relocate_item_section(first_speaker, item, "in", count)
end

function zahar_pripyat_have()
    return count_item("mutant_poltergeist_glas", 3) and count_item("mutant_burer_hand", 3)
    and count_item("mutant_tail_cat", 3) and count_item("af_dummy_battery_red", 1)
end

function zahar_pripyat_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_poltergeist_glas", "out", 3)
    dialogs.relocate_item_section(first_speaker, "mutant_burer_hand", "out", 3)
    dialogs.relocate_item_section(first_speaker, "mutant_tail_cat", "out", 3)
    dialogs.relocate_item_section(first_speaker, "af_dummy_battery_red", "out", 1)
end

function mil_klyak_help_have(task, info)
    if (db.actor:has_info("mil_naem1_dead") and db.actor:has_info("mil_naem2_dead")
    and db.actor:has_info("mil_naem3_dead") and db.actor:has_info("mil_naem4_dead") 
    and db.actor:has_info("mil_naem5_dead") and db.actor:has_info("mil_naem6_dead") 
    and db.actor:has_info("mil_naem7_dead") and db.actor:has_info("mil_naem8_dead")) then
        return db.actor:give_info_portion("mil_klyak_help_have")
    end
    return false
end

function barman_work_cogot(task, info)
    if (db.actor:has_info("ban_kogot1_dead") and db.actor:has_info("ban_kogot2_dead") 
    and db.actor:has_info("ban_kogot3_dead") and db.actor:has_info("ban_kogot4_dead") 
    and db.actor:has_info("ban_kogot5_dead") and db.actor:has_info("ban_kogot6_dead") 
    and db.actor:has_info("ban_kogot7_dead") and db.actor:has_info("ban_kogot8_dead")) then
        return db.actor:give_info_portion("barman_work_cogot")
    end
    return false
end

function krest_work_done(first_speaker, second_speaker)
    item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
    dialogs.relocate_item_section(first_speaker, item, "in", count)
end

function actor_bad_detector_have()
    return count_item("detector_elite_bad", 1)
end

function actor_bad_detector_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "detector_elite_bad", "out", 1)
end

function levsha_detec_have()
    return count_item("af_ameba_mica", 1) and count_item("af_gold_fish", 1) and count_item("af_dummy_spring_red", 1) 
    and count_item("af_cristall", 1) and count_item("af_soul", 1) and count_item("af_electra_flash", 1)
end

function levsha_detec_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "detector_elite", "in", 1)
    dialogs.relocate_item_section(first_speaker, "af_ameba_mica", "out", 1)
    dialogs.relocate_item_section(first_speaker, "af_gold_fish", "out", 1)
    dialogs.relocate_item_section(first_speaker, "af_dummy_spring_red", "out", 1)
    dialogs.relocate_item_section(first_speaker, "af_cristall", "out", 1)
    dialogs.relocate_item_section(first_speaker, "af_soul", "out", 1)
    dialogs.relocate_item_section(first_speaker, "af_electra_flash", "out", 1)
    dialogs.relocate_item_section(first_speaker, "detector_elite_bad", "out", 1)
end

function actor_tri_vodka_have()
    return count_item("vodka", 3)
end

function fanat_recept_have()
    return count_item("gold_art", 2)
end

function fanat_recept_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "gold_art", "out", 2)
end

function lapsha_give(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_revolver357", "in", 1)
    dialogs.relocate_item_section(first_speaker, "ammo_357_hp", "in", 1)
end

function monach_pda_have(task, info)
    if (db.actor:has_info("monach_flame1_dead") and db.actor:has_info("monach_flame2_dead")
    and db.actor:has_info("monach_flame3_dead") and db.actor:has_info("monach_flame4_dead")
    and db.actor:has_info("monach_tele1_dead") and db.actor:has_info("monach_tele2_dead")
    and db.actor:has_info("monach_tele3_dead") and db.actor:has_info("monach_tele4_dead")) then
        return db.actor:give_info_portion("monach_pda_have")
    end
    return false
end

function barman_work_est()
    return count_item("pda_priz", 1)
end

function barman_work_done(first_speaker, second_speaker)
    local count = math.random(3, 4)
    item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
    dialogs.relocate_item_section(first_speaker, item, "in", count)
    dialogs.relocate_item_section(first_speaker, "pda_priz", "out", 1)
end

function black_box_have()
    return count_item("box_black", 1)
end

function black_box_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "box_black", "out", 1)
end

function five_sweets_have()
    return count_item("sweets", 1)
end

function five_sweets_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "sweets", "out", 1)
end
