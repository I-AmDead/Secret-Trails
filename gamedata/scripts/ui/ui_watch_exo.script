function attach(sm)
    sm:subscribe({ signal = "on_spawn",    fun = this.on_spawn	  })
    --sm:subscribe({ signal = "on_key_down", fun = this.on_key_down })
end

local GUI

local watch_mode = "actor_hud"
local minimap_static, back_static, frame_static, compass_static
watch_ui_show = ogse.load_var("watch_ui_show", true)

local delay = 0

function on_spawn()
    local wnd = get_main_window()

    -- log1("init_hand_minimap")

    minimap_static = wnd:GetStatic("minimap")
    back_static = wnd:GetStatic("minimap:background")
    frame_static = wnd:GetStatic("minimap:level_frame")
    compass_static = wnd:GetStatic("minimap:compass")

    frame_static:Show(false)
    minimap_static:Show(false)
    compass_static:Show(false)
    back_static:Show(false)
end

function on_key_down(key, bind)
    if bind == key_bindings.kBIOMAP_SWITCH then
        if watch_mode == "actor_hud" then
            watch_mode = "weapon_hud"
        else
            watch_mode = "map_hud"
        end
        ogse.save_var("watch_mode", watch_mode)
        log3("watch mode %s", watch_mode)
    end
end

function ui_show(show)
	watch_ui_show = show
	ogse.save_var("watch_ui_show", watch_ui_show)	
end

function get_instance()
    if (not GUI) then
        GUI = UIWatch()
    end

    return GUI
end

function c2t(ct)
    if not ct then
        return nil
    end
    local Y, M, D, h, m, s, ms = 0, 0, 0, 0, 0, 0, 0
    Y, M, D, h, m, s, ms = ct:get(Y, M, D, h, m, s, ms)
    return {
        Y = Y,
        M = M,
        D = D,
        h = h,
        m = m,
        s = s,
        ms = ms
    }
end

-- Радиация
function radiation_level()
    local radiation = has_alife_info("pre_blowout") and math.random(0, 400) or arc_radiation.get_radiation_dose()
    if radiation > 100 and radiation < 150 then
        return "green"
    elseif radiation > 150 and radiation < 250 then
        return "yellow"
    elseif radiation > 250 and radiation < 300 then
        return "orange"
    elseif radiation > 300 then
        return "red"
    end
    return "nil"
end

-- Кровотечения
function bleeding_level()
    local bleeding = has_alife_info("pre_blowout") and math.random(0, 100) * 0.01 or db.actor:get_bleeding()
    if bleeding > 0.01 and bleeding < 0.25 then
        return "green"
    elseif bleeding > 0.25 and bleeding < 0.5 then
        return "yellow"
    elseif bleeding > 0.5 and bleeding < 0.75 then
        return "orange"
    elseif bleeding > 0.75 then
        return "red"
    end
    return "nil"
end

-- Пси
function psy_level()
    local psy_health = has_alife_info("pre_blowout") and math.random(0, 100) * 0.01 or db.actor.psy_health
    if psy_health < 0.9 and psy_health >= 0.7 then
        return "green"
    elseif psy_health < 0.7 and psy_health >= 0.5 then
        return "yellow"
    elseif psy_health < 0.5 and psy_health >= 0.3 then
        return "orange"
    elseif psy_health < 0.3 then
        return "red"
    end
    return "nil"
end

-- Голод
function hunger_level()
    local satiety = has_alife_info("pre_blowout") and math.random(0, 100) * 0.01 or db.actor.satiety
    if satiety < 0.9 and satiety >= 0.7 then
        return "green"
    elseif satiety < 0.7 and satiety >= 0.5 then
        return "yellow"
    elseif satiety < 0.5 and satiety >= 0.3 then
        return "orange"
    elseif satiety < 0.3 then
        return "red"
    end
    return "nil"
end

-- Перевес
function overweight_level()
    local inv_weight = has_alife_info("pre_blowout") and math.random(99, db.actor:get_max_weight()) or db.actor:get_inventory_weight()
    local max_weight = db.actor:get_max_weight()
    local max_walk_weight = db.actor:get_max_walk_weight()
    local yellow_over = max_weight + (max_walk_weight - max_weight) * 0.6
    local orange_over = max_weight + (max_walk_weight - max_weight) * 0.8

    if (inv_weight >= max_walk_weight) then
        return "red"
    elseif (inv_weight >= orange_over and inv_weight <= max_walk_weight) then
        return "orange"
    elseif (inv_weight >= yellow_over and inv_weight <= orange_over) then
        return "yellow"
    elseif (inv_weight >= max_weight and inv_weight <= yellow_over) then
        return "green"
    end
    return "nil"
end

class "UIWatch"(CUIScriptWnd)

function UIWatch:__init()
    super()
    self:Show(true)
    self:Enable(true)
    self:SetAutoDelete(true)

    local xml = CScriptXmlInit()
    self.xml = xml

    xml:ParseFile("script_wnd\\ui_watch_exo.xml")
    xml:InitWindow("display", 0, self)

    self.clock = {}
    self.clock.h = {}
    self.clock.m = {}
    self.clock_colon = xml:InitStatic("display:colon", self)

    self.rad = {}
    self.rad.level = {}

    for i = 1, 2 do
        self.clock.h[i] = xml:InitStatic("display:clock_h_" .. i, self)
        self.clock.m[i] = xml:InitStatic("display:clock_m_" .. i, self)
    end

    for i = 1, 4 do
        self.rad.level[i] = xml:InitStatic("display:rad_level_" .. i, self)
    end

    self.health_static = xml:InitStatic("display:static_health", self)
    self.health_progress = xml:InitStatic("display:health_progress", self)

    self.indik_blood = xml:InitStatic("display:indik_blood", self)
    self.indik_hunger = xml:InitStatic("display:indik_hunger", self)
    self.indik_radiation = xml:InitStatic("display:indik_radiation", self)
    self.indik_psy = xml:InitStatic("display:indik_psy", self)
    self.indik_overweight = xml:InitStatic("display:indik_overweight", self)

    self.indicator_booster_psy = xml:InitStatic("display:indicator_booster_psy", self)
    self.indicator_booster_rad = xml:InitStatic("display:indicator_booster_rad", self)
    self.indicator_booster_health = xml:InitStatic("display:indicator_booster_health", self)
    self.indicator_booster_power = xml:InitStatic("display:indicator_booster_power", self)
    self.indicator_booster_rad_cleanup = xml:InitStatic("display:indicator_booster_rad_cleanup", self)
    self.indicator_booster_psy_cleanup = xml:InitStatic("display:indicator_booster_psy_cleanup", self)
    self.indicator_booster_wound = xml:InitStatic("display:indicator_booster_wound", self)
    self.indicator_booster_weight = xml:InitStatic("display:indicator_booster_weight", self)
end

function UIWatch:__finalize()
    GUI = nil
end

function UIWatch:Update()
    if has_alife_info("pre_blowout") and time_global() < delay then return end
    delay = time_global() + 120
    CUIScriptWnd.Update(self)
    self:ShowClock(false)
    self:ShowRad(false)
    self:ShowHealth(false)
    self:ShowBoosterIndicators(false)
    self:ShowIndicators(false)
    if watch_ui_show then
    	self:UpdateTopPanel()
    end
end

function UIWatch:UpdateTopPanel()
    self:UpdateClock()
    self:UpdateRad()
    self:UpdateHealth()
    self:UpdateIndicators()
    self:UpdateBoosterIndicators()
end

function UIWatch:UpdateClock()
    self:ShowClock(true)

    local game_time = c2t(game.get_game_time())
    local time = {
        h = string.format("%02d", has_alife_info("pre_blowout") and tostring(math.random(0, 23)) or tostring(game_time.h)),
        m = string.format("%02d", has_alife_info("pre_blowout") and tostring(math.random(0, 59)) or tostring(game_time.m))
    }

    for k, v in pairs(time) do
        local i = 1
        v:gsub(".", function(c)
            self.clock[k][i]:InitTextureEx("watch_exo_" .. c .. "_big", "hud\\p3d")
            i = i + 1
        end)
    end
end

function UIWatch:UpdateRad()
    self:ShowRad(true)

    local rad_level = arc_radiation.get_radiation_dose() or 0000
    local rad = {
        level = string.format("%04d", has_alife_info("pre_blowout") and tostring(math.random(0, 9999)) or tostring(rad_level))
    }

    for k, v in pairs(rad) do
        local i = 1
        v:gsub(".", function(c)
            self.rad[k][i]:InitTextureEx("watch_exo_" .. c, "hud\\p3d")
            i = i + 1
        end)
    end
end

function UIWatch:UpdateHealth()
    self:ShowHealth(true)

    local cond = db.actor.health
    if has_alife_info("pre_blowout") then
        self.health_progress:SetWndRect(-0.0005, 0.0221, 0.0330 * math.random(10, 100) * 0.01, 0.0036)
    else
        self.health_progress:SetWndRect(-0.0005, 0.0221, 0.0330 * cond, 0.0036)
    end
end

function UIWatch:ShowClock(vis)
    for i = 1, 2 do
        self.clock.h[i]:Show(vis)
        self.clock.m[i]:Show(vis)
    end

    self.clock_colon:Show(vis)
end

function UIWatch:ShowRad(vis)
    for i = 1, 4 do
        self.rad.level[i]:Show(vis)
    end
end

function UIWatch:ShowHealth(vis)
    self.health_static:Show(vis)
    self.health_progress:Show(vis)
end

function UIWatch:ShowBoosterIndicators(vis)
    self.indicator_booster_psy:Show(vis)
    self.indicator_booster_rad:Show(vis)
    self.indicator_booster_health:Show(vis)
    self.indicator_booster_power:Show(vis)
    self.indicator_booster_rad_cleanup:Show(vis)
    self.indicator_booster_psy_cleanup:Show(vis)
    self.indicator_booster_wound:Show(vis)
    self.indicator_booster_weight:Show(vis)
end

function UIWatch:ShowIndicators(vis)
    self.indik_blood:Show(vis)
    self.indik_hunger:Show(vis)
    self.indik_radiation:Show(vis)
    self.indik_psy:Show(vis)
    self.indik_overweight:Show(vis)
end

function UIWatch:UpdateIndicators()
    if not db.actor:alive() then
        return
    end

    local bleeding = bleeding_level()
    local hunger = hunger_level()
    local radiation = radiation_level()
    local psy = psy_level()
    local overweight = overweight_level()

    if bleeding ~= "nil" then
        self.indik_blood:Show(true)
        self.indik_blood:InitTextureEx("ui\\watch_ui\\indik_blood_" .. bleeding, "hud\\p3d")
    else
        self.indik_blood:Show(false)
    end

    if hunger ~= "nil" then
        self.indik_hunger:Show(true)
        self.indik_hunger:InitTextureEx("ui\\watch_ui\\indik_satiety_" .. hunger, "hud\\p3d")
    else
        self.indik_hunger:Show(false)
    end

    if radiation ~= "nil" then
        self.indik_radiation:Show(true)
        self.indik_radiation:InitTextureEx("ui\\watch_ui\\indik_rad_" .. radiation, "hud\\p3d")
    else
        self.indik_radiation:Show(false)
    end

    if psy ~= "nil" then
        self.indik_psy:Show(true)
        self.indik_psy:InitTextureEx("ui\\watch_ui\\indik_psy_" .. psy, "hud\\p3d")
    else
        self.indik_psy:Show(false)
    end

    if overweight ~= "nil" then
        self.indik_overweight:Show(true)
        self.indik_overweight:InitTextureEx("ui\\watch_ui\\indik_weight_" .. overweight, "hud\\p3d")
    else
        self.indik_overweight:Show(false)
    end
end

function UIWatch:UpdateBoosterIndicators()
    if not db.actor:alive() then
        return
    end

    if has_alife_info("pre_blowout") then
        self.indicator_booster_psy:Show(math.random(0, 100) > 50 and true or false)
        self.indicator_booster_rad:Show(math.random(0, 100) > 50 and true or false)
        self.indicator_booster_health:Show(math.random(0, 100) > 50 and true or false)
        self.indicator_booster_power:Show(math.random(0, 100) > 50 and true or false)
        self.indicator_booster_rad_cleanup:Show(math.random(0, 100) > 50 and true or false)
        self.indicator_booster_psy_cleanup:Show(math.random(0, 100) > 50 and true or false)
        self.indicator_booster_wound:Show(math.random(0, 100) > 50 and true or false)
        self.indicator_booster_weight:Show(math.random(0, 100) > 50 and true or false)
    else
        for idx = 1, 8 do
            if laucer_item_special_effect["booster_type" .. idx] then
                self[laucer_item_special_effect["booster_type" .. idx]]:Show(laucer_item_special_effect["booster_state" .. idx])
            end
        end
    end
end