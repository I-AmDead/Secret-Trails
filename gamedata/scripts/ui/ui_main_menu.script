-- File:        UI_MAIN_MENU.SCRIPT
-- Description: Load Dialog for STALKER
-- Created:     28.10.2004
-- Lasd edit:	18.01.2006
-- Copyright:   2004 GSC Game World
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:     0.9

class "main_menu" (CUIScriptWnd)

function main_menu:__init() super()
	self.mbox_mode = 0
   self:InitControls()
   self:InitCallBacks()
   mm = _G.main_menu.get_main_menu()
end

function main_menu:__finalize()

end

function main_menu:InitControls()
	self:Init(0,0,1024,768)			  
    local xml = CScriptXmlInit()
    xml:ParseFile("ui_mm_main.xml")
    xml:InitStatic("background", self)
	xml:InitStatic("secret_trails_shadow_img", self)
	xml:InitStatic("secret_trails_logo_img", self)
    xml:InitStatic("fire_movie", self)   
    self.shniaga = xml:InitMMShniaga("shniaga_wnd",self)
	
	self:Register(xml:Init3tButton("new_game", self),"new_game")
	self:Register(xml:Init3tButton("load_game", self),"load_game")
	if level.present() and (db.actor ~= nil) and db.actor:alive() then
	self:Register(xml:Init3tButton("save_game", self),"save_game")
	end
	self:Register(xml:Init3tButton("options_game", self),"options_game")
	self:Register(xml:Init3tButton("quit_game", self),"quit_game")
	
	
	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box, "msg_box")	
	
	local ver = xml:InitStatic		("static_version",self)
	local mm						= _G.main_menu.get_main_menu()

	local TT2_version    	= "Secret Trails on OGSR Engine Patch 08.04.2021"

	ver:SetText(TT2_version)
	ver:SetTextColor(255, 255, 0, 0)
  cmd("time_factor 1")
end

function main_menu:Show(...)
	self.shniaga:SetVisibleMagnifier(...)
end


function main_menu:InitCallBacks()
		
	self:AddCallback("new_game",		    ui_events.BUTTON_CLICKED,	            self.OnButton_start_new_game,	    	self)
	self:AddCallback("load_game",		    ui_events.BUTTON_CLICKED,	            self.OnButton_load_clicked,	    self)
	self:AddCallback("save_game",		    ui_events.BUTTON_CLICKED,	            self.OnButton_save_clicked,	    self)
	self:AddCallback("options_game",		ui_events.BUTTON_CLICKED,	            self.OnButton_options_clicked,	    self)
	self:AddCallback("quit_game",		    ui_events.BUTTON_CLICKED,	            self.OnButton_quit_clicked,	    self)
	
	
	self:AddCallback("btn_quit_to_mm",	ui_events.BUTTON_CLICKED,				self.OnButton_disconnect_clicked,	self)
	self:AddCallback("btn_ret",			ui_events.BUTTON_CLICKED,				self.OnButton_return_game,			self)
	self:AddCallback("btn_lastsave",	ui_events.BUTTON_CLICKED,				self.OnButton_last_save,			self)
	self:AddCallback("btn_credits",		ui_events.BUTTON_CLICKED,				self.OnButton_credits_clicked,		self)
	-- message box																										
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_OK_CLICKED,		self.OnMsgOk,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_CANCEL_CLICKED,	self.OnMsgCancel,					self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgYes,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_NO_CLICKED,		self.OnMsgNo,						self)
	self:AddCallback("msg_box",			ui_events.MESSAGE_BOX_QUIT_GAME_CLICKED,self.OnMessageQuitGame,				self)
	self:AddCallback("msg_box",			ui_events.MESSAGE_BOX_QUIT_WIN_CLICKED,	self.OnMessageQuitWin,				self)
end

function main_menu:OnMsgOk()
	self.mbox_mode = 0

end

function main_menu:OnMsgCancel()
	self.mbox_mode = 0

end

function main_menu:LoadLastSave()
	cmd("load_last_save")
	self:close_and_delete_menu()
end

function main_menu:OnMsgYes()
	if self.mbox_mode == 1 then
		self:LoadLastSave()	
	end

	if 	self.mbox_mode == 2 then
		self:OnButton_new_veteran_game()
	end	
	

	self.mbox_mode = 0

end

function main_menu:OnMsgNo()
	self.mbox_mode = 0

end

function main_menu:OnButton_last_save()
	if not level.present() or not ( db.actor_proxy.online and db.actor:alive() ) then
		self:LoadLastSave()
		return
	end

	self.mbox_mode = 1
	self.message_box:Init("message_box_confirm_load_save")
	self:GetHolder():start_stop_menu(self.message_box, true)

end

function main_menu:OnButton_credits_clicked()
	game.start_tutorial("credits_seq")
end

function main_menu:OnButton_quit_clicked()
	self.message_box:Init("message_box_quit_windows")
	self:GetHolder():start_stop_menu(self.message_box, true)

end

function main_menu:OnButton_disconnect_clicked()
	self.message_box:Init("message_box_quit_game")
	self.message_box:SetText("ui_mm_quit_game_message")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnMessageQuitGame()
	local console = get_console()
	console:execute("disconnect")
end

function main_menu:OnMessageQuitWin()
	local console = get_console()
	console:execute("quit")
end

function main_menu:OnButton_return_game()
	local console = get_console()
	console:execute("main_menu off")
end

function main_menu:OnButton_new_novice_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_novice")
	self:StartGame()	
end

function main_menu:OnButton_new_stalker_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_stalker")
	self:StartGame()
end

function main_menu:OnButton_new_veteran_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_veteran")
	console:execute("g_music_tracks 1")
	console:execute("g_ammunition_on_belt 0")
	self:StartGame()
end

function main_menu:OnButton_new_master_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_master")	
	self:StartGame()
end

function main_menu:OnButton_start_new_game()
	self.mbox_mode			= 2	
	self.message_box:Init	("message_box_start_game")
	self:GetHolder():start_stop_menu(self.message_box, true)

end

function main_menu:StartGame()
	if alife() then
		cmd("disconnect")	
	end
	cmd("start server(all/single/alife/new)")
	self:close_and_delete_menu()
end

function main_menu:OnButton_load_spawn()
	if not self.spawn_dlg then
		self.spawn_dlg = ui_si.spawn_item_dialog()
		self.spawn_dlg.owner = self
	end
	self:GetHolder():start_stop_menu(self.spawn_dlg, true)
	self:Show(false)
end

function check_game()
	return level.present() and db.actor and db.actor:alive()
end

function main_menu:OnButton_save_clicked()
	if not self.save_dlg then
		self.save_dlg = ui_mm_save_load_dialog.save_load_dialog( true )
		self.save_dlg.owner = self
	end
	--
	ui_mm_save_load_dialog.fill_savedgames_list(self.save_dlg)
	--
	self:GetHolder():start_stop_menu(self.save_dlg, true)
	self:Show(false)

end
function main_menu:OnButton_options_clicked()
	if not self.opt_dlg then
		self.opt_dlg = ui_mm_opt_main.options_dialog()
		self.opt_dlg.owner = self
	end

	self:GetHolder():start_stop_menu(self.opt_dlg, true)
	self:Show(false)

end

function main_menu:OnButton_load_clicked()
	if not self.load_dlg then
		self.load_dlg = ui_mm_save_load_dialog.save_load_dialog()
		self.load_dlg.owner = self
	end
	--
	ui_mm_save_load_dialog.fill_savedgames_list(self.load_dlg)
	--
	self:GetHolder():start_stop_menu(self.load_dlg, true)
	self:Show(false)

end

function main_menu:OnKeyboard(dik, keyboard_action)  --virtual function
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	local bind = dik_to_bind(dik)
	local console = get_console()

	if self.start_btn and dik ~= DIK_keys.DIK_GRAVE then
		self.OnButton_return_game()
		return true
	end

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik_to_bind(dik) == key_bindings.kQUIT then
			if level.present() and db.actor and db.actor:alive() then
				self:close_and_delete_menu()
			end
		end

		if dik == DIK_keys.DIK_Q then
			self:OnMessageQuitWin()
		end
	
	end
   
	return true
end


--Для закрытия меню использовать только этот специальный метод!
function main_menu:close_and_delete_menu()
	-- Удаляем в движке каллбеки, в которых хранятся ссылки на объекты оконных классов (которые добавляются в AddCallback(..., self),
	-- иначе части меню не удалятся и будут висеть в памяти до перезапуска LUA (до загрузки сейва, например)
	-- Так же, надо обнулить висячие ссылки (self.*_dlg), иначе сборщик мусора эти объекты не удалит. Да, это странно, но это так.
	if self.save_dlg then self.save_dlg:ClearCallbacks() self.save_dlg = nil end
	if self.load_dlg then self.load_dlg:ClearCallbacks() self.load_dlg = nil end
	if self.opt_dlg then
		if self.opt_dlg.dlg_video_adv then self.opt_dlg.dlg_video_adv = nil end
		self.opt_dlg:ClearCallbacks() self.opt_dlg = nil
	end
	if self.spawn_dlg then self.spawn_dlg:ClearCallbacks() self.spawn_dlg = nil end
	self:ClearCallbacks() --main_menu СѓРґР°Р»СЏРµС‚СЃСЏ РґРІРёР¶РєРѕРј, РЅРѕ РґР»СЏ РЅР°РґС‘Р¶РЅРѕСЃС‚Рё Рё РµРјСѓ РєР°Р»Р»Р±РµРєРё СѓРґР°Р»РёРј.
	--
	cmd("main_menu off")

end

local timer = 0
function f1() return timer<time_global() end

function f2()
	set_inactivate_input_time(5)
	get_console():execute("main_menu 1")
	timer = time_global() + 200
	level.add_call(f1,f3)
end

function f3()
	local console = get_console()
	console:hide()
	press_any_key_on_start = true
	level.show_indicators()
	console:execute("snd_volume_eff " .. sound_volume_eff) 
	console:execute("snd_volume_music " .. sound_volume_music)
	sound_volume_eff,sound_volume_music = nil,nil
end

function start()
	if has_alife_info("storyline_actor_start") then
		timer = time_global() + 500
		level.add_call(f1,f2)
	else
		press_any_key_on_start = true
	end
end