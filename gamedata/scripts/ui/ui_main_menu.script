-- Главное меню для OGSR.
-- KRodin (c) 2018
-- Исправил утечки памяти из-за неудаления частей меню после его закрытия (см. main_menu:close_and_delete_menu())

class "main_menu" (CUIScriptWnd)
function main_menu:__init() super()
	self.mbox_mode = 0
	self:InitControls()
	self:InitCallBacks()
	mm = _G.main_menu.get_main_menu()
end

function main_menu:__finalize()
	--log1("--main_menu:__finalize() called!")
end

function main_menu:InitControls()
	self:Init(0, 0, 1024, 768)			  
	self.xml = CScriptXmlInit()
	self.xml:ParseFile("ui_mm_main.xml")
	self.xml:InitStatic("background", self)
	self.xml:InitStatic("secret_trails_shadow_img", self)
	self.xml:InitStatic("secret_trails_logo_img", self)
	self.shniaga = self.xml:InitMMShniaga("shniaga_wnd",self)
	
	self:Register(self.xml:Init3tButton("new_game", self),"new_game")
	self:Register(self.xml:Init3tButton("load_game", self),"load_game")
	if level.present() and db.actor and db.actor:alive() then
	self:Register(self.xml:Init3tButton("save_game", self),"save_game")
	end
	self:Register(self.xml:Init3tButton("options_game", self),"options_game")
	self:Register(self.xml:Init3tButton("quit_game", self),"quit_game")
	
	
	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box, "msg_box")	
	
	local ver = self.xml:InitStatic("static_version", self)
	ver:SetText("Engine version: " .. _G.main_menu.get_main_menu():GetGSVer())
	ver:SetTextColor(255, 255, 0, 0)
end

function main_menu:Show(...)
	self.shniaga:SetVisibleMagnifier(...)
end


function main_menu:InitCallBacks()
	-- new game
	self:Connect("new_game", ui_events.BUTTON_CLICKED, self.StartGame, self, "gd_veteran")
	-- options																											
	self:AddCallback("options_game", ui_events.BUTTON_CLICKED, self.OnButton_options_clicked, self)
	-- load																												
	self:AddCallback("load_game", ui_events.BUTTON_CLICKED, self.OnButton_load_clicked, self)
	-- save																												
	self:AddCallback("save_game", ui_events.BUTTON_CLICKED, self.OnButton_save_clicked, self)
	-- quit																												
	self:AddCallback("quit_game", ui_events.BUTTON_CLICKED, self.OnButton_quit_clicked, self)
	
	
	self:AddCallback("btn_quit_to_mm",	ui_events.BUTTON_CLICKED,				self.OnButton_disconnect_clicked,	self)
	self:AddCallback("btn_lastsave",	ui_events.BUTTON_CLICKED,				self.OnButton_last_save,			self)
	self:AddCallback("btn_credits",		ui_events.BUTTON_CLICKED,				self.OnButton_credits_clicked,		self)
	-- message box																										
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_OK_CLICKED,		self.OnMsgOk,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_CANCEL_CLICKED,	self.OnMsgCancel,					self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgYes,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_NO_CLICKED,		self.OnMsgNo,						self)
	self:Connect("msg_box", ui_events.MESSAGE_BOX_QUIT_GAME_CLICKED, cmd, "disconnect")
	self:Connect("msg_box", ui_events.MESSAGE_BOX_QUIT_WIN_CLICKED,  cmd, "quit")
	self:AddCallback("btn_ret", ui_events.BUTTON_CLICKED, self.close_and_delete_menu, self)
end

function main_menu:OnMsgOk()
	self.mbox_mode = 0
	mm:PlaySound("mod\\mainmenu_button_sound")
end

function main_menu:OnMsgCancel()
	self.mbox_mode = 0
	mm:PlaySound("mod\\mainmenu_button_cancel_sound")
end

function main_menu:LoadLastSave()
	cmd("load_last_save")
	self:close_and_delete_menu()
end

function main_menu:OnMsgYes()
	if self.mbox_mode == 1 then
		self:LoadLastSave()	
	end

	self.mbox_mode = 0
	mm:PlaySound("mod\\mainmenu_button_sound")
end

function main_menu:OnMsgNo()
	self.mbox_mode = 0
	mm:PlaySound("mod\\mainmenu_button_cancel_sound")
end


function main_menu:OnButton_last_save()
	if not level.present() or not ( db.actor_proxy.online and db.actor:alive() ) then
		self:LoadLastSave()
		return
	end

	self.mbox_mode = 1
	self.message_box:Init("message_box_confirm_load_save")
	self:GetHolder():start_stop_menu(self.message_box, true)
	mm:PlaySound("mod\\mainmenu_button_sound")
end

function main_menu:OnButton_credits_clicked()
	game.start_tutorial("credits_seq")
end

function main_menu:OnButton_quit_clicked()
	self.message_box:Init("message_box_quit_windows")
	self:GetHolder():start_stop_menu(self.message_box, true)
	mm:PlaySound("mod\\mainmenu_button_sound")
end

function main_menu:OnButton_disconnect_clicked()
	self.message_box:Init("message_box_quit_game")
	self.message_box:SetText("ui_mm_quit_game_message")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:StartGame( difficulty )
	cmd("g_game_difficulty "..difficulty)
	if alife() then
		cmd("disconnect")	
	end
	cmd("start server(all/single/alife/new)")
	self:close_and_delete_menu()
end

function main_menu:OnButton_save_clicked()
	if not self.save_dlg then
		self.save_dlg = ui_mm_save_load_dialog.save_load_dialog( true )
		self.save_dlg.owner = self
	end
	--
	ui_mm_save_load_dialog.fill_savedgames_list(self.save_dlg)
	--
	self:GetHolder():start_stop_menu(self.save_dlg, true)
	self:Show(false)
	mm:PlaySound("mod\\mainmenu_button_sound")
end

function main_menu:OnButton_load_clicked()
	if not self.load_dlg then
		self.load_dlg = ui_mm_save_load_dialog.save_load_dialog()
		self.load_dlg.owner = self
	end
	--
	ui_mm_save_load_dialog.fill_savedgames_list(self.load_dlg)
	--
	self:GetHolder():start_stop_menu(self.load_dlg, true)
	self:Show(false)
	mm:PlaySound("mod\\mainmenu_button_sound")
end

function main_menu:OnButton_options_clicked()
	if not self.opt_dlg then
		self.opt_dlg = ui_mm_opt_main.options_dialog()
		self.opt_dlg.owner = self
	end

	self:GetHolder():start_stop_menu(self.opt_dlg, true)
	self:Show(false)
	mm:PlaySound("mod\\mainmenu_button_sound")
end

function main_menu:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik_to_bind(dik) == key_bindings.kQUIT then
			if ogse.check_game() then
				self:close_and_delete_menu()
			end
		elseif dik == DIK_keys.DIK_N then --personal_test
			xpcall(function() dofile(getFS():update_path("$game_scripts$", "personal_test.lua")) end, log1)
		elseif dik == DIK_keys.DIK_F3 then --Показать текущие координаты
			if ogse.check_game() then
				utils2.show_coordinates()
			end
		elseif dik == DIK_keys.DIK_P then --SDATA
			if ogse.check_game() then
			if not _sdata.GlobalEnable then
				_sdata.subscribe()
			else
				_sdata.unsubscribe()
			end
			end
		elseif dik == DIK_keys.DIK_F1 then
			if ogse.check_game() and ui_cheat_main then
				ui_cheat_main.start_menu(self)
			end
		end
	end
   
	return true
end


--Для закрытия меню использовать только этот специальный метод!
function main_menu:close_and_delete_menu()
	-- Удаляем в движке каллбеки, в которых хранятся ссылки на объекты оконных классов (которые добавляются в AddCallback(..., self),
	-- иначе части меню не удалятся и будут висеть в памяти до перезапуска LUA (до загрузки сейва, например)
	-- Так же, надо обнулить висячие ссылки (self.*_dlg), иначе сборщик мусора эти объекты не удалит. Да, это странно, но это так.
	if self.save_dlg then self.save_dlg:ClearCallbacks() self.save_dlg = nil end
	if self.load_dlg then self.load_dlg:ClearCallbacks() self.load_dlg = nil end
	if self.opt_dlg then
		if self.opt_dlg.dlg_video_adv then self.opt_dlg.dlg_video_adv = nil end
		self.opt_dlg:ClearCallbacks() self.opt_dlg = nil
	end
	if self.spawn_dlg then self.spawn_dlg:ClearCallbacks() self.spawn_dlg = nil end
	self:ClearCallbacks() --main_menu удаляется движком, но для надёжности и ему каллбеки удалим.
	--
	cmd("main_menu off")
	mm:PlaySound("mod\\mainmenu_button_sound")
end