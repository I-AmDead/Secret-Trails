-- ���� ����������� �������� ��� OGSR Engine
-- ��������� ���� KRodin (c) 2019
local control_init_funs = {
    ["track"] = function(xml, parent, control_params)
        local ctr = xml:InitTrackBar("option_adv:track_item", parent)
        if control_params then
            if control_params.invert then
                ctr:SetInvert(true)
            end
            if control_params.is_token then
                ctr:SetToken(true)
            end
            if control_params.is_bool then
                ctr:SetBool(true)
            end
            if control_params.is_integer then
                ctr:SetFloat(false)
            end
            if control_params.step then
                ctr:SetStep(control_params.step)
            end
            if control_params.min then
                ctr:SetMin(control_params.min)
            end
            if control_params.max then
                ctr:SetMax(control_params.max)
            end
            if control_params.smooth ~= nil then
                ctr:SetSmooth(control_params.smooth)
            end
        end
        return ctr
    end,
    ["list"] = function(xml, parent, control_params)
        local ctr = xml:InitComboBox("option_adv:list_item", parent)
        if control_params then
            if control_params.always_show_scroll then
                ctr:SetAlwaysShowScroll(true)
            end
            if control_params.list_length then
                ctr:SetListLength(control_params.list_length)
            end
        end
        return ctr
    end,
    ["check"] = function(xml, parent, control_params)
        local ctr = xml:InitCheck("option_adv:check_item", parent)
        return ctr
    end
}

function script_get_value(ctrl)
    return ctrl.GetCheck and ctrl:GetCheck() or ctrl:GetTrackValue() == 1
end

function script_set_value(ctrl, v)
    if ctrl.SetCheck then
        ctrl:SetCheck(v)
    else
        ctrl:SetTrackValue(v and 1 or 0)
    end
end

class "opt_adv"(CUIWindow)
function opt_adv:__init(options, live_mode)
    super()
    self.options = options
    self.live_mode = live_mode
    self.script_ctrs = {}
end

function opt_adv:__finalize()
    -- log1("--opt_adv:__finalize() called!")
end

function opt_adv:script_load()
    for _, v in ipairs(self.script_ctrs) do
        script_set_value(v.control, game_options[v.option])
    end
end

function opt_adv:script_save()
    for _, v in ipairs(self.script_ctrs) do
        game_options[v.option] = script_get_value(v.control)
    end
end

local dbg_tooltip = true

function opt_adv:InitControls(xml, handler)
    -- xml:InitFrame("frame", self)
    self.scroll_v = xml:InitScrollView("option_adv:scroll_v", self)

    -- ���������� � �����, ��������� � ���������� scroll view � xml ����� �������� flip_vert="1",
    -- ������� ����������� ������� ���������, ��� � ���� ������� ������� ��� ����, ����� ��������� ������ ��������
    -- ����������� ����������, ��� � ���� ������� ��������� �������������� ������� ����������� ��������, ������������� ���� �� ������
    for i = #self.options, 1, -1 do
        local opt, group, ctr_type, desc, control_params = unpack(self.options[i])
        local label, color, hint_caption, hint_string = unpack(desc)

        control_params = control_params or {}

        local index = control_params.index
        local opt_key = opt .. (index or "")

        local enabled = true -- not cond or cond()

        if self.live_mode and control_params.depend then
            enabled = false
        end

        if enabled then
            local item = xml:InitStatic("option_adv:templ_item", self.scroll_v)

            if not hint_caption or #hint_caption == 0 then
                hint_caption = label
            end

            if ctr_type == "separator" then
                local caption = xml:InitStatic("option_adv:sep_item", item)
                caption:SetTextST(label)
                if color then
                    caption:SetTextColor(unpack(color))
                end
            elseif control_init_funs[ctr_type] then
                local caption = xml:InitStatic("option_adv:cap_item_back", item)
                caption = xml:InitStatic("option_adv:cap_key_back", item)
                caption = xml:InitStatic("option_adv:cap_item", item)
                caption:SetText(game.translate_string(label) .. (control_params.depend and "*" or ""))
                if dbg_tooltip then
                    caption:SetHint(opt .. (index and ":" .. index or ""))
                end
                if color then
                    caption:SetTextColor(unpack(color))
                end
                handler:Register(caption, "option_adv_cap_" .. opt_key)
                handler:AddCallback("option_adv_cap_" .. opt_key, ui_events.STATIC_FOCUS_LOST, function() handler:HintRefresh() end)
                handler:AddCallback("option_adv_cap_" .. opt_key, ui_events.STATIC_FOCUS_RECEIVED, function()
                    if (hint_caption and #hint_caption > 0) or (hint_string and #hint_string > 0) then
                        local settings_name = hint_caption and game.translate_string(hint_caption) or ""
                        local settings_description = hint_string and game.translate_string(hint_string) or ""
                        handler.hint_name:SetText(settings_name .. "\\n" .. settings_description)
                        handler.hint_name:AdjustHeightToText()
                        handler.hint_frame:Show(true)
                        handler.hint_frame:SetWndSize(handler.hint_name:GetWidth() + 10, handler.hint_name:GetHeight() + 10)
                        local cr = handler:GetMousePosX()
                        if cr >= 512 then
                            cr = cr - handler.hint_frame:GetWidth()
                        else
                            cr = cr + 40
                        end
                        handler.hint_frame:SetWndPos(cr, math.min(handler:GetMousePosY(),
                            768 - handler.hint_frame:GetHeight()))
                    else
                        handler:HintRefresh()
                    end
                end)

                local need_restart = control_params.depend and control_params.depend == "restart"
                local ctl = control_init_funs[ctr_type](xml, item, control_params)

                handler:Register(ctl, "option_adv:" .. ctr_type .. "_" .. opt_key)

                if group == "script" then
                    table.insert(self.script_ctrs, {
                        ["control"] = ctl,
                        ["option"] = opt
                    })

                    if ctr_type == "track" then
                        ctl:SetStep(1)
                        ctl:SetMin(0)
                        ctl:SetMax(1)
                    end

                    handler:AddCallback("option_adv:" .. ctr_type .. "_" .. opt_key,
                        ctr_type == "list" and ui_events.LIST_ITEM_SELECT or ui_events.BUTTON_CLICKED, function()
                            script_get_value(ctl)
                        end)
                else
                    ctl:OptionItemRegister(opt, group)

                    if control_params.index then
                        ctl:OptionItemIndex(control_params.index)
                    end
                    if control_params.depend and not need_restart then
                        ctl:OptionItemDepends(control_params.depend)
                    end
                end

                if control_params.id then
                    handler:Register(ctl, control_params.id)
                end

                if need_restart == 1 then
                    handler:AddCallback("option_adv:" .. ctr_type .. "_" .. opt_key,
                        ctr_type == "list" and ui_events.LIST_ITEM_SELECT or ui_events.BUTTON_CLICKED,
                        handler.show_need_restart_wnd, handler)
                end
            end
        end
    end
end
