

local kScreen = math.min((1024 / 768) / (device().width / device().height), 1)
local cell_size = 25		-- размер иконки в описании свойств предмета
local vert_interval = 1		-- параметр vert_interval в скролле

local shift_show_descr = 700  -- через какое время после наведения курсора будет показано окно, ms


local is_grenade={
	[clsid.wpn_grenade_f1]		= true,
	[clsid.wpn_grenade_fake]	= true,
	[clsid.wpn_grenade_rgd5]	= true,
	[clsid.wpn_grenade_rpg7]	= true,
	[clsid.wpn_ammo_m209]		= true,
	[clsid.wpn_ammo_vog25]		= true,
	[clsid.wpn_ammo_og7b]		= true
}

-- Пушки, для которых дополнительное описание не пишем
local forbidden_wpns = {
	['wpn_binoc']                   = true,		-- бинокль
}

local forbidden_ammo = {
	['ammo_vog-25']		= true,
	['ammo_vog-25p']	= true,
	['ammo_m209']		= true,
	['ammo_og-7b']	    = true,
}

-- Параметры актёра, по которым считаются некоторые параметры артефактов или костюмов
local conditions = {
	bleeding_restore_speed	= get_float('actor_condition', 'bleeding_v'),
	health_restore_speed	= get_float('actor_condition', 'satiety_health_v'),
	power_restore_speed		= get_float('actor_condition', 'satiety_power_v') *100,
	satiety_restore_speed	= get_float('actor_condition', 'satiety_v'),
	radiation_restore_speed	= get_float('actor_condition', 'radiation_v') *100
}
-- параметры костюмов и артов
local conditions_params = {
	{ prop = "health_restore_speed",	text = string.format("%s:", game.translate_string("ui_inv_health")),		tex = "health"		},
	{ prop = "bleeding_restore_speed",	text = string.format("%s:", game.translate_string("ui_inv_bleeding")),	    tex = "bleeding"	},
	{ prop = "satiety_restore_speed",	text = string.format("%s:", game.translate_string("ui_inv_satiety")),		tex = "satiety"		},
	{ prop = "power_restore_speed",		text = string.format("%s:", game.translate_string("ui_inv_power")),	    	tex = "power"		},
	{ prop = "radiation_restore_speed",	text = string.format("%s:", game.translate_string("ui_inv_radiation")),		tex = "radiation_2", unit = game.translate_string("ui_inv_actor_rad_unit")	},
}
-- Типы хитов и соответствующие им текстуры и названия
local hit_types = {
	{ prop = "burn",			text = string.format("%s:", game.translate_string("ui_inv_outfit_burn_protection")),			},
	{ prop = "shock",			text = string.format("%s:", game.translate_string("ui_inv_outfit_shock_protection")),	        },
	{ prop = "strike",			text = string.format("%s:", game.translate_string("ui_inv_outfit_strike_protection")),	        },
	{ prop = "wound",			text = string.format("%s:", game.translate_string("ui_inv_outfit_wound_protection")),	        },
	{ prop = "radiation",		text = string.format("%s:", game.translate_string("ui_inv_outfit_radiation_protection")),	    },
	{ prop = "telepatic",		text = string.format("%s:", game.translate_string("ui_inv_outfit_telepatic_protection")),	    },
	{ prop = "chemical_burn",	text = string.format("%s:", game.translate_string("ui_inv_outfit_chemical_burn_protection")),	},
	{ prop = "explosion",		text = string.format("%s:", game.translate_string("ui_inv_outfit_explosion_protection")),	    },
	{ prop = "fire_wound",		text = string.format("%s:", game.translate_string("ui_inv_outfit_fire_wound_protection")),	    },
}
-- Параметры еды
local eatable_params = {
	{ prop = "eat_health",				text = string.format("%s:", game.translate_string("ui_inv_health")),		tex = "health"		},
	{ prop = "wounds_heal_perc",		text = string.format("%s:", game.translate_string("ui_inv_bleeding")),		tex = "bleeding"	},
	{ prop = "eat_psy_health",			text = string.format("%s:", game.translate_string("ui_inv_psy_health")),	tex = "telepatic"	},
	{ prop = "eat_satiety",				text = string.format("%s:", game.translate_string("ui_inv_satiety")),		tex = "satiety"		},
	{ prop = "eat_power",				text = string.format("%s:", game.translate_string("ui_inv_power")),	    tex = "power"		},
	{ prop = "eat_alcohol",				text = string.format("%s:", game.translate_string("ui_inv_alcohol")),		tex = "alcohol"		},
	{ prop = "eat_radiation",			text = string.format("%s:", game.translate_string("ui_inv_radiation")),	tex = "radiation_2"	},
	{ prop = "eat_radiation_arc",			text = string.format("%s:", game.translate_string("ui_inv_radiation")),	tex = "radiation_2"	},

	{ prop = "boost_health_restore",		text = string.format("%s:", game.translate_string("ui_inv_health")),		tex = "health"		},
	{ prop = "boost_bleeding_restore",		text = string.format("%s:", game.translate_string("ui_inv_bleeding")),		tex = "bleeding"	},
	{ prop = "boost_psy_health_restore",		text = string.format("%s:", game.translate_string("ui_inv_psy_health")),	tex = "telepatic"	},
	{ prop = "boost_alcohol_restore",		text = string.format("%s:", game.translate_string("ui_inv_alcohol")),	tex = "alcohol"	},
	{ prop = "boost_telepat_protection",		text = string.format("%s:", game.translate_string("ui_inv_outfit_telepatic_protection")),	
tex = "telepatic"	},
	{ prop = "boost_time_factor",			text = string.format("%s:", game.translate_string("ui_inv_satiety")),		tex = "satiety"		},
	{ prop = "boost_power_restore",			text = string.format("%s:", game.translate_string("ui_inv_power")),	    
tex = "power"		},
	{ prop = "boost_radiation_restore",		text = string.format("%s:", game.translate_string("ui_inv_radiation")),	
tex = "radiation_2"	},
	{ prop = "boost_radiation_protection",		text = string.format("%s:", game.translate_string("ui_inv_outfit_radiation_protection")),	
tex = "radiation"	},
	{ prop = "boost_fire_wound_protection",		text = string.format("%s:", game.translate_string("ui_inv_outfit_fire_wound_protection")),	
tex = "fire_wound"	},
}

local weapons_params = {
	{ prop = "hit_power",	                        text = string.format("%s:", game.translate_string("descr_damage")),		tex = "ui_inv_icon_hit_power"		},
	{ prop = "fire_distance",	                text = string.format("%s:", game.translate_string("descr_distance")),	        tex = "ui_inv_icon_fire_distance"	},
	{ prop = "rpm",	                                text = string.format("%s:", game.translate_string("descr_rate")),		tex = "ui_inv_icon_rpm"		},
	{ prop = "ammo_mag_size",	                text = string.format("%s:", game.translate_string("descr_mag_size")),	    	tex = "ui_inv_icon_ammo_mag_size"		},
}

--------------------------------------------------------------------------------------------------------
class "CUIDescriptionWnd" (CUIScriptWnd)

function CUIDescriptionWnd:__init(owner) super()
	self.owner = owner

	self.scrollPos = 0
	self.k_icon = cell_size * kScreen / 50
	
	self:Init(0, 0, 1024, 768)
	self:SetAutoDelete(true)
	
	self.xml = CScriptXmlInit()
	self.xml:ParseFile("script_wnd\\ui_inv_descr.xml")
	
	self.frame = self.xml:InitFrame("description", owner)
	
	self.inv_name = self.xml:InitStatic("description:inv_name", self.frame)
	
	self.scroll_v = self.xml:InitScrollView("description:scroll_v", self.frame)
	self.scroll_height = self.scroll_v:GetHeight()
	self.descr = self.xml:InitStatic("description:descr_list", nil)
	
	self.cost = self.xml:InitStatic("description:cost_wnd", self.frame)
	self.weight_static = self.xml:InitStatic("description:weight_wnd", self.frame)
	
	self.cond_frame = self.xml:InitStatic("description:frame_condition", self.frame)
	self.cond_scale = self.xml:InitProgressBar("description:condition_progress", self.cond_frame)

	self.frame:Show(false)

	self:subscribe()
end

function CUIDescriptionWnd:__finalize()
end

function CUIDescriptionWnd:subscribe()
  if not subscribed then
    subscribed = {
      { signal = "on_cell_item_focus", fun = self.OnItemFocus, self = self },
      { signal = "on_cell_item_focus_lost", fun = self.OnItemFocusLost, self = self },
      { signal = "on_key_down", fun = self.OnKeyPress, self = self },
      { signal = "on_wheel", fun = self.OnMouseWheel, self = self },
      { signal = "on_update",  fun = self.OnUpdate, self = self },
    }
    local sm = ogsr_signals.get_mgr()
    for _, s in ipairs( subscribed ) do
      sm:subscribe( s )
    end
  end
  self.itemInFocus = -1
  self.keypressed = nil
end

function CUIDescriptionWnd:unsubscribe()
  if subscribed then
    local sm = ogsr_signals.get_mgr()
    for _, s in ipairs( subscribed ) do
      sm:unsubscribe( s )
    end
    subscribed = false
  end
  self.itemInFocus = -1
  self.shift_tmr = nil
  self.keypressed = nil
  self.frame:Show(false)
end

function CUIDescriptionWnd:HideDescription()
	if self.frame:IsShown() then self.frame:Show(false) end
end

function CUIDescriptionWnd:OnMouseWheel(mode)
	if not self.frame:IsShown() then return end
	if self.frame:GetHeight() < 768 then return end

	local n = mode > 0 and -40 or 40 
log3("mouse wheel1 %s", n)
	local mx = self.scroll_v:GetMaxScrollPos()
	if mx > self.scroll_height then mx = mx - self.scroll_height end
	self.scrollPos = math.clamp(self.scrollPos + n, 0, mx)
	self.scroll_v:SetScrollPos(self.scrollPos)
log3("mouse wheel2 %s", n)
end

function CUIDescriptionWnd:ShowProps(tbl)
	local st
	for i, t in ipairs(tbl) do
		st = self.xml:InitStatic("props", self.scroll_v)

		st.icon = self.xml:InitStatic("props:prop_texture", st)
		st.icon:InitTexture("ui_inv_icon_"..t[1])

		st.text = self.xml:InitStatic("props:prop_text", st)
		st.text:SetText(t[2])
		self.addH = self.addH + st:GetHeight() + vert_interval
	end
end

function CUIDescriptionWnd:ShowPropFromIni(sect, text, sect2, text2)
    local st = self.xml:InitStatic("props_ini", self.scroll_v)
    st:SetHeight(cell_size)

    local icon = CIconParams(sect)

    local has_second_col = sect2 ~= nil
    local left = 0

    local w = math.min(icon.grid_width, 2) * 50
    local ww = w * self.k_icon
    local www = cell_size * 2

    st.icon = CUIStatic()
    st:AttachChild(st.icon)
    icon:set_shader(st.icon)

    st.icon:Init(left + (www - ww) / 2, 0, ww, cell_size)

    if not text then
        text = game.translate_string(news_manager.get_inv_name(sect))
    end

    if has_second_col and string.len(text) > 17 then
        text = string.sub(text, 1, 17)
        text = text.."..."
    end

    www = www + 2
    st.text = CUIStatic()
    st:AttachChild(st.text)
    st.text:Init(left + www, 0, st:GetWidth() / (has_second_col and 1.5 or 1) - www, cell_size + 10)
    st.text:SetTextY((cell_size / 2) - 8)
    st.text:SetText(text)
    st.text:SetTextColor(255, 160, 160, 160)

    local static = st.text:GetCUIStatic()
    if static then
        static:SetTextComplexMode(true)
    end

    if has_second_col then
        left = st:GetWidth() / 2

        local icon2 = CIconParams(sect2)

        w = math.min(icon2.grid_width, 2) * 50
        ww = w * self.k_icon

        st.icon2 = CUIStatic()
        st:AttachChild(st.icon2)
        icon2:set_shader(st.icon2)

        st.icon2:Init(left + (www - ww) / 2, 0, ww, cell_size)

        if not text2 then
            text2 = game.translate_string(news_manager.get_inv_name(sect2))
        end

        if has_second_col and string.len(text2) > 17 then
            text2 = string.sub(text2, 1, 17)
            text2 = text2.."..."
        end

        www = www + 2
        st.text2 = CUIStatic()
        st:AttachChild(st.text2)
        st.text2:Init(left + www, 0, st:GetWidth() / (has_second_col and 1.5 or 1) - www, cell_size + 10)
        st.text2:SetTextY((cell_size / 2) - 8)
        st.text2:SetText(text2)
        st.text2:SetTextColor(255, 160, 160, 160)

        local static = st.text2:GetCUIStatic()
        if static then
            static:SetTextComplexMode(true)
        end
    end

    self.addH = self.addH + cell_size + vert_interval
end

function CUIDescriptionWnd:ShowDescription(item)
	if not item then return end
	
	if not self.owner then return end
	
	self.scroll_v:Clear()
	
	self.item = item
	self.section = item:section()
	self.condition = item:condition()

	local inv_name = news_manager.get_inv_name(self.section)

	self.addH = 0

	local icon = CIconParams(self.section)

	tx = icon.grid_x * 40
	ty = icon.grid_y * 40
	tw = icon.grid_width * 35
	th = icon.grid_height * 40

	local px = 150 - (tw / 2)
	local py = 0 - icon.grid_height

	local vert_add = th

	if icon.grid_height < 2 then
		vert_add = vert_add + (th / 2)
	end

	if icon.grid_height > 2 then
		py = py + icon.grid_height
	end

	self.icon_sect = CUIStatic()
	self.icon_sect:SetWindowName("CUIStatic_icon")
	--self.scroll_v:AddWindow(self.icon_sect, false)
	local st = self.xml:InitStatic("props_ini", self.scroll_v)
	st:SetHeight(vert_add)
	st:AttachChild(self.icon_sect)
	self.icon_sect:SetAutoDelete(false)
	CIconParams(self.section):set_shader(self.icon_sect)
	self.icon_sect:Init(px, py, tw, th)

	self.addH = self.addH + vert_add

	local description = game.translate_string(sys_ini:r_string(self.section, "description"))

	self.inv_name:SetTextST(inv_name)

	self.descr:SetText(description)
	self.descr:AdjustHeightToText()
	self.scroll_v:AddWindow(self.descr, true)
	self.descr:SetAutoDelete(false)
	self.scroll_v:ScrollToBegin()
	self.scrollPos = 0

	self:AddIndent(5)

	-- food
	if item:is_eatable_item() then
		self:ShowEatableParams()
	-- weapon
	elseif item:is_weapon_magazined() then
		if not forbidden_wpns[self.section] then
			self:ShowWeaponParams()
		end
	-- artefacts
	elseif item:is_artefact() then
		self:ShowAfParams()
	-- outfits
	elseif item:is_outfit() then
		self:ShowOutfitParams()
	-- knife
	elseif item:is_knife() then
		local d = get_float(self.section, 'fire_distance')
		self:ShowProps( { {"fire_distance_knife", string.format("%s: %.2f %s", game.translate_string("descr_knife_distance"), d, game.translate_string("descr_meters"))} } )
	-- grenade
	elseif item:is_grenade() then
		local fr = get_float(self.section, 'frags_r')
		local br =  get_float(self.section, 'blast_r')
		self:ShowProps( { {"explosion", string.format("%s: %.1f %s", game.translate_string("descr_radius"), (fr+br)/2, game.translate_string("descr_meters"))} } )
	-- ammo
	elseif item:is_ammo() and not item:is_grenade() then
		if not forbidden_ammo[self.section] then
			local kh = get_float(self.section, 'k_hit')
			local bs = get_float(self.section, 'buck_shot')
			self:ShowProps( { {"explosion", string.format("%s: %.1f", game.translate_string("descr_damage_ammo"), (kh*bs))} } )
		end
	end

	self.weight_static:SetText(string.format("%s: %.2f %s", game.translate_string("descr_weight"), item:get_weight(), game.translate_string("descr_kg")) )
	self.cost:SetText(string.format("%s: %d %s", game.translate_string("descr_cost"), get_actual_cost(item), game.translate_string("descr_rub")) )

	if need_show_condition(item) then
		self.cond_frame:Show(true)
		self.cond_frame:SetText(string.format("%s: %.1f%%", game.translate_string("descr_condition"), self.condition*100))
		self.cond_scale:SetProgressPos(self.condition * 100)
	else
		self.cond_frame:Show(false)
	end

	local hh = self.descr:GetHeight() + self.addH
	if hh < 678 then
		self.frame:SetHeight(hh + 90)
		self.scroll_work = nil
	else
		self.frame:SetHeight(768)
		self.scroll_work = true
	end

	local cr = self.owner:GetMousePosX()
	if cr>=512 then cr = cr - self.frame:GetWidth()
	else cr = cr + 40 end

	self.frame:SetWndPos(cr, math.min(self.owner:GetMousePosY(), 768-self.frame:GetHeight()))

	self.frame:Show(true)
end

-- Показываем параметры съедобных предметов
function CUIDescriptionWnd:ShowEatableParams()
	local params = {}
	local tm, val, txt = nil, 0, ""
	for i, t in ipairs(eatable_params) do
		val = get_float(self.section, t.prop, 0)
		if val~=0 then
			txt = t.text.." "
			if t.prop == "wounds_heal_perc" then
				txt = txt..(val>0 and "%c[green]" or "%c[red]+")
				val = -val
			elseif t.prop == "eat_alcohol" or t.prop == "eat_radiation" then
				txt = txt..(val>0 and "%c[red]+" or "%c[green]")
			else
				txt = txt..(val>0 and "%c[green]+" or "%c[red]")
			end			
			txt = txt..string.format("%d",val*100)..(t.unit or "%")
			table.insert( params, {t.tex, txt} )
		end
	end

	local tm = get_float(self.section, 'boost_time')
	if tm then
		self:ShowProps( { {"time", string.format("%s: %d %s", game.translate_string("descr_time"), tm, game.translate_string("descr_seconds"))} } )
	end

	if sys_ini:line_exist(self.section, "boost_max_weight") then
		val = get_float(self.section, "boost_max_weight")
		if val~=0 then
			txt = string.format("%s: ", game.translate_string("descr_weight_power"))..(val>0 and "%c[green]+" or "%c[red]")..string.format("%.1f %s", val, game.translate_string("descr_kg"))
			table.insert( params, {"additional_weight", txt} )
		end
	end

	if #params>0 then
		self:ShowProps(params)
	end
end

-- Показываем описание оружия
function CUIDescriptionWnd:ShowWeaponParams()
	local params = {}
	local val, txt = 0, ""
	for i,t in ipairs(weapons_params) do
		val = get_float(self.section, t.prop, 0)
		if val ~= 0 then
			if t.prop == "ammo_mag_size" then
				txt = t.text.." "..string.format("%d / %d", self.item:get_ammo_in_magazine(), val)
			elseif t.prop == "hit_power" then
				txt = t.text.." "..string.format("%.1f", val)
			elseif t.prop == "fire_distance" then
				txt = t.text.." "..string.format("%d %s", val, game.translate_string("descr_meters"))
			elseif t.prop == "rpm" then
				txt = t.text.." "..string.format("%d %s", val, game.translate_string("descr_speed"))
			else
				txt = t.text.." "..string.format("%d", val)
			end
			table.insert( params, {t.prop, txt} )
		end
	end

	if #params > 0 then
		self:ShowProps(params)
	end

	self:AddIndent(5)

	local st = self.xml:InitStatic("props", self.scroll_v)
	local stH = st:GetHeight() + vert_interval
	self.addH = self.addH + stH

	st:SetText(string.format("%s", game.translate_string("descr_ammo_weapon")))
	st:SetTextColor(255, 0, 255, 110)
	-- Боеприпасы
	local s = sys_ini:r_string(self.section, 'ammo_class')

	local t = split_comma_separated_list(s)
	table.sort(t)

	for i = 1, #t, 2 do
		local a = t[i]
		local b = t[i + 1]
		if b then
			local txt1 = game.translate_string(news_manager.get_inv_name(a))
			local txt2 = game.translate_string(news_manager.get_inv_name(b))

			if a == get_cur_wpn_ammo_section(self.item) then
				txt1 = "*" .. txt1
			end

			if b == get_cur_wpn_ammo_section(self.item) then
				txt2 = "*" .. txt2
			end

			self:ShowPropFromIni(a, txt1, b, txt2)
		else
			local txt1 = game.translate_string(news_manager.get_inv_name(a))

			if a == get_cur_wpn_ammo_section(self.item) then
				txt1 = "*" .. txt1
			end

			self:ShowPropFromIni(a, txt1)
		end
	end

	self:AddIndent(5)

	local n1 = get_float(self.section, 'scope_status')

	-- Прицелы
	if n1 == 2 then
		local s1 = sys_ini:line_exist(self.section, 'scope_names') and sys_ini:r_string(self.section, 'scope_names') or sys_ini:r_string(self.section, 'scope_name')
		st = self.xml:InitStatic("props", self.scroll_v)
		st:SetText(sys_ini:line_exist(self.section, 'scope_names') and game.translate_string("descr_scopes") or game.translate_string("descr_scope"))
		st:SetTextColor(255, 0, 255, 110)
		local stH = st:GetHeight() + vert_interval
		self.addH = self.addH + stH
		local t = split_comma_separated_list(sys_ini:r_string(self.section, 'scope_names'))
		table.sort(t)

		for i = 1, #t, 2 do
			local a = t[i]
			local b = t[i + 1]
			if b then
				local txt1 = game.translate_string(news_manager.get_inv_name(a))
				local txt2 = game.translate_string(news_manager.get_inv_name(b))
				
				local scope_name = get_string(self.section, "scope_name")

				if news_manager.get_inv_name(a) == news_manager.get_inv_name(scope_name) then
					txt1 = "*" .. txt1
				end

				if news_manager.get_inv_name(b) == news_manager.get_inv_name(scope_name) then
					txt2 = "*" .. txt2
				end

				self:ShowPropFromIni(a, txt1, b, txt2)
			else
				local txt1 = game.translate_string(news_manager.get_inv_name(a))

				local scope_name = get_string(self.section, "scope_name")

				if news_manager.get_inv_name(a) == news_manager.get_inv_name(scope_name) then
					if a == get_cur_wpn_ammo_section(self.item) then
						txt1 = "*" .. txt1
					end
				end

				self:ShowPropFromIni(a, txt1)
			end
		end
	end

	local n2 = get_float(self.section, 'silencer_status')

	-- Глушитель
	if n2 == 2 then
		local s2 = sys_ini:r_string(self.section, 'silencer_name')	
		st = self.xml:InitStatic("props", self.scroll_v)
		st:SetText(game.translate_string("descr_silencer"))
		st:SetTextColor(255, 0, 255, 110)
		local stH = st:GetHeight() + vert_interval
		self.addH = self.addH + stH
		for a in string.gfind(s2, "[%w_%-%.]+") do
			self:ShowPropFromIni(a, game.translate_string(news_manager.get_inv_name(a)))
		end
	end

	local n3 = get_float(self.section, 'grenade_launcher_status')

	-- Подствольник
	if n3 == 2 then
		local s3 = sys_ini:r_string(self.section, 'grenade_launcher_name')	
		st = self.xml:InitStatic("props", self.scroll_v)
		st:SetText(game.translate_string("descr_pg"))
		st:SetTextColor(255, 0, 255, 110)
		local stH = st:GetHeight() + vert_interval
		self.addH = self.addH + stH
		for a in string.gfind(s3, "[%w_%-%.]+") do
			self:ShowPropFromIni(a, game.translate_string(news_manager.get_inv_name(a)))
		end
	end
end

-- Показываем параметры артефактов
function CUIDescriptionWnd:ShowAfParams()
	local params = {}
	local val, txt = 0, ""

	for i,t in ipairs(conditions_params) do
		val = get_float(self.section, t.prop, 0)
		if val~=0 then
			val = val*100/conditions[t.prop]
			txt = t.text.." "
			if t.prop == "bleeding_restore_speed" then
				txt = txt..(val>0 and "%c[green]" or "%c[red]+")
				val = -val
			elseif t.prop == "radiation_restore_speed" then
				txt = txt..(val>0 and "%c[red]+" or "%c[green]")
			else
				txt = txt..(val>0 and "%c[green]+" or "%c[red]")
			end
			txt = txt..string.format("%d",val)..(t.unit or "%")
			table.insert( params, {t.tex, txt} )
		end
	end

	local hit_absorbation_sect = sys_ini:r_string(self.section, "hit_absorbation_sect")
	for i,t in ipairs(hit_types) do
		val = get_float(hit_absorbation_sect, t.prop.."_immunity")
		if val~=1 then
			val = 100-val*100
			txt = t.text.." "..(val<0 and "%c[red]" or "%c[green]+")..string.format("%d%%",val)
			table.insert( params, {t.prop, txt} )
		end
	end

	if sys_ini:line_exist(self.section, "additional_inventory_weight2") then
		val = get_float(self.section, "additional_inventory_weight2")
		if val~=0 then
			txt = string.format("%s: ", game.translate_string("descr_weight_power"))..(val>0 and "%c[green]+" or "%c[red]")..string.format("%.1f %s", val, game.translate_string("descr_kg"))
			table.insert( params, {"additional_weight", txt} )
		end
	end

	if #params > 0 then
		self:ShowProps(params)
	end
end
-- Показываем параметры костмов
function CUIDescriptionWnd:ShowOutfitParams()
	local outfit = db.actor:item_in_slot(6)
	local params = {}
	local val, txt = 0, ""
	for i,t in ipairs(hit_types) do
		val = get_float(self.section, t.prop.."_protection")
		val = math.floor(val * self.condition * 100 + 0.5)
		if outfit and outfit:id() ~= self.item:id() then
			local val2 = math.floor(get_float(outfit:section(), t.prop.."_protection") * outfit:condition() * 100 + 0.5)
			if val > 0.0 or val2 > 0.0 then
				val2 = val - val2
				txt = t.text.." "..(val<0 and "%c[red]" or "%c[green]+")..string.format("%d%%", val).."%c[gray2] / "..(val2 < 0 and "%c[red]" or "%c[green]+")..string.format("%d%%", val2)
				table.insert( params, {t.prop, txt} )
			end
		else
			if val > 0.0 then
				txt = t.text.." "..(val<0 and "%c[red]" or "%c[green]+")..string.format("%d%%", val)
				table.insert( params, {t.prop, txt} )
			end
		end
	end

	if sys_ini:line_exist(self.section, "additional_inventory_weight2") then
		val = get_float(self.section, "additional_inventory_weight2")
		if outfit and outfit:id() ~= self.item:id() then
			local val2 = get_float(outfit:section(), "additional_inventory_weight2")
			if val > 0.0 or val2 > 0.0 then
				val2 = val - val2
				txt = string.format("%s: ", game.translate_string("descr_weight_power"))..(val > 0 and "%c[green]+" or "%c[red]")..string.format("%.1f %s", val, game.translate_string("descr_kg")).."%c[gray2] / "..(val2 > 0 and "%c[green]+" or "%c[red]")..string.format("%.1f %s", val2, game.translate_string("descr_kg"))
				table.insert( params, {"additional_weight", txt} )
			end
		else
			if val > 0.0 then
				txt = string.format("%s: ", game.translate_string("descr_weight_power"))..(val>0 and "%c[green]+" or "%c[red]")..string.format("%.1f %s", val, game.translate_string("descr_kg"))
				table.insert( params, {"additional_weight", txt} )
			end
		end
	end

	if #params > 0 then
		self:ShowProps(params)
	end
end


function CUIDescriptionWnd:Remove()
	self:unsubscribe()
	self.shift_tmr = nil
	self.keypressed = nil
	self.owner = nil
end

function CUIDescriptionWnd:OnItemFocus( obj )
	self.itemInFocus = obj:id()

	self.shift_tmr = time_global() + shift_show_descr
end

function CUIDescriptionWnd:OnItemFocusLost( obj )
	if self.itemInFocus == obj:id() then
		self.itemInFocus = nil
	end
	if not self.keypressed then
		self:HideDescription()
	end
end

function CUIDescriptionWnd:OnUpdate( delta ) --Если сюда передали аргументом передали true - обновление будет форсировано.
	if ( not self.keypressed and self.shift_tmr and self.shift_tmr < time_global() ) or delta == true then
		if self.itemInFocus and ( self.itemInFocus > 65535 or alife():object( self.itemInFocus ) ) then
			self:ShowDescription( level.object_by_id(self.itemInFocus) )
		end
		self.shift_tmr = nil
	end
end

function CUIDescriptionWnd:OnKeyPress(key, bind)
	if bind ~= key_bindings.kFOCUS then return end

	if self.itemInFocus then
		self:OnUpdate(true)
		self.keypressed = true
	else
		self.keypressed = nil
		self:HideDescription()
	end
end



function need_show_condition(item)
	local b = get_bool(item:section(), "inv_show_condition", false)
	return (( item:is_weapon() or item:is_outfit()) and b) or b
end

function get_cur_wpn_ammo_section(wpn)
    local ammo_sect
    if wpn:is_weapon() then
        local ammo = dsh.get_ammo_sections(wpn)
        ammo_sect = ammo.ammo_class[wpn:get_ammo_type() + 1]
    end
    return ammo_sect
end

function get_actual_cost(obj) -- костыль для расчета реально цеты айтема в окне торговли. не лутшее решение но в целом пойдет
    local trade_wnd = level.get_trade_wnd()
    if trade_wnd and trade_wnd:IsShown() then
        local b_buying = obj:parent() and obj:parent():id() == db.actor:id()
        local trader = level:get_second_talker()
        if trader then
            local cur_price = trader:calculate_item_price(obj, b_buying)
            return cur_price
        end
    end
    return obj:cost()
end

function CUIDescriptionWnd:AddIndent(size)
	local st = self.xml:InitStatic("props", self.scroll_v)
	local stH = st:GetHeight() + vert_interval
	self.addH = self.addH + size
	st:SetHeight(size)
end