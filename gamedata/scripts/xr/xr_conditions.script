
-- Каждая функция в этом файле используется как условие xr_logic: {=функция !функция}
-- Если в функцию необходимо передавать параметры, то:  {=функция(парам1:парам2:...) !функция(парам1:парам2:...)}
-- Формат: function f(actor, npc). В случае передачи параметров: function f(actor, npc, p).
-- Детали реализации нужно помещать в файл xr_conditions_impl.script, а не в этот файл.
-- ----------------------------------------------------------------------------------------------------
-- amk function
-- ----------------------------------------------------------------------------------------------------
function time_hours()
    if level.get_time_hours() >= 5 and level.get_time_hours() <= 22 then
        return true -- день
    else
        return false -- ночь
    end
end

-- ----------------------------------------------------------------------------------------------------
-- Общие функции
-- ----------------------------------------------------------------------------------------------------
-- видим ли мы еще "черный экран" или нет?
function black_screen(actor, npc)
    return device().precache_frame > 1
end

-- 
function is_actor_sleeping(actor, npc)
    return db.actor:is_actor_sleeping()
end

-- проверка, что актер жив
function actor_alive(actor, npc)
    if db.actor and db.actor:alive() then
        return true
    end
    return false
end

-- проверка, что актер мертв
function actor_dead(actor, npc)
    if db.actor and not db.actor:alive() then
        return true
    end
    return false
end

function see_npc(actor, npc, p)
    local npc1 = level_object_by_sid(p[1])
    if npc and npc1 then
        return npc:see(npc1)
    else
        return false
    end
end

function is_wounded(actor, npc)
    return xr_wounded.is_wounded(npc)
end

function dist_to_actor_le(actor, npc, p)
    local d = p[1]
    return d and npc:position():distance_to_sqr(actor:position()) <= d * d
end

function dist_to_actor_ge(actor, npc, p)
    local d = p[1]
    return d and npc:position():distance_to_sqr(actor:position()) >= d * d
end

-- проверка того что дистанция до обьекта <= заданной
-- параметры: [sid,dist]
function distance_to_obj_le(actor, npc, p)
    local npc1 = level_object_by_sid(p[1])
    if npc1 then
        local res = npc:position():distance_to_sqr(npc1:position()) <= p[2] * p[2]
        return res
    end
    return false
end

-- проверка того что дистанция до обьекта >= заданной
-- параметры: [sid,dist]
function distance_to_obj_ge(actor, npc, p)
    local npc1 = level_object_by_sid(p[1])
    if npc1 then
        local res = npc:position():distance_to_sqr(npc1:position()) >= p[2] * p[2]
        return res
    end
    return false
end

-- проверка того что npc находится в заданной зоне
-- !!! ВЫЗЫВАТЬ ТОЛЬКО ИЗ SPACE RESTRICTOR !!!
-- параметры: [sid1:sid2:...]
-- !!! НЕКОРРЕКТНО РАБОТАЕТ ДЛЯ ОБЬЕКТОВ В offline'e !!!
-- !!! ДЛЯ ГАРАНТИИ ИСПОЛЬЗОВАТЬ one_obj_in_zone !!!
function obj_in_zone(actor, zone, p)
    local npc1, i, v = 0, 0, 0
    for i, v in pairs(p) do
        npc1 = level_object_by_sid(v)
        if npc1 and zone:inside(npc1:position()) then
            return true
        end
    end
    return false
end

-- параметры: [sid:def*] def=true|false
-- * параметр не обязателен
function one_obj_in_zone(actor, zone, p)
    -- local def_offline = (p[2] ~= "false") -- default (true) result if npc in offline
    local obj1 = level_object_by_sid(p[1])

    if obj1 then -- npc is online
        return zone:inside(obj1:position())
    else -- npc is offline
        return (p[2] ~= "false") -- default (true) result if npc in offline
    end
end

function actor_in_zone(actor, npc, p)
    local zone = db.zone_by_name[p[1]]
    return utils.npc_in_zone(db.actor, zone)
end
function actor_out_zone(actor, npc, p)
    local zone = db.zone_by_name[p[1]]
    if zone == nil then
        return false
    end
    return not utils.npc_in_zone(db.actor, db.zone_by_name[p[1]])
end

-- true, если здоровье npc <= заданному значению
-- false в противном случае
function health_le(actor, npc, p)
    return p[1] and npc.health < p[1]
end

-- true, если здоровье вертолёта <= заданному значению
-- false в противном случае
function heli_health_le(actor, obj, p)
    return p[1] and obj:get_helicopter():GetfHealth() < p[1]
end

-- видит ли вертолёт npc (по story id)
function heli_see_npc(actor, obj, p)
    if p[1] then
        local o = level_object_by_sid(p[1])

        return o ~= nil and obj:get_helicopter():isVisible(o)
    else
        return false
    end
end

-- Проверка на принадлежность врага к одной из групп
-- (можно задавать несколько через двоеточие)
function enemy_group(actor, npc, p)
    local enemy_st = db.storage[npc:id()].enemy
    local valid, enemy = validate_enemy_object(enemy_st)
    if valid == false then
        return false
    end
    if enemy and enemy:alive() then
        local g = enemy:group()
        local i, v = 0, 0
        for i, v in pairs(p) do
            if v == g then
                return true
            end
        end
    end
    return false
end

function enemy_gulag(actor, npc, p)
    local enemy_st = db.storage[npc:id()].enemy
    local valid, enemy = validate_enemy_object(enemy_st)
    if valid == false then
        return false
    end

    if enemy and enemy:alive() and enemy:id() ~= actor:id() then
        local g = xr_gulag.get_npc_gulag(enemy)

        if g ~= nil then
            local n = g.name
            local i, v = 0, 0

            for i, v in pairs(p) do
                if n == v then
                    return true
                end
            end
        end
    end
    return false
end

function gulag_state(actor, npc, p)
    if xr_gulag.getGulagState(p[1]) == p[2] then
        return true
    end
    return false
end

function npc_community(actor, npc, p)
    if p[1] == nil then
        abort("Wrong number of params in npc_community")
    end

    if npc:character_community() == p[1] then
        return true
    end
    return false
end

function npc_rank(actor, npc, p)
    if p[1] == nil then
        abort("Wrong number of params in npc_rank")
    end

    if ranks.get_obj_rank_name(npc) == p[1] then
        return true
    end
    return false
end

function npc_profile(actor, npc, p)
    if p[1] == nil then
        abort("Wrong number of params in npc_profile")
    end

    if npc:profile_name() == p[1] then
        return true
    end
    return false

end

-- Проверка того что удар был нанесен кем-то из npc указанных в списке.
-- Параметры это story_id персонажей. Можно задавать несколько story_id.
function hitted_by(actor, npc, p)
    local npc1
    local t = db.storage[npc:id()].hit
    if t then
        for i, v in pairs(p) do
            npc1 = level_object_by_sid(v)
            if npc1 and t.who == npc1:id() then
                return true
            end
        end
    end
    return false
end

-- Проверка, что лучшее оружие персонажа - пистолет
function best_pistol(actor, npc)
    local pistol = npc:item_in_slot(1)
    if pistol ~= nil then
        return true
    else
        return false
    end
end

-- Проверка того что персонаж был убит кем-то из npc указанных в списке.
-- Параметры это story_id персонажей. Можно задавать несколько story_id.
function killed_by(actor, npc, p)
    local npc1
    local t = db.storage[npc:id()].death
    if t then
        for i, v in pairs(p) do
            npc1 = level_object_by_sid(v)
            if npc1 and t.killer == npc1:id() then
                return true
            end
        end
    end
    return false
end

-- проверка (по story_id) все ли проверяемые сталкеры живы
-- TODO: исправить ситуацию, когда выдается неправильный результат для обьектов, которые
--       не успели проспавниться.
function is_alive_all(actor, npc, p)
    local npc1
    for i, v in pairs(p) do
        npc1 = level_object_by_sid(v)
        if npc1 and not npc1:alive() then
            return false
        end
    end
    return true
end

-- проверка (по story_id) того, что чотя бы один из проверяемых сталкеров жив
-- TODO: исправить ситуацию, когда выдается неправильный результат для обьектов, которые
--       не успели проспавниться.
function is_alive_one(actor, npc, p)
    local npc1
    for i, v in pairs(p) do
        npc1 = level_object_by_sid(v)
        if npc1 and npc1:alive() then
            return true
        end
    end
    return false
end

-- проверка (по story_id) того, что проверяемыq npc жив
-- TODO: исправить ситуацию, когда выдается неправильный результат для обьектов, которые
-- не успели проспавниться.
function is_alive(actor, npc, p)
    local npc1
    npc1 = level_object_by_sid(p[1])
    return npc1 and npc1:alive()
end

function is_box_empty(actor, npc, p)
    local InvBox = level_object_by_sid(p[1])
    if InvBox then
        if InvBox:is_inv_box_empty() then
            return true
        end
    end
    return false
end

-- проверка (по story_id) все ли проверяемые сталкеры мертвы
-- TODO: исправить ситуацию, когда выдается неправильный результат для обьектов, которые
--       не успели проспавниться.
function is_dead_all(actor, npc, p)
    local npc1
    for i, v in pairs(p) do
        npc1 = level_object_by_sid(v)
        if npc1 then
            if npc1:alive() then
                return false
            end
        end
    end
    return true
end

-- проверка (по story_id) жив ли объект (для всей игры, не только для онлайна)
function is_alive_sid(actor, npc, p)
    local sim = alife()
    if sim then
        local se_obj = sim:story_object(p[1])
        if se_obj and se_obj:alive() then
            return true
        else
            return false
        end
    end
    return false
end

-- проверка (по story_id) того, что хотя бы один из проверяемых сталкеров мертв
-- TODO: исправить ситуацию, когда выдается неправильный результат для обьектов, которые
--       не успели проспавниться.
function is_dead_one(actor, npc, p)
    local npc1
    for i, v in pairs(p) do
        npc1 = level_object_by_sid(v)
        if not npc1 or not npc1:alive() then
            return true
        end
    end
    return false
end

-- проверка (по story_id) того, что хотя бы один из проверяемых сталкеров мертв
-- TODO: исправить ситуацию, когда выдается неправильный результат для обьектов, которые
--       не успели проспавниться.
function is_dead(actor, npc, p)
    local npc1
    npc1 = level_object_by_sid(p[1])
    return not npc1 or not npc1:alive()
end

-- проверка (по story_id) того, что нашим врагом есть хотя бы кото-то один из списка
function check_fighting(actor, npc, p)
    local enemy_st = db.storage[npc:id()].enemy
    local valid, enemy = validate_enemy_object(enemy_st)
    if valid == false then
        return false
    end
    local sid
    if enemy and enemy:alive() then
        sid = enemy:story_id()
        for i, v in pairs(p) do
            if type(v) == 'number' and sid == v then
                return true
            end
        end
    end
    return false
end

-- Проверка (по профилю)  того, что нашим врагом есть хотя бы кото-то один из списка
function check_fighting_by_profile_name(actor, npc, p)
    local enemy_st = db.storage[npc:id()].enemy
    local valid, enemy = validate_enemy_object(enemy_st)
    if valid == false then
        return false
    end
    local profile
    if enemy and enemy:alive() then
        profile = enemy:profile_name()
        for k, v in pairs(p) do
            if type(v) == "string" and profile == v then
                return true
            end
        end
    end
    return false
end

-- true, если гулага с таким именем (или story id) не существует или в нём нет никого
function gulag_empty(actor, npc, p)
    return (not p[1]) or (xr_gulag.getGulagPopulationComed(p[1]) == 0)
end

-- true, если  в указанном гулаге народу меньше чем надо.
function gulag_population_le(actor, npc, p)
    return (not p[1] or not p[2]) or (xr_gulag.getGulagPopulation(p[1]) <= p[2])
end

-- true, если  в указанном гулаге народу больше чем надо.
function gulag_population_ge(actor, npc, p)
    return (not p[1] or not p[2]) or (xr_gulag.getGulagPopulation(p[1]) >= p[2])
end

-- true, если  в указанном гулаге пришло народу меньше чем надо.
function gulag_population_comed_le(actor, npc, p)
    return (not p[1] or not p[2]) or (xr_gulag.getGulagPopulationComed(p[1]) <= p[2])
end

-- true, если  в указанном гулаге пришло народу больше чем надо.
function gulag_population_comed_ge(actor, npc, p)
    return (not p[1] or not p[2]) or (xr_gulag.getGulagPopulationComed(p[1]) >= p[2])
end

-- возвращает количество опасных персонажей в гулаге(живых и не раненных).
function gulag_population_active(actor, npc, p)
    local gulag = xr_gulag.get_gulag_by_name(p[1])

    if gulag == nil then
        return 0
    end

    local val = 0

    for k, v in pairs(gulag.Object) do
        if (v == true or
            (v:alive() and not (xr_wounded.is_heavy_wounded_by_id(k) or xr_wounded.is_psy_wounded_by_id(k)))) and
            gulag.Object_begin_job[k] == true then
            val = val + 1
        end
    end
    return val
end

function gulag_inactive(actor, npc, p)
    local gulag = xr_gulag.get_gulag_by_name(p[1])

    if gulag == nil then
        return false
    end

    local val = 0

    for k, v in pairs(gulag.Object) do
        if (v == true or
            (v:alive() and not (xr_wounded.is_heavy_wounded_by_id(k) or xr_wounded.is_psy_wounded_by_id(k)))) and
            gulag.Object_begin_job[k] == true then
            val = val + 1
        end
    end
    return val == 0
end

function gulag_population_active_le(actor, npc, p)
    local gulag = xr_gulag.get_gulag_by_name(p[1])

    if gulag == nil then
        return false
    end

    local val = 0

    for k, v in pairs(gulag.Object) do
        if (v == true or
            (v:alive() and not (xr_wounded.is_heavy_wounded_by_id(k) or xr_wounded.is_psy_wounded_by_id(k)))) and
            gulag.Object_begin_job[k] == true then
            val = val + 1
        end
    end
    return val <= p[2]
end

-- true, если в указанном гулаге потери больше или равны заданным
function gulag_casualities_ge(actor, npc, p)
    return (p[1] ~= nil and p[2] ~= nil) and (xr_gulag.getCasualities(p[1]) >= p[2])
end

-- true, если у актёра в инвентаре есть указанный предмет
-- false, если нету, либо не задана секция предмета
function actor_has_item(actor, npc, p)
    return p[1] ~= nil and actor:object(p[1]) ~= nil
end

-- true если у актора одет шлем указанной секции
function actor_wear_helmet(actor, npc, p)
    return p[1] ~= nil and actor:object(p[1]) ~= nil and actor:item_in_slot(10) ~= nil and
               actor:item_in_slot(10):section() == p[1]
end

-- возвращает true, если в текущей схеме персонажа взведён указанный сигнал.
function signal(actor, npc, p)
    if p[1] then
        local st = db.storage[npc:id()]
        local sigs = st[st.active_scheme].signals
        return sigs ~= nil and sigs[p[1]] == true
    else
        return false
    end
end

-- возвращает true, если значение указанного счётчика актёра больше указанного числа
function counter_greater(actor, npc, p)
    if p[1] and p[2] then
        local c = xr_logic.pstor_retrieve(actor, p[1], 0)
        return c > p[2]
    else
        return false
    end
end

-- определяет нечётность интервала игрового времени. интервал нужно передать в p[1]
function odd_time_interval(actor, npc, p)
    return odd(game.time() / p[1])
end

-- текущий враг на расстоянии больше или равном заданному расстоянию
-- для combat_ignore
function fighting_dist_ge(actor, npc, p)
    local enemy_st = db.storage[npc:id()].enemy
    local valid, enemy = validate_enemy_object(enemy_st)
    if valid == false then
        return false
    end
    if enemy then
        return enemy:position():distance_to(npc:position()) >= p[1]
    else
        return false
    end
end

-------------------------------------------------------------------------------------------------------
-- Функции поддержки kamp
function _kamp_talk(actor, npc)
    return xr_kamp.can_talk(npc)
end

function _used(actor, npc)
    return npc:is_talking()
end

-------------------------------------------------------------------------------------------------------

function has_enemy(actor, npc)
    return npc:best_enemy() ~= nil
end

function see_enemy(actor, npc)
    local enemy = npc:best_enemy()

    if enemy ~= nil then
        return npc:see(enemy)
    end
    return false
end

function talking(actor, npc)
    return actor:is_talking()
end

function talking_or_tutor(actor, npc)
    return actor:is_talking() or has_alife_info("esc_trader_experienced") or has_alife_info("esc_trader_newbie")
end

function see_actor(actor, npc)
    -- log1(if_then_else(pc:alive() and npc:see(actor), "true", "false"))
    return npc:alive() and npc:see(actor)
end

-- видит ли вертолёт актера
function heli_see_actor(actor, obj)
    return obj:get_helicopter():isVisible(actor)
end

function actor_enemy(actor, npc)
    local t = db.storage[npc:id()].death
    return npc:relation(actor) == game_object.enemy or (t ~= nil and t.killer == actor:id())
end

function trade_exchanged(actor, npc)
    return db.storage[npc:id()].trade.exchanged
end

function trading(actor, npc)
    return db.storage[npc:id()].trade.trading
end

function hit_by_actor(actor, npc)
    local t = db.storage[npc:id()].hit
    return t and t.who == actor:id()
end

function hit_by_actor_kolt(actor, npc)
    local t = db.storage[npc:id()].hit
    local hit_by_actor_kolt = (t and t.who == actor:id())
    if hit_by_actor_kolt then
        local weapon = db.actor:active_item()
        if weapon and weapon:section() == "wpn_colt_ucen" then
            return hit_by_actor_kolt
        end
    end
    return false
end

function hit_by_actor_mosin(actor, npc)
    local t = db.storage[npc:id()].hit
    local hit_by_actor_mosin = (t and t.who == actor:id())
    if hit_by_actor_mosin then
        local weapon = db.actor:active_item()
        if weapon and weapon:section() == "wpn_sks_b_ucen" then
            return hit_by_actor_mosin
        end
    end
    return false
end

function killed_by_actor(actor, npc)
    local t = db.storage[npc:id()].death
    return t and t.killer == actor:id()
end

function actor_has_weapon(actor, npc)
    local obj = actor:active_item()
    local be = npc:best_enemy()
    local see = npc:see(actor)
    local dist = actor:position():distance_to(npc:position())
    if not obj or not obj:is_weapon() or (be and not be:is_actor()) or not see or dist > 6 then
        return false
    end
    return true
end

function heavy_wounded(actor, npc)
    return xr_wounded.is_heavy_wounded_by_id(npc:id())
end

function actor_in_outfit(actor, npc, p)
    if p[1] then
        local item = db.actor:item_in_slot(6)
        if item then
            return item:section() == p[1]
        end
    end
end

--[[
Проверка на заданный период времени
Время задается в минутах
Параметры: (time_shift:period_min)
           time_shift - периодичность срабатывания
           period - период срабатывания на котором мы получаем true

Примеры:
time_period(60:10) - возвращает true каждый час на протяжении первых 10 минут
--]]
function time_period(actor, npc, p)
    local tshift, period = p[1], p[2]
    if tshift ~= nil and period ~= nil then
        return tshift > period and level.get_time_minutes() % tshift <= period
    end
    return false
end

function is_day(actor, npc)
    return level.get_time_hours() >= 6 and level.get_time_hours() < 21
end

function is_arsenal_guard_rest_time(actor, npc)
    return level.get_time_hours() > 3 and level.get_time_hours() < 5
end

function bar_no_sniper_time(actor, npc)
    return level.get_time_hours() >= 5
end

function time_to_fire_siren(actor, npc)
    return level.get_time_hours() == 20 and level.get_time_minutes() >= 40
end

function mob_has_enemy(actor, npc)
    -- return false
    if npc == nil then
        return false
    end
    return npc:get_enemy() ~= nil
end

function mob_actor_nearest(actor, npc)
    return false
    -- if npc == nil then return false end
    -- return distance_between (actor, npc) < 20
end

function mob_was_hit(actor, npc)
    local h = npc:get_monster_hit_info()
    if h.who and h.time ~= 0 then
        return true
    end
    return false
end

-- текущий враг актёр?
function fighting_actor(actor, npc)
    local enemy_st = db.storage[npc:id()].enemy
    local valid, enemy = validate_enemy_object(enemy_st)
    if valid == false then
        return false
    end
    return enemy and enemy:id() == actor:id()
end

function fighting_actor_v2(actor, npc)
    local best_enemy = npc:best_enemy()
    local enemy_st = db.storage[npc:id()].enemy
    local valid, enemy = validate_enemy_object(enemy_st)
    if valid == false then
        return false
    end
    return not (enemy and enemy:id() == actor:id()) or (best_enemy and best_enemy:id() == actor:id())
end

function dont_fighting_actor(actor, npc)
    local enemy = db.storage[npc:id()].enemy
    return enemy and enemy:id() ~= actor:id()
end

-- текущий враг на расстоянии больше или равном 20м
function fighting_dist_ge_20(actor, npc)
    local enemy_st = db.storage[npc:id()].enemy
    local valid, enemy = validate_enemy_object(enemy_st)
    if valid == false then
        return false
    end
    if enemy then
        return enemy:position():distance_to_sqr(npc:position()) >= 400 -- 20^2
    else
        return false
    end
end

-- расстояние до текущего реального врага больше или равно заданного значения
function dist_to_enemy_ge(actor, npc, p)
    local d, enemy = p[1], npc:best_enemy()
    return d and enemy and enemy:position():distance_to_sqr(npc:position()) >= d * d
end

-- расстояние до текущего реального врага меньше или равно заданного значения
function dist_to_enemy_le(actor, npc, p)
    local d, enemy = p[1], npc:best_enemy()
    return d and enemy and enemy:position():distance_to_sqr(npc:position()) <= d * d
end

function esc_tutorial_flesh_died_in_anomaly(actor, npc)
    local t = db.storage[npc:id()].death
    if t and t.killer_name then
        if t.killer_name == "esc_tutorial_mincer_02" or t.killer_name == "esc_tutorial_mosquito_bald_01" or
            t.killer_name == "esc_tutorial_mincer_01" then
            return true
        end
    end
    return false
end

------------------------------------------------------------------------------------
-- Special functions for Garbage
------------------------------------------------------------------------------------
function gar_boars_nest2_dead(actor, npc)
    return gulag_population_le(actor, npc, {"gar_boars_nest2", 0})
    --	local g = xr_gulag.fraction["gar_boars_nest2"]
    --	return (not g) or (g:get_population() == 0)
end

function val_fighting_captive(actor, npc)
    local enemy_st = db.storage[npc:id()].enemy
    local valid, enemy = validate_enemy_object(enemy_st)
    if valid == false then
        return false
    end
    if (enemy:is_stalker() or enemy:is_actor()) and enemy:alive() then
        return enemy:story_id() == 400
    else
        return false
    end
end

function val_hit_by_nap1(actor, npc)
    local nap1 = level_object_by_sid(406)
    if nap1 == nil then
        return false
    end
    local t = db.storage[npc:id()].hit
    local hit_by_nap1 = (t ~= nil and t.who == nap1:id())
    return hit_by_nap1
end

function val_hit_by_guard(actor, npc)
    local g1 = level_object_by_sid(407)
    local g2 = level_object_by_sid(408)
    if g1 == nil and g2 == nil then
        return false
    end
    local t = db.storage[npc:id()].hit
    local hit_by_guard = (t ~= nil and ((g1 ~= nil and t.who == g1:id()) or (g2 ~= nil and t.who == g2:id())))
    return hit_by_guard
end

function val_actor_has_key_to_underground(actor, npc)
    if xr_conditions_impl.actor_has_object(actor, "val_key_to_underground") then
        return true
    end
    return false
end

function actor_wears_bandit_outfit(actor, npc)
    return xr_conditions_impl.actor_has_object(actor, "bandit_outfit")
end

------------------------------------------------------------------------------------
-- Special functions for Pripyat
------------------------------------------------------------------------------------
function pri_monolith_combat_ignore(actor, npc)
    local enemy_st = db.storage[npc:id()].enemy
    local valid, enemy = validate_enemy_object(enemy_st)
    if valid == false then
        return false
    end
    if enemy and enemy.clsid == clsid.snork_s and enemy:alive() then
        local g = xr_gulag.get_npc_gulag(enemy)
        return g ~= nil and (g.name == "pri_snork_nest1" or g.name == "pri_snork_nest2")
    else
        return false
    end
end

function pri_actor_has_rpg_ammo(actor, npc)
    return actor:object("ammo_og-7b")
end

------------------------------------------------------------------------------------
-- Special functions for Escape
------------------------------------------------------------------------------------
function esc_vagon_all_dead(actor, npc)
    return xr_conditions_impl.esc_vagon_all_dead()
end

function esc_blokpost_night(actor, npc)
    if xr_gulag.getGulagState("esc_blokpost") == 1 then
        return true
    end
    return false
end

------------------------------------------------------------------------------------
-- Special functions for LabX18
------------------------------------------------------------------------------------
function dar_actor_has_a_key2(actor, npc)
    return xr_conditions_impl.actor_has_object(actor, "krot_flash")
end

------------------------------------------------------------------------------------
-- Special functions for BAR - ROSTOK
------------------------------------------------------------------------------------
function bar_dolg_alarm(actor, npc)
    if xr_gulag.getGulagState("bar_dolg_general") == 2 then
        return true
    end
    if xr_gulag.getGulagState("bar_dolg_veterans") == 2 then
        return true
    end
    return false
end

function is_courier_time(actor, npc)
    return level.get_time_hours() >= 22 and level.get_time_hours() < 23
end

function is_controller_dead(actor, npc)
    local c = level_object_by_sid(729)
    if c == nil then
        return false
    end
    return not c:alive()
end

function bar_actor_rank_stalker(actor, npc)
    local actor = db.actor
    if actor:character_rank() > 300 then
        return true
    end
end

function bar_actor_rank_veteran(actor, npc)
    local actor = db.actor
    if actor:character_rank() > 600 then
        return true
    end
end

------------------------------------------------------------------------------------
-- Special functions for Military
------------------------------------------------------------------------------------
function mil_actor_enemy(actor, npc)
    local npc = level_object_by_sid(707)
    if npc == nil or npc:alive() == false then
        npc = level_object_by_sid(702)
        if npc == nil or npc:alive() == false then
            npc = level_object_by_sid(728)
            if npc == nil then
                return
            end
        end
    end
    return npc:relation(actor) == game_object.enemy
end

function mil_actor_enemy_freedom(actor, npc)
    if relation_registry.community_goodwill("freedom", actor:id()) < -500 then
        return true
    end
    return false
end

------------------------------------------------------------------------------------
-- Special functions for Deadcity
------------------------------------------------------------------------------------
function cit_combat_ignore(actor, npc, p)
    local enemy_st = db.storage[npc:id()].enemy
    local valid, enemy = validate_enemy_object(enemy_st)
    if valid == false then
        return false
    end
    if enemy and enemy:alive() then
        if enemy:id() == actor:id() then
            return p[1] ~= nil and not has_alife_info(p[1])
        elseif enemy:story_id() == 1200 then
            return true
        else
            local g = xr_gulag.get_npc_gulag(enemy)
            local gulags = {
                cit_kanaliz1 = 1,
                cit_kanaliz2 = 1,
                cit_kanaliz3 = 1
            }
            return g ~= nil and gulags[g] == 1
        end
    end
    return false
end

-------------------------------------------------------------------------------------
-- Special for Agroprom
-------------------------------------------------------------------------------------

function agr_boars_nest_dead(actor, npc) -- название функции
    local g = xr_gulag.fraction["agr_boar_nest"] -- имя гулага
    return (not g) or (g:get_population() == 0)
end

function is_wfx_playing(actor, npc)
    return level.is_wfx_playing()
end

function rostok_dist_to_actor_le(actor, npc, p)
    local actor = db.actor
    if actor then
        return npc:position():distance_to_sqr(actor:position()) < p[1] * p[1]
    end
    return false
end
function see_actor_and_kruglov(actor, npc)
    local kruglov = level_object_by_sid(503)
    return npc:see(actor) or npc:see(kruglov)
end
function has_ghost_pda()
    return db.actor:object("yantar_ghost_pda") ~= nil
end

-------------------------------------------------------------------------------------
-- Special for Radar
-------------------------------------------------------------------------------------
function rad_pass_time(actor, npc)
    return true
    --    return level.get_time_hours() >= 10 and level.get_time_hours() < 11
end

-------------------------------------------------------------------------------------
-- Special for Sarcofag
-------------------------------------------------------------------------------------
function actor_has_decoder(actor, npc)
    return actor:object("decoder") ~= nil
end

-------------------------------------------------------------------------------------
-- Special for Trade
-------------------------------------------------------------------------------------
local trade_by_level = {
    l01_escape = "escape",
    l02_garbage = "garbage",
    l03_agroprom = "garbage",
    l03u_agr_underground = "garbage",
    l04_darkvalley = "garbage",
    k01_darkscap = "garbage",
    l04u_labx18 = "garbage",
    l05_bar = "bar",
    l06_Rostok = "bar",
    l07_military = "bar",
    l08_yantar = "yantar",
    l08u_brainlab = "yantar",
    l09_deadcity = "yantar",
    l10_radar = "radar",
    l10u_bunker = "radar",
    l11_pripyat = "radar"
}
function npc_trade_by_level(actor, npc, p)
    local trade = trade_by_level[level.name()]

    if trade == nil then
        return false
    end

    if trade == p[1] then
        return true
    else
        return false
    end
end

function actor_in_dolg(actor, npc)
    if db.actor then
        return db.actor:character_community() == "actor_dolg"
    end
    return false
end
function actor_in_freedom(actor, npc)
    if db.actor then
        return db.actor:character_community() == "actor_freedom"
    end
    return false
end

function actor_on_level(actor, npc, p)
    return p[1] == level.name()
end

function treasure_exist(actor, npc, p)
    return true
end

function can_send_tutorial(actor, npc, p)
    if db.actor:is_talking() then
        return false
    end
    if game.has_active_tutorial() then
        return false
    end
    if db.actor:has_info("ui_inventory") then
        return false
    end
    if db.actor:has_info("ui_pda") then
        return false
    end
    return true
end

function actor_has_item_on_belt(actor, npc, p)
    local obj = actor:object(p[1])
    return obj and actor:is_on_belt(obj)
end

function is_weather_storm()
    local weather = dsh_cop_weather.monitoring_weather_sect
    return weather and (weather == "storm" or weather == "veryfoggy")
end

function is_weather_rain()
    return level.rain_factor() > 0
end
