-- ----------------------------------------------------------------------------------------------------
-- Общие функции
-- ----------------------------------------------------------------------------------------------------
function disable_ui_elements(p)
    if p == "all" then
        db.actor:hide_weapon()
        level.disable_input()
        level.hide_indicators()
        ui_minimap_bioradar.hud_hide()
    elseif p == "weapon" then
        db.actor:hide_weapon()
    elseif p == "input" then
        level.disable_input()
    elseif p == "hud" then
        level.hide_indicators()
        ui_minimap_bioradar.hud_hide()
    end
end

function enable_ui_elements(p)
    if p == "all" then
        db.actor:restore_weapon()
        level.enable_input()
        level.show_indicators()
        ui_minimap_bioradar.hud_show()
    elseif p == "weapon" then
        db.actor:restore_weapon()
    elseif p == "input" then
        level.enable_input()
    elseif p == "hud" then
        level.show_indicators()
        ui_minimap_bioradar.hud_show()
    end
end

function disable_ui(actor, npc)
    db.actor:hide_weapon()
    level.disable_input()
    level.hide_indicators()
    ui_minimap_bioradar.hud_hide()
end

function enable_ui(actor, npc)
    level.show_indicators()
    level.enable_input()
    db.actor:restore_weapon()
    ui_minimap_bioradar.hud_show()
end

function run_tutorial(actor, npc, p)
    game.start_tutorial(p[1])
end

function run_tutorial_if_newbie(actor, npc, p)
    if has_alife_info("esc_trader_newbie") then
        game.start_tutorial(p[1])
    end
end

function teleport_actor(actor, npc, p)
    local point = patrol(p[1])
    local look = patrol(p[2])

    db.actor:set_actor_position(point:point(0))
    local dir = look:point(0):sub(point:point(0))
    db.actor:set_actor_direction(-dir:getH())
end

--[[
send_tip(news_id:sender:sender_id)
    1. news_id
    2. sender*
    3. sender_id*
    * - not necessary
--]]
function send_tip(actor, npc, p)
    news_manager.send_tip(actor, p[1], nil, p[2], nil, p[3])
end

--[[
Дать обьекту, заданному story_id, хит.
параметры: actor, npc, p[sid,bone,power,impulse,hit_src=npc:position()]
    1. sid - story_id обьекта, по которому наносится хит.
    2. bone - строка. Имя кости, по которой наносится удар.
    3. power - сила удара
    4. impulse - импульс
    5. hit_src - если число, то рассматривается как story_id обьекта, со стороны
        которого наносится хит (он же является и инициатором хита), иначе это
        точка (waypoint), из которой по объекту наносится хит.
        Если не задано, то берется позиция обьекта, из которого была вызвана
        данная функция.
--]]
function hit_obj(actor, npc, p)
    local h = hit()
    local obj = level_object_by_sid(p[1])
    local sid = nil

    if not obj then
        --    abort("HIT_OBJ [%s]. Target object does not exist", npc:name())
        return
    end

    h:bone(p[2])
    h.power = p[3]
    h.impulse = p[4]

    if p[5] then
        sid = tonumber(p[5])
        if sid then
            sid = level_object_by_sid(sid)
            if sid then
                h.direction = vector():sub(sid:position(), obj:position())
            end
        end
        if not sid then
            h.direction = vector():sub(patrol(p[5]):point(0), obj:position())
        end
    else
        h.direction = vector():sub(npc:position(), obj:position())
    end

    h.draftsman = sid or npc
    h.type = hit.wound
    obj:hit(h)
end

-- играть звук в голове актёра
function play_snd(actor, npc, p)
    if p[1] then
        local snd_obj = xr_sound.get_safe_sound_object(p[1])
        -- snd_obj:play(actor, p[2] or 0, sound_object.s2d)
        snd_obj:play_no_feedback(actor, sound_object.s2d, p[2] or 0, vector(), 1.0)
    end
end

-- играть звук от указанного объекта
function play_snd_from_obj(actor, npc, p)
    if p[1] and p[2] then
        local snd_obj = xr_sound.get_safe_sound_object(p[2])
        local obj = level_object_by_sid(p[1])
        if obj ~= nil then

            --    snd_obj:play_at_pos(obj, obj:position(), sound_object.s3d)
            snd_obj:play_no_feedback(obj, sound_object.s3d, 0, obj:position(), 1.0)
        end
    end
end

-- играть звук от указанного объекта
function play_snd_now(actor, npc, p)
    xr_sound.set_sound_play(npc, p[1])
end

-- переключает камеру на монстра или на актёра
function alien_control(actor, npc, p)
    npc:set_alien_control(p[1] == "true")
end

-- постпроцесс и влияние удара в морду
function actor_punch(npc)
	if db.actor:position():distance_to_sqr(npc:position()) > 4 then
		return
	end

	local active_slot = db.actor:active_slot()
	if active_slot ~= 1 and
	   active_slot ~= 2
	then
		return 
	end

	local active_item = db.actor:active_item()
	if active_item then
		db.actor:drop_item(active_item)
	end

	level.disable_input()

	dsh.timeout( 5000, function()
		level.enable_input()
	end )

	local snd_obj = xr_sound.get_safe_sound_object([[affects\hit_fist]])
	if snd_obj then
		snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
	end

	level.add_cam_effector("camera_effects\\fusker.anm", 999, false, "")		
end

-- забывание обиды
function clearAbuse(npc)
    xr_abuse.clear_abuse(npc)
end

---Выключение динамической лампочки (hanging_lamp)
function turn_off(actor, npc, p)
    local obj = level_object_by_sid(p[1])
    if not obj then
        abort("TURN_OFF [%s]. Target object does not exist", npc:name())
        return
    end
    obj:get_hanging_lamp():turn_off()
end

function turn_off_object(actor, npc)
    npc:get_hanging_lamp():turn_off()
end

---Включение динамической лампочки (hanging_lamp)
function turn_on(actor, npc, p)
    local obj = level_object_by_sid(p[1])
    if not obj then
        abort("TURN_ON [%s]. Target object does not exist", npc:name())
        return
    end
    obj:get_hanging_lamp():turn_on()
end

function turn_on_object(actor, npc)
    npc:get_hanging_lamp():turn_on()
end

function search_gulag_job(actor, npc)
    xr_gulag.resetJob(npc)
end

function bar_arena_hit(actor, npc)
	local h = hit()
	h.power = 0.01
	h.direction = npc:direction()
	h.draftsman = db.actor 
	h.impulse = 1
	h.type = hit.wound
	npc:hit(h)
end

-------------------------------------------------------------------------------------
-- kill
-------------------------------------------------------------------------------------
function killactor(actor, npc)
    npc:set_relation(game_object.enemy, actor)
end

function kill(actor, npc)
    npc:kill(npc)
end

-------------------------------------------------------------------------------------
-- Функции для работы с погодными эффектами
-------------------------------------------------------------------------------------
function start_small_reject(actor, npc)
    level.set_weather_fx("fx_blowout_day")
    level.add_pp_effector("vibros_p.ppe", 1974, false)
    this.aes_earthshake(npc)
end

-------------------------------------------------------------------------------------
-- Функции для Янтаря
----------------------------------------------------------------------------------
function yan_gluk(actor, npc)
    local sound_obj_l = xr_sound.get_safe_sound_object([[affects\psy_blackout_l]])
    local sound_obj_r = xr_sound.get_safe_sound_object([[affects\psy_blackout_r]])
    sound_obj_l:play_no_feedback(actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
    sound_obj_r:play_no_feedback(actor, sound_object.s2d, 0, vector():set(1, 0, 1), 1.0)
    level.add_cam_effector("camera_effects\\earthquake.anm", 1974, false, "")
end

function x18_gluk(actor, npc)
    level.add_pp_effector("blink.ppe", 234, false)
    local sound_obj_l = xr_sound.get_safe_sound_object([[affects\psy_blackout_l]])
    local sound_obj_r = xr_sound.get_safe_sound_object([[affects\psy_blackout_r]])
    local snd_obj = xr_sound.get_safe_sound_object([[affects\tinnitus3a]])
    snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
    sound_obj_l:play_no_feedback(actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
    sound_obj_r:play_no_feedback(actor, sound_object.s2d, 0, vector():set(1, 0, 1), 1.0)
    level.add_cam_effector("camera_effects\\earthquake.anm", 1974, false, "")
end

------------------------------------------------------------------------------------
-- Функции для саркофага
------------------------------------------------------------------------------------
function destroy_monolith_generator(actor, npc)
    local source = nil

    local obj = alife():story_object(1305)
    if obj then
        source = level.object_by_id(obj.id)
    end

    if not source then
        --abort("MONOLITH GENERATOR story id 1305 not found")
        return
    end

    local h = hit();
    h.power = 1000000;
    h.direction = vector():set(1, 0, 0);
    h.impulse = 1;
    h.draftsman = source;
    h.type = hit.chemical_burn;
    source:hit(h);
end

function sar_monolith_miracle(actor, npc)
    -- ' Много денег
    if db.actor:money() >= 500000 then
        game.start_tutorial("mov_desire_2")
        return
    end

    -- ' Хорошая репутация
    if db.actor:character_reputation() >= 1000 then
        game.start_tutorial("mov_desire_1")
        return
    end

    -- ' плохая репутация
    if db.actor:character_reputation() <= -1000 then
        game.start_tutorial("mov_desire_4")
        return
    end

    game.start_tutorial("mov_desire_5")
end

function game_credits(actor, npc)
    db.gameover_credits_started = true
    game.start_tutorial("credits_seq")
end

function game_over(actor, npc)
    if db.gameover_credits_started ~= true then
        return
    end
    cmd("main_menu on")
end

function after_credits(actor, npc)
    if db.gameover_credits_started ~= true then
        return
    end
    cmd("disconnect")
end

function pri_game_over(actor, npc)
    cmd("main_menu on")
end

function esc_init_dialod()
    local trader = level_object_by_sid(003)
    db.actor:run_talk_dialog(trader)
end

function make_invulnerable(actor, npc)
    npc:invulnerable(true)
end

function unmake_invulnerable(actor, npc)
    npc:invulnerable(false)
end