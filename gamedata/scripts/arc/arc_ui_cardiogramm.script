local X_SIZE = 218
local Y_SIZE = 96
local TX_SIZE = 290
local TY_SIZE = 128

local DOT_COLOR = 255
local LINE_COLOR = 150
local BKG_COLOR = 64

local DOT_XSIZE = 3
local DOT_OFFSET = 10

local LINE_X_COMPRESSION = Y_SIZE / TY_SIZE

local MAX_LINE_INDEX = 20
--            пауза |  1 |    2     |    3    |    4   |    5   |     6   |
local STR_TX = {128, 277, 295, 416, 422, 543, 551, 637, 672, 777, 797, 880, 1024}  --{59, 128, 174, 261, 512}
STR_TX[0] = 0

local DEFAULT_FADE_DELAY = 5000
local DEFAULT_FADE_TIME = 3000

local alpha = 0

local is_fading = false
local fade_delay, fade_total_time, fade_time_left

function show()	
	alpha = 255
	is_fading = false
end

function hide()	
	alpha = 0
	is_fading = false
end

function fade(_force_fade, _fade_delay, _fade_time)	
	if not is_fading or _force_fade then
		alpha = 255
		is_fading = true
		
		fade_delay = _fade_delay or DEFAULT_FADE_DELAY
		fade_total_time = _fade_time or DEFAULT_FADE_TIME
		fade_time_left = fade_total_time
	end
end

local t = 0

local cardiogramm
local strikes = {}
local pauses = {500}

local is_pause = true

function update(delta)
	-- Fading:
	if is_fading then
		if fade_delay > 0 then
			fade_delay = fade_delay - delta
		elseif fade_time_left >= delta then
			fade_time_left = fade_time_left - delta
			alpha = ( 255 * fade_time_left / fade_total_time )
		else
			is_fading = false
			alpha = 0
		end
	end
	
	-- Strikes / Pauses:
	t = t + delta
	if is_pause then
		pauses[1] = get_pause_length()
		if t>pauses[1] then
			pauses[1] = t
			t = 0
			is_pause = false
			local sl,st = get_strike_length_and_type()
			table.insert(strikes, 1, {l=sl,t=st})
		end
	else
		if t>strikes[1].l then
			t = 0
			is_pause = true
			table.insert(pauses, 1, 500)
		end
	end
	
	-- Updating cardiogramm:
	show_cardiogramm()
end

function show_cardiogramm()
	if not cardiogramm then
		if not init_cardiogramm() then
			fault("can`t init_cardiogramm")
			return
		end
	end
	
	cardiogramm.bkg:SetColor(GetARGB(alpha,0,BKG_COLOR,0))
	cardiogramm.filter:SetColor(GetARGB(alpha,0,BKG_COLOR,0))
	cardiogramm.device:SetColor(GetARGB(alpha,255,255,255))
	
	local x = X_SIZE - DOT_OFFSET
	local i, pi, si = 1, 1, 1
	local sn, pn = table.getn(strikes), table.getn(pauses)
	
	x = draw_dot(x)
	
	if is_pause then
		x, i, pi = draw_pause(i, x, pi)
	end
	
	while x>0 and si<=sn do
		x, i, si = draw_strike(i, x, si)
		
		if x>0 and pi<=pn then
			x, i, pi = draw_pause(i, x, pi)
		end
	end
	
	while(pauses[pi]) do table.remove(pauses, pi) end
	while(strikes[si]) do table.remove(strikes, si) end
end

function get_strike_length_and_type()
	local a = db.actor
	local p, h = a.power, a.health
	if not a:alive() then
		return 50, 0
	elseif h<0.25 then
		return texels_to_ms(STR_TX[8]-STR_TX[7]-1), 7
	elseif h<0.50 then
		return texels_to_ms(STR_TX[6]-STR_TX[5]-1), 5
	elseif h<0.75 or p<0.4 then
		return texels_to_ms(STR_TX[4]-STR_TX[3]-1), 3
	end
	return texels_to_ms(STR_TX[2]-STR_TX[1]-1), 1
end

function get_pause_length()
	local a = db.actor
	local p, h = a.power, a.health
	if not a:alive() then
		return 50000
	elseif h<0.33 then
		return 500*p+500
	end
	return 500*p+50
end

function draw_dot(x)
	if is_pause then
		return _draw_line(0, x, -1, 1, 3, DOT_COLOR)
	else
		return _draw_line(0, x, -1, STR_TX[strikes[1].t]+ms_to_texels(t)-1, 3/LINE_X_COMPRESSION, DOT_COLOR)
	end
end

function draw_pause(i, x, pi)
	return _draw_line(i, x, pauses[pi], 1, 1, LINE_COLOR), i+1, pi+1
end

function draw_strike(i, x, si)
	local tx = STR_TX[strikes[si].t]
	local txs = STR_TX[strikes[si].t + 1]-tx-1
	return _draw_line(i, x, strikes[si].l, tx, txs, LINE_COLOR), i+1, si+1
end

function _draw_line(index, right_x, length, texture_x, texture_xs, color)
	local xs, lx -- => _x_size, _left_x
	local tx, txs = texture_x, texture_xs
	
	if index > MAX_LINE_INDEX then
		return -1
	elseif index == 0 then -- правый край
		xs = DOT_XSIZE
	elseif index == 1 then
		xs = ms_to_pixels(t)
		txs = round(txs*(t/length))
	else
		xs = ms_to_pixels(length)
	end
	
	lx = right_x-xs+1
	if lx<0 then -- левый край
		if tx>50 then
			tx = tx - round(lx/LINE_X_COMPRESSION)
			txs = round(txs*(right_x/xs))
		end
		xs = right_x
		lx = 0
	end
	
	local l = cardiogramm.line[index]
	
	l:SetColor(GetARGB(t_health_to_ARGB(db.actor.health, color)))
	
	l:SetWndRect(lx, 0, xs, Y_SIZE)
	l:SetOriginalRect(tx, 0, txs, TY_SIZE)
	return lx
end

function init_cardiogramm()
	cardiogramm = {}
	
	local arc_hud = arc_ui_hud.get_arc_hud()
	
	if not arc_hud then
		fault("arc_hud == nil")
		return false
	end
	
	local w = arc_hud:wnd()
	
	local b = CUIStatic()
	b:SetAutoDelete(true)
	b:SetStretchTexture(true)
	b:InitTexture("arc\\cardio_bkg")
	b:SetOriginalRect(0,0,TX_SIZE,TY_SIZE)
	b:Init(10,670,X_SIZE,Y_SIZE)
	w:AttachChild(b)
	cardiogramm.bkg = b
	
	cardiogramm.line = {}
	for i = 0, MAX_LINE_INDEX do
		local l = CUIStatic()
		l:SetAutoDelete(true)
		l:SetStretchTexture(true)
		l:InitTexture("arc\\cardio_line")
		l:Init(0,0,1,1)
		b:AttachChild(l)
		cardiogramm.line[i] = l
	end
	
	local f = CUIStatic()
	f:SetAutoDelete(true)
	f:SetStretchTexture(true)
	f:InitTexture("arc\\cardio_filter")
	f:SetOriginalRect(0,0,TX_SIZE,TY_SIZE)
	f:Init(0,0,X_SIZE,Y_SIZE)
	b:AttachChild(f)
	cardiogramm.filter = f
	
	local d = CUIStatic()
	d:SetAutoDelete(true)
	d:SetStretchTexture(true)
	d:InitTexture("arc\\health_monitor")
	d:Init(-10,-15,275,120)
	b:AttachChild(d)
	cardiogramm.device = d
	
	return true
end

function ms_to_pixels(t)
	return round(t*0.2*LINE_X_COMPRESSION)
end

function ms_to_texels(t)
	return round(t*0.2)
end

function texels_to_ms(x)
	return x*5
end

function t_health_to_ARGB(health, color)
	if health<0 then health = 0 end
	return alpha, round(color*math.cos(1.57*health)), round(color*math.sin(1.57*health)), 0
end

function round(x)
  if x>=0 then
    return math.floor(x+0.5)
  end
  return -math.floor(0.5-x)
end

-- DebugInfo:
function info(msg)
  arc.info(msg)
end

function warning(msg)
  info("!!!warning!!! "..msg)
  return false
end

function fault(msg)
  info("!!!fault!!! "..msg)
  return false
end
