-- -*- mode: lua; encoding: windows-1251 -*-

local DOSE_TIRING = 2500
local DOSE_HARMFUL = 5000
local DOSE_DEADLY = 35000

local DOSE_DEC_DIV = 15

local RAD_DOSE = 0

local last_anom_hit_time = 0
local detector_snd = false

local art_hits = {}

local arts_rad = 0
local anom_rad = 0

local outfit = {}
cur_rad_protection = 0

-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
local CONDITIONS_UPDATE_TIME = 100	-- real time ms
local update_time = 0

function on_actor_update(delta)
	if update_time < CONDITIONS_UPDATE_TIME then
		update_time = update_time + delta
		return
	end

	
	on_protection_update(delta)

	local add_rad = 0
--	log("add_rad %s", tostring(add_rad))
	local r = db.actor.radiation
	local d = r - 0.05
	mod_rad_dose(d*4000)
	db.actor.radiation = add_rad - d	

	if d > 0.000001 then
		local rp = cur_rad_protection		
		if rp == 0 and d > 0.005 then
			anom_rad = d / ( 1 - rp )
			last_anom_hit_time = 0
		else
			table.insert( art_hits, 1, { time_since_hit = 0, hit_power = d } )
		end
	end
	
	if last_anom_hit_time> 400 then
		anom_rad = 0
		last_anom_hit_time = 0
	else
		last_anom_hit_time = last_anom_hit_time + update_time
	end
	
	local i = 1
	local hits_time, hits_summ = 0, 0
	
	while art_hits[i] do
		local t = art_hits[i].time_since_hit + update_time
		
		if t > 200 then
			table.remove( art_hits, i )
		else
			hits_time = t
			hits_summ = hits_summ + art_hits[i].hit_power
			art_hits[i].time_since_hit = t
			i = i + 1
		end
	end
	
	arts_rad = ( hits_time > 0 ) and ( hits_summ * 200 / hits_time ) or 0

	update_time = 0
end

function on_protection_update(delta)
	local obj = db.actor:item_in_slot(6)
	if obj then
		local obj_id = obj:id()
		local obj_cond = obj:condition()
		local obj_sect = obj:section()
		
		if outfit.id ~= obj_id or outfit.cond ~= obj_cond then
			if outfit.sect ~= obj_sect then
				outfit.rad_pr = system_ini():r_float( obj_sect, "radiation_protection" )
				outfit.sect = obj_sect
			end
			
			outfit.id = obj_id
			outfit.cond = obj_cond
			
			cur_rad_protection = outfit.rad_pr * outfit.cond
		end
	else
		outfit = {}
		if cur_rad_protection > 0 then
			cur_rad_protection = 0
		end
	end
end

function save_rad_dose()
	ogse.save_var("rad_dose", RAD_DOSE)
end
	
function get_rad_level()
	return (arts_rad + anom_rad) / 0.1
end

function get_dose_string()
	return string.format("%.2f", RAD_DOSE/100)
end

function get_dose_string_color()
	local rd = RAD_DOSE / DOSE_DEADLY
	return math.min(round(196+196*rd),255), math.max(round(255-255*rd),0), math.max(round(196-255*rd),0)
end

function add_rad_dose(dose_delta)
	RAD_DOSE = math.max( 0, RAD_DOSE+dose_delta )
	
	local rd
	rd = (RAD_DOSE > DOSE_HARMFUL) and (RAD_DOSE - DOSE_HARMFUL) / (DOSE_DEADLY - DOSE_HARMFUL) or 0
	if rd<1 then
		arc_health.set_health_threshold(1-rd*rd)
	else
		arc_health.set_health_threshold(1-math.pow(rd,6))
	end
	
	arc_health.set_psy_threshold(1-rd/3)
	
	rd = (RAD_DOSE > DOSE_TIRING) and (RAD_DOSE - DOSE_TIRING) / (DOSE_DEADLY - DOSE_TIRING) or 0
	
	arc_health.set_power_penalty(rd*1.5)
end

local last_dose = {}
function mod_rad_dose(dose_delta)
	if #last_dose == 2 then
		local mean = (table.remove(last_dose, 1) + last_dose[1] + dose_delta) /3
		if mean > 0.01 then
			arc_ui_dosimeter.fade(true)
		end
	end

	if dose_delta < 0 then
		dose_delta = dose_delta / DOSE_DEC_DIV
	end
	table.insert(last_dose, dose_delta)
	
	add_rad_dose(dose_delta)
end
-----------------------------------------------------------------------------------
function use_antirad()
	local r = 10000 - 2500 + math.random(5000)
	add_rad_dose(-r)
end
-----------------------------------------------------------------------------------
function init()
	RAD_DOSE = ogse.load_var("rad_dose", 0)
end

function attach( sm )
  sm:subscribe({ signal = "on_spawn", fun = this.init })
  sm:subscribe({ signal = "on_save_after_all", fun = this.save_rad_dose })
end