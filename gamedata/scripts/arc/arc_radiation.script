-- -*- mode: lua; encoding: windows-1251 -*-

local DOSE_TIRING = 2500
local DOSE_HARMFUL = 5000
local DOSE_DEADLY = 35000

local DOSE_DEC_DIV = 15

local RAD_DOSE = 0

local last_anom_hit_time = 0
local detector_snd = false

local art_hits = {}

local anom_rad = 0

local last_cond
local cur_rad_protection = 0

-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
local update_time = 0

local function on_actor_update(delta)
	if update_time < 100 then
		update_time = update_time + delta
		return
	end

	local add_rad = 0
--	log("add_rad %s", tostring(add_rad))
	local d = db.actor.radiation - 0.05
	mod_rad_dose(d * 4000)
	db.actor.radiation = add_rad - d	

	if d > 0.000001 then	
		if cur_rad_protection == 0 and d > 0.005 then
			anom_rad = d / ( 1 - cur_rad_protection )
			last_anom_hit_time = 0
		else
			table.insert(art_hits, 1, { time_since_hit = 0, hit_power = d })
		end
	end
	
	if last_anom_hit_time > 400 then
		anom_rad = 0
		last_anom_hit_time = 0
	else
		last_anom_hit_time = last_anom_hit_time + update_time
	end
	
	local i = 1
	local hits_time, hits_summ = 0, 0
	
	while art_hits[i] do
		local t = art_hits[i].time_since_hit + update_time
		
		if t > 200 then
			table.remove(art_hits, i)
		else
			hits_time = t
			hits_summ = hits_summ + art_hits[i].hit_power
			art_hits[i].time_since_hit = t
			i = i + 1
		end
	end

	update_time = 0
end

local function on_protection_first_update()
	local outfit = db.actor:item_in_slot(6)
	if outfit then
		local outfit_rad_pr = get_float(outfit:section(), "radiation_protection")
		last_condition = outfit:condition()
		cur_rad_protection = outfit_rad_pr * last_condition
	else
		cur_rad_protection = 0
	end
end

local function on_protection_update()
	local outfit = db.actor:item_in_slot(6)
	if outfit and outfit:condition() ~= last_condition then
		local outfit_rad_pr = get_float(outfit:section(), "radiation_protection")
		last_condition = outfit:condition()
		cur_rad_protection = outfit_rad_pr * last_condition
	end
end

local function add_rad_dose(dose_delta)
	RAD_DOSE = math.max( 0, RAD_DOSE+dose_delta )
	
	local rd
	rd = (RAD_DOSE > DOSE_HARMFUL) and (RAD_DOSE - DOSE_HARMFUL) / (DOSE_DEADLY - DOSE_HARMFUL) or 0
	if rd<1 then
		arc_health.set_health_threshold(1-rd*rd)
	else
		arc_health.set_health_threshold(1-math.pow(rd,6))
	end
	
	arc_health.set_psy_threshold(1-rd/3)
	
	rd = (RAD_DOSE > DOSE_TIRING) and (RAD_DOSE - DOSE_TIRING) / (DOSE_DEADLY - DOSE_TIRING) or 0
	
	arc_health.set_power_penalty(rd*1.5)
end

local last_dose = {}
function mod_rad_dose(dose_delta)
	if #last_dose == 2 then
		local mean = (table.remove(last_dose, 1) + last_dose[1] + dose_delta) /3
	end

	if dose_delta < 0 then
		dose_delta = dose_delta / DOSE_DEC_DIV
	end

	table.insert(last_dose, dose_delta)
	
	add_rad_dose(dose_delta)
end

local function load_rad_dose()
	RAD_DOSE = ogse.load_var("rad_dose", 0)
end

local function save_rad_dose()
	ogse.save_var("rad_dose", RAD_DOSE)
end

function use_antirad()
	local r = 10000 - 2500 + math.random(5000)
	add_rad_dose(-r)
end

function get_radiation_dose()
	return RAD_DOSE/100
end

function attach( sm )
	sm:subscribe({ signal = "on_load", 		fun = load_rad_dose		 })
	sm:subscribe({ signal = "on_save_after_all", 	fun = save_rad_dose		 })
	sm:subscribe({ signal = "on_first_update",      fun = on_protection_first_update })
	sm:subscribe({ signal = "on_item_to_slot",      fun = on_protection_first_update })
	sm:subscribe({ signal = "on_item_to_ruck",      fun = on_protection_first_update })
	sm:subscribe({ signal = "on_drop",              fun = on_protection_first_update })
	sm:subscribe({ signal = "on_update",		fun = on_protection_update	 })
	sm:subscribe({ signal = "on_update",		fun = on_actor_update		 })
end