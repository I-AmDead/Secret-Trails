local ANTIRAD_CURES = 50000 --тут можно прописать количество милли–ентген, которое выводит 1 антирад

local DOSE_TIRING = 15000
local DOSE_HARMFUL = 30000
local DOSE_DEADLY = 60000

local rad_dose = 0

local last_anom_hit_time = 0

local max_hit = 0

local art_hits = {}

local arts_rad = 0
local anom_rad = 0


local rad_item_id = -1

function get_rad_level()
	return (arts_rad + anom_rad) / 0.1
end

function get_rad_dose()
	return rad_dose
end

function get_dose_string()
	--return string.format("%6.2f ht:%5.3f pt:%5.3f pp:%5.3f ", rad_dose/100, arc_health.health_threshold, arc_health.psy_threshold, arc_health.power_penalty)
--	return string.format("%6.2f art:%.3f anom:%.3f", rad_dose/100, arts_rad*10000, anom_rad*10000)
	return string.format("%6.2f", rad_dose/100)
end

function get_dose_string_color()
	local rd = rad_dose / DOSE_DEADLY
	return math.min(round(196+196*rd),255), math.max(round(255-255*rd),0), math.max(round(196-255*rd),0)
end

function set_rad_dose(new_dose)
	if new_dose > 0 then
		rad_dose = new_dose
	else
		rad_dose = 0
	end
	
	local rd
	rd = (rad_dose > DOSE_HARMFUL) and (rad_dose - DOSE_HARMFUL) / (DOSE_DEADLY - DOSE_HARMFUL) or 0
	if rd<1 then
		arc_health.set_health_threshold(1-rd*rd)
	else
		arc_health.set_health_threshold(1-math.pow(rd,6))
	end
	
	arc_health.set_psy_threshold(1-rd/3)
	
	rd = (rad_dose > DOSE_TIRING) and (rad_dose - DOSE_TIRING) / (DOSE_DEADLY - DOSE_TIRING) or 0
	--arc_health.set_power_penalty(1-1/(rd*rd+1))
	arc_health.set_power_penalty(rd*1.5)
	
	if rad_item_id>0 then
		if rad_dose<65500 then
			local obj = level.object_by_id(rad_item_id)
			obj:set_ammo_elapsed(round(rad_dose))
		end
	else
		arc.give_item("arc_radiation")
	end
end

function mod_rad_dose(dose_delta)
	if dose_delta > 0.01 then
		arc_ui_dosimeter.fade(true)
	elseif dose_delta < 0 then
		dose_delta = dose_delta / 10
	end
	
	set_rad_dose(rad_dose+dose_delta)
end

function on_actor_use_item(obj)
	local obj_sect = obj.section
	
	if obj_sect == "antirad" then
		local r = ANTIRAD_CURES - 2500 + math.random(5000)
		mod_rad_dose(-r)
	end
end

function on_rad_use()
		local r = ANTIRAD_CURES - 2500 + math.random(5000)
		mod_rad_dose(-r)
end

function on_get_rad_item(obj)
	local obj_id = obj:id()
	
	if rad_item_id > 0 then
		arc.remove_obj(obj_id, true)
		return
	end
	
	rad_item_id = obj_id
	
	local r = obj:get_ammo_in_magazine()
	
	if r ~= 65500 then
		rad_dose = r
	elseif rad_dose < 65500 then

		obj:set_ammo_elapsed(round(rad_dose))
	end
end

function on_lose_rad_item(obj)
	local obj_id = obj:id()
	
	arc.remove_obj(obj_id)
	arc.give_item("arc_radiation")
	
	rad_item_id = -1
end

function on_actor_update(delta)
--	if 3>2 then return end
	local r = db.actor.radiation
	
	local d = r - 0.05
	
	mod_rad_dose(d*4000)
	
	db.actor.radiation = -d
	
	
	if d>0.000001 then
	
		local rp = arc_inventory.cur_rad_protection		
		if arc_inventory.crp_changed or (rp==0 and d>0.005) then
			anom_rad = d / (1-rp)
			last_anom_hit_time = 0
		else
			table.insert(art_hits, 1, {time_since_hit = 0, hit_power = d})
		end
	end
	
	if last_anom_hit_time>400 then
		anom_rad = 0
		last_anom_hit_time = 0
	else
		last_anom_hit_time = last_anom_hit_time + delta
	end
	
	local i = 1
	local hits_time, hits_summ = 0, 0
	
	while art_hits[i] do
		local t = art_hits[i].time_since_hit + delta
		
		if t > 200 then
			table.remove(art_hits, i)
		else
			hits_time = t
			hits_summ = hits_summ + art_hits[i].hit_power
			art_hits[i].time_since_hit = t
			i = i + 1
		end
	end
	
	arts_rad = (hits_time > 0) and ( hits_summ * 200 / hits_time ) or 0
	
	if get_rad_level() > 0 then

	end
	
end


function round(x)
  if x>=0 then
    return math.floor(x+0.5)
  end
  return -math.floor(0.5-x)
end

-- DebugInfo:
function info(msg)
	arc.info(msg)
end

function warning(msg)
	info("arc_radiation: !!!warning!!! "..msg)
	return false
end

function fault(msg)
	info("arc_radiation: !!!fault!!! "..msg)
	return false
end
