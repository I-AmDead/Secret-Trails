local ignore_get_list  = {}
local ignore_lose_list = {}
local eat_on_get_list  = {}
local lost_items_list  = {}

function attach(sm)
  sm:subscribe({ signal = "on_update",       fun = this.on_actor_update     })
end

function on_actor_get_item(obj)
  local obj_id = obj:id()
  local obj_sect = obj:section()
  local obj_clsid = obj:clsid()
  
  for i,v in pairs(ignore_get_list) do
    if (v == obj_sect) or (v == obj_id) then
      table.remove(ignore_get_list, i)
      return
    end
  end
  
  for i,v in pairs(eat_on_get_list) do
    if (v == obj_sect) or (v == obj_id) then
      table.remove(eat_on_get_list, i)
      db.actor:eat(obj)
      return
    end
  end
   
  if obj:is_weapon_magazined() then
    if obj_sect == "arc_radiation" then
      arc_radiation.on_get_rad_item(obj)
    end
  end
end

function on_actor_lose_item(obj)
  local obj_id = obj:id()
  local obj_sect = obj:section()
  local obj_clsid = obj:clsid()
  
  for i,v in pairs(ignore_lose_list) do
    if (v == obj_sect) or (v == obj_id) then
      table.remove(ignore_lose_list, i)
      return
    end
  end
  
  table.insert(lost_items_list, {id=obj_id, section=obj_sect, clsid=obj_clsid})
  
  if isWeapon(obj) then
    if obj_sect == "arc_radiation" then
      arc_radiation.on_lose_rad_item(obj)
    end
  end 
end

function on_actor_update(delta)
  arc_radiation.on_actor_update(delta)
  arc_health.on_actor_update(delta)
  arc_ui_hud.on_actor_update(delta)
end

function give_item(item_section, ignore)
  if ignore then table.insert(ignore_get_list,item_section) end
  local a = db.actor
  return alife():create(item_section, a:position(), a:level_vertex_id(), a:game_vertex_id(), a:id())
end

function remove_obj(obj_id, ignore)
  if ignore then table.insert(ignore_lose_list,obj_id) end
  alife():release(alife():object(obj_id), true)
end

function sbw(s,p)
  return string.find(s,p) == 1
end