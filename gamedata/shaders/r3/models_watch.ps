#include "common.h"
#include "sload.h"
#include "screenspace_hud_raindrops.h"
#include "models_watch_effects.h"

uniform float4 m_affects;

float get_noise(float2 co) { return (frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453)) * 0.5; }

f_deffer main(p_flat I)
{
    f_deffer O;

    // узкая полоска искажений
    float problems = frac(timers.z * 5 * (1 + 2 * m_affects.x)) *2;
    I.tcdh.x += (m_affects.x > 0.09 && I.tcdh.y > problems - 0.01 && I.tcdh.y < problems) ? sin((I.tcdh.y - problems) * 5 * m_affects.y * 2) : 0;

    // широкая полоска искажений
    problems = cos((frac(timers.z * 2) - 0.5) * 3.1416) * 2 - 0.8;
    float AMPL = 0.13;
    I.tcdh.x -= (m_affects.x > 0.15 && I.tcdh.y > problems - AMPL && I.tcdh.y < problems + AMPL) ?
        (cos(4.71 * (I.tcdh.y - problems) / AMPL) * sin(frac(timers.z) * 6.2831 * 90) * 0.02 * (AMPL - abs(I.tcdh.y - problems)) / AMPL) : 0;

    // тряска влево-вправо в финальной стадии
    I.tcdh.x += (m_affects.x > 0.38) ? (m_affects.y - 0.5) * 0.04 : 0;

    // diffuse
    float3 D = tbase(I.tcdh); // IN:  rgb.a

    // Шум при выбросе
    float noise = (m_affects.x < 0.41 && m_affects.x > 0.0) ? get_noise(I.tcdh * timers.z) * m_affects.x * m_affects.x * 20 : 0.0;

    D.x += noise;
    D.y += noise;
    D.z += noise;

    if (m_affects.x > 0.41)
    {
        D += glitch_cube(I.tcdh);
        //D = 0.1f;
    }
    else
    {
        if (m_affects.a == 0)
        {        
            //D += watch_seconds(I.tcdh);
            if (watch_actor_params.w == 2)
                D += CardioGraph2(I.tcdh);
            else
                D += NixieTime(I.tcdh);
        }
    }

    if (m_affects.a > 0 && m_affects.x >= 0.08)
        D += watch_loading(I.tcdh);

#ifdef USE_TDETAIL
    //	D.rgb	= 2*D.rgb*tex2D	(s_detail, I.tcdbump).rgb;
    D.rgb = 2 * D.rgb * s_detail.Sample(smp_base, I.tcdbump).rgb;
#endif

    // hemi,sun,material
    float ms = xmaterial;
#ifdef USE_LM_HEMI
    //	float4	lm 	= tex2D( s_hemi, I.lmh );
    float4 lm = s_hemi.Sample(smp_rtlinear, I.lmh);
    //	float 	h  	= dot( lm.rgb, 1.h/3.h );
    float h = get_hemi(lm);
#ifdef USE_R2_STATIC_SUN
    //		 	ms 	= lm.w			;
    ms = get_sun(lm);
#endif
#else
    float h = I.position.w;
#ifdef USE_R2_STATIC_SUN
    ms = I.tcdh.w;
#endif
#endif

    // 2. Standart output
    float4 Ne = float4(normalize((float3)I.N.xyz), h);
    O = pack_gbuffer(Ne, float4(I.position.xyz + Ne.xyz * def_virtualh / 2.h, ms), float4(D.rgb, 1.0)); // OUT: rgb.gloss

    return O;
}
