// Screen Space Shaders - SSDO File
// Update 7 [ 2022/06/27 ]

#include "settings_screenspace_AO.h"

#ifndef SSAO_QUALITY
float calc_ssdo (float3 P, float3 N, float2 tc, float4 pos2d, uint iSample)
{
	return 1.0;
}

#else // SSAO_QUALITY

// Internal values
#if SSAO_QUALITY == 3
	#define G_SSDO_SAMPLE 32
#elif SSAO_QUALITY == 2
	#define G_SSDO_SAMPLE 16
#elif SSAO_QUALITY == 1
	#define G_SSDO_SAMPLE 8
#endif

static const float r_factor[3] =
{
	float(1.0),
	float(G_SSDO_SECOND_PASS_RADIUS),
	float(G_SSDO_SECOND_PASS_RADIUS * 0.5f)
};

static const float3 hemisphere[32] =
{
	float3(-0.134, 0.044, -0.825),	float3(0.045, -0.431, -0.529),	float3(-0.537, 0.195, -0.371),
	float3(0.525, -0.397, 0.713),	float3(0.895, 0.302, 0.139),	float3(-0.613, -0.408, -0.141),
	float3(0.307, 0.822, 0.169),	float3(-0.819, 0.037, -0.388),	float3(0.376, 0.009, 0.193),
	float3(-0.006, -0.103, -0.035),	float3(0.098, 0.393, 0.019),	float3(0.542, -0.218, -0.593),
	float3(0.526, -0.183, 0.424),	float3(-0.529, -0.178, 0.684),	float3(0.066, -0.657, -0.570),
	float3(-0.214, 0.288, 0.188),	float3(-0.689, -0.222, -0.192),	float3(-0.008, -0.212, -0.721),
	float3(0.053, -0.863, 0.054),	float3(0.639, -0.558, 0.289),	float3(-0.255, 0.958, 0.099),
	float3(-0.488, 0.473, -0.381),	float3(-0.592, -0.332, 0.137),	float3(0.080, 0.756, -0.494),
	float3(-0.638, 0.319, 0.686),	float3(-0.663, 0.230, -0.634),	float3(0.235, -0.547, 0.664),
	float3(0.164, -0.710, 0.086),	float3(-0.009, 0.493, -0.038),	float3(-0.322, 0.147, -0.105),
	float3(-0.554, -0.725, 0.289),	float3(0.534, 0.157, -0.250),
};


float4 calc_ssdo (float3 P, float3 N, float2 tc, float4 pos2d, uint iSample)
{	
	// Rendering AO till G_SSDO_RENDER_DIST
	if(P.z >= G_SSDO_RENDER_DIST)
		return float4(0, 0, 0, 1);
	
	// A factor to adjust some values to only affect weapons ( closer objects )
	float WeaponFactor = 1.0f - smoothstep(G_SSDO_WEAPON_LENGTH * 0.7f, G_SSDO_WEAPON_LENGTH, length(P.xyz));
	
	// AO Distance attenuation, Weapon ~ Scenary
	float attenuation = lerp(G_SSDO_ATTENUATION, G_SSDO_WEAPON_ATTENUATION, WeaponFactor);
	
	// Accumulate our lovely AO.
	float4 occ[2]; occ[0] = 0; occ[1] = 0;
	
#ifdef G_SSDO_SECOND_PASS
	[unroll (2)]
	for (int layer = 0; layer < 2; layer++)
#else
	int layer = 0;
#endif
	{
		// AO Radius
		float radius = G_SSDO_RADIUS * r_factor[layer];
		
		// Radius weapon adjustements
		radius *= lerp(1.0f, G_SSDO_WEAPON_RADIUS * r_factor[2 * layer], WeaponFactor);
		
		[unroll (G_SSDO_SAMPLE)]
		for (int i = 0; i < G_SSDO_SAMPLE; i++)
		{
			// Hemisphere points and normals for more detail
			float3 sample_rays = hemisphere[i] + N.xyz;
			
			// Sample position
			float3 occ_pos = P.xyz + sample_rays * radius;
			
			// Sample position to UV
			float2 occ_pos_uv = SSFX_view_to_uv(occ_pos);
			
			// Sample depth buffer
			float3 depth = SSFX_get_position(occ_pos_uv, iSample);
			
			// Calc occlusion
			float AO = step(depth.z, occ_pos.z);
						
			// Ray direction, current pixel to sample
			float3 dirVec = float3(occ_pos_uv.x - tc.x, tc.y - occ_pos_uv.y, P.z - depth.z) * float3(P.zz, 1.0f);
						
			// Distance attenuation
			AO *= smoothstep(0.0f, attenuation, length(dirVec));

			// Ray direction magnitude squared, used for discard and color bleeding
			float dirSqr = dot(dirVec, dirVec);
						
			// Discard incorrect occlusion, sky and out of bounds.
			float Discard = saturate(1.0f + -(1.0f * dirSqr)) * !is_sky(depth.z);
			
			// Accumulate final AO
			occ[layer].w += AO * Discard;
			
#ifdef G_SSDO_COLORBLEEDING
			[branch]
			if (layer == 0)
			{				
				float4 sample_il = SSFX_get_fast_scenelighting(occ_pos_uv, iSample);
				
				// Discard bleeding from far geometry
				sample_il.rgb *= Discard * lerp(0.3f, 1.0, saturate(P.z * 0.5f));
				
				// Use Normal and dirVec to adjust intensity
				sample_il *= 0.5f + 0.5f * saturate(dot(gbuf_unpack_normal( depth.xy ), -dirVec * dirSqr));
				
				// Accumulate color bleeding
				occ[layer].xyz += sample_il.rgb;
			}
#endif
		}
		
		occ[layer].w /= G_SSDO_SAMPLE;
	}
	
	// Prepare the final occlusion value
#ifdef G_SSDO_SECOND_PASS
	float4 final_occ = float4(occ[0].xyz / G_SSDO_SAMPLE, max(occ[0].w, occ[1].w));
#else
	float4 final_occ = float4(occ[0].xyz / G_SSDO_SAMPLE, occ[0].w);
#endif

	// Invert AO, white <-> black
	final_occ.w = 1.0f - final_occ.w;
	
	// AO softer
	final_occ.w = lerp(final_occ.w, sqrt(final_occ.w), G_SSDO_SMOOTH);
	
	// AO intensity 
	final_occ.w = pow(final_occ.w, G_SSDO_INTENSITY * (1.0f - (1.0f - G_SSDO_WEAPON_INTENSITY) * WeaponFactor));

	// Limit AO maximum occlusion
	final_occ.w = clamp(final_occ.w, G_SSDO_MAX_OCCLUSION, 1.0f);

	// Fadeout using G_SSDO_RENDER_DIST
#ifndef G_SSDO_COLORBLEEDING
	final_occ.w += smoothstep(G_SSDO_RENDER_DIST * 0.8f, G_SSDO_RENDER_DIST, P.z);
#else
	float f_out = smoothstep(G_SSDO_RENDER_DIST * 0.8f, G_SSDO_RENDER_DIST, P.z);
	final_occ.xyz *= 1.0f - f_out;
	final_occ.w += f_out;
#endif
	
	return saturate(final_occ);
}

#endif // SSAO_QUALITY